
SDCARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  08006cec  08006cec  00016cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071f0  080071f0  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080071f0  080071f0  000171f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071f8  080071f8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071f8  080071f8  000171f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071fc  080071fc  000171fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          000047c8  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004850  20004850  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fa1e  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002562  00000000  00000000  0002fad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009f8  00000000  00000000  00032038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008e0  00000000  00000000  00032a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021aa5  00000000  00000000  00033310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e58d  00000000  00000000  00054db5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3161  00000000  00000000  00063342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001264a3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002bc8  00000000  00000000  001264f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006cd4 	.word	0x08006cd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08006cd4 	.word	0x08006cd4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295
 800088c:	f04f 30ff 	movne.w	r0, #4294967295
 8000890:	f000 b96e 	b.w	8000b70 <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9d08      	ldr	r5, [sp, #32]
 80008b2:	4604      	mov	r4, r0
 80008b4:	468c      	mov	ip, r1
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	f040 8083 	bne.w	80009c2 <__udivmoddi4+0x116>
 80008bc:	428a      	cmp	r2, r1
 80008be:	4617      	mov	r7, r2
 80008c0:	d947      	bls.n	8000952 <__udivmoddi4+0xa6>
 80008c2:	fab2 f282 	clz	r2, r2
 80008c6:	b142      	cbz	r2, 80008da <__udivmoddi4+0x2e>
 80008c8:	f1c2 0020 	rsb	r0, r2, #32
 80008cc:	fa24 f000 	lsr.w	r0, r4, r0
 80008d0:	4091      	lsls	r1, r2
 80008d2:	4097      	lsls	r7, r2
 80008d4:	ea40 0c01 	orr.w	ip, r0, r1
 80008d8:	4094      	lsls	r4, r2
 80008da:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008de:	0c23      	lsrs	r3, r4, #16
 80008e0:	fbbc f6f8 	udiv	r6, ip, r8
 80008e4:	fa1f fe87 	uxth.w	lr, r7
 80008e8:	fb08 c116 	mls	r1, r8, r6, ip
 80008ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008f0:	fb06 f10e 	mul.w	r1, r6, lr
 80008f4:	4299      	cmp	r1, r3
 80008f6:	d909      	bls.n	800090c <__udivmoddi4+0x60>
 80008f8:	18fb      	adds	r3, r7, r3
 80008fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80008fe:	f080 8119 	bcs.w	8000b34 <__udivmoddi4+0x288>
 8000902:	4299      	cmp	r1, r3
 8000904:	f240 8116 	bls.w	8000b34 <__udivmoddi4+0x288>
 8000908:	3e02      	subs	r6, #2
 800090a:	443b      	add	r3, r7
 800090c:	1a5b      	subs	r3, r3, r1
 800090e:	b2a4      	uxth	r4, r4
 8000910:	fbb3 f0f8 	udiv	r0, r3, r8
 8000914:	fb08 3310 	mls	r3, r8, r0, r3
 8000918:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800091c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000920:	45a6      	cmp	lr, r4
 8000922:	d909      	bls.n	8000938 <__udivmoddi4+0x8c>
 8000924:	193c      	adds	r4, r7, r4
 8000926:	f100 33ff 	add.w	r3, r0, #4294967295
 800092a:	f080 8105 	bcs.w	8000b38 <__udivmoddi4+0x28c>
 800092e:	45a6      	cmp	lr, r4
 8000930:	f240 8102 	bls.w	8000b38 <__udivmoddi4+0x28c>
 8000934:	3802      	subs	r0, #2
 8000936:	443c      	add	r4, r7
 8000938:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800093c:	eba4 040e 	sub.w	r4, r4, lr
 8000940:	2600      	movs	r6, #0
 8000942:	b11d      	cbz	r5, 800094c <__udivmoddi4+0xa0>
 8000944:	40d4      	lsrs	r4, r2
 8000946:	2300      	movs	r3, #0
 8000948:	e9c5 4300 	strd	r4, r3, [r5]
 800094c:	4631      	mov	r1, r6
 800094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000952:	b902      	cbnz	r2, 8000956 <__udivmoddi4+0xaa>
 8000954:	deff      	udf	#255	; 0xff
 8000956:	fab2 f282 	clz	r2, r2
 800095a:	2a00      	cmp	r2, #0
 800095c:	d150      	bne.n	8000a00 <__udivmoddi4+0x154>
 800095e:	1bcb      	subs	r3, r1, r7
 8000960:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000964:	fa1f f887 	uxth.w	r8, r7
 8000968:	2601      	movs	r6, #1
 800096a:	fbb3 fcfe 	udiv	ip, r3, lr
 800096e:	0c21      	lsrs	r1, r4, #16
 8000970:	fb0e 331c 	mls	r3, lr, ip, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb08 f30c 	mul.w	r3, r8, ip
 800097c:	428b      	cmp	r3, r1
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0xe4>
 8000980:	1879      	adds	r1, r7, r1
 8000982:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0xe2>
 8000988:	428b      	cmp	r3, r1
 800098a:	f200 80e9 	bhi.w	8000b60 <__udivmoddi4+0x2b4>
 800098e:	4684      	mov	ip, r0
 8000990:	1ac9      	subs	r1, r1, r3
 8000992:	b2a3      	uxth	r3, r4
 8000994:	fbb1 f0fe 	udiv	r0, r1, lr
 8000998:	fb0e 1110 	mls	r1, lr, r0, r1
 800099c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009a0:	fb08 f800 	mul.w	r8, r8, r0
 80009a4:	45a0      	cmp	r8, r4
 80009a6:	d907      	bls.n	80009b8 <__udivmoddi4+0x10c>
 80009a8:	193c      	adds	r4, r7, r4
 80009aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80009ae:	d202      	bcs.n	80009b6 <__udivmoddi4+0x10a>
 80009b0:	45a0      	cmp	r8, r4
 80009b2:	f200 80d9 	bhi.w	8000b68 <__udivmoddi4+0x2bc>
 80009b6:	4618      	mov	r0, r3
 80009b8:	eba4 0408 	sub.w	r4, r4, r8
 80009bc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009c0:	e7bf      	b.n	8000942 <__udivmoddi4+0x96>
 80009c2:	428b      	cmp	r3, r1
 80009c4:	d909      	bls.n	80009da <__udivmoddi4+0x12e>
 80009c6:	2d00      	cmp	r5, #0
 80009c8:	f000 80b1 	beq.w	8000b2e <__udivmoddi4+0x282>
 80009cc:	2600      	movs	r6, #0
 80009ce:	e9c5 0100 	strd	r0, r1, [r5]
 80009d2:	4630      	mov	r0, r6
 80009d4:	4631      	mov	r1, r6
 80009d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009da:	fab3 f683 	clz	r6, r3
 80009de:	2e00      	cmp	r6, #0
 80009e0:	d14a      	bne.n	8000a78 <__udivmoddi4+0x1cc>
 80009e2:	428b      	cmp	r3, r1
 80009e4:	d302      	bcc.n	80009ec <__udivmoddi4+0x140>
 80009e6:	4282      	cmp	r2, r0
 80009e8:	f200 80b8 	bhi.w	8000b5c <__udivmoddi4+0x2b0>
 80009ec:	1a84      	subs	r4, r0, r2
 80009ee:	eb61 0103 	sbc.w	r1, r1, r3
 80009f2:	2001      	movs	r0, #1
 80009f4:	468c      	mov	ip, r1
 80009f6:	2d00      	cmp	r5, #0
 80009f8:	d0a8      	beq.n	800094c <__udivmoddi4+0xa0>
 80009fa:	e9c5 4c00 	strd	r4, ip, [r5]
 80009fe:	e7a5      	b.n	800094c <__udivmoddi4+0xa0>
 8000a00:	f1c2 0320 	rsb	r3, r2, #32
 8000a04:	fa20 f603 	lsr.w	r6, r0, r3
 8000a08:	4097      	lsls	r7, r2
 8000a0a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a0e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a12:	40d9      	lsrs	r1, r3
 8000a14:	4330      	orrs	r0, r6
 8000a16:	0c03      	lsrs	r3, r0, #16
 8000a18:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a1c:	fa1f f887 	uxth.w	r8, r7
 8000a20:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a28:	fb06 f108 	mul.w	r1, r6, r8
 8000a2c:	4299      	cmp	r1, r3
 8000a2e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a32:	d909      	bls.n	8000a48 <__udivmoddi4+0x19c>
 8000a34:	18fb      	adds	r3, r7, r3
 8000a36:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a3a:	f080 808d 	bcs.w	8000b58 <__udivmoddi4+0x2ac>
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	f240 808a 	bls.w	8000b58 <__udivmoddi4+0x2ac>
 8000a44:	3e02      	subs	r6, #2
 8000a46:	443b      	add	r3, r7
 8000a48:	1a5b      	subs	r3, r3, r1
 8000a4a:	b281      	uxth	r1, r0
 8000a4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a58:	fb00 f308 	mul.w	r3, r0, r8
 8000a5c:	428b      	cmp	r3, r1
 8000a5e:	d907      	bls.n	8000a70 <__udivmoddi4+0x1c4>
 8000a60:	1879      	adds	r1, r7, r1
 8000a62:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a66:	d273      	bcs.n	8000b50 <__udivmoddi4+0x2a4>
 8000a68:	428b      	cmp	r3, r1
 8000a6a:	d971      	bls.n	8000b50 <__udivmoddi4+0x2a4>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	4439      	add	r1, r7
 8000a70:	1acb      	subs	r3, r1, r3
 8000a72:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a76:	e778      	b.n	800096a <__udivmoddi4+0xbe>
 8000a78:	f1c6 0c20 	rsb	ip, r6, #32
 8000a7c:	fa03 f406 	lsl.w	r4, r3, r6
 8000a80:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a84:	431c      	orrs	r4, r3
 8000a86:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000a8e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a92:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a96:	431f      	orrs	r7, r3
 8000a98:	0c3b      	lsrs	r3, r7, #16
 8000a9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a9e:	fa1f f884 	uxth.w	r8, r4
 8000aa2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000aa6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aaa:	fb09 fa08 	mul.w	sl, r9, r8
 8000aae:	458a      	cmp	sl, r1
 8000ab0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ab4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ab8:	d908      	bls.n	8000acc <__udivmoddi4+0x220>
 8000aba:	1861      	adds	r1, r4, r1
 8000abc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ac0:	d248      	bcs.n	8000b54 <__udivmoddi4+0x2a8>
 8000ac2:	458a      	cmp	sl, r1
 8000ac4:	d946      	bls.n	8000b54 <__udivmoddi4+0x2a8>
 8000ac6:	f1a9 0902 	sub.w	r9, r9, #2
 8000aca:	4421      	add	r1, r4
 8000acc:	eba1 010a 	sub.w	r1, r1, sl
 8000ad0:	b2bf      	uxth	r7, r7
 8000ad2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ad6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ada:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ade:	fb00 f808 	mul.w	r8, r0, r8
 8000ae2:	45b8      	cmp	r8, r7
 8000ae4:	d907      	bls.n	8000af6 <__udivmoddi4+0x24a>
 8000ae6:	19e7      	adds	r7, r4, r7
 8000ae8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aec:	d22e      	bcs.n	8000b4c <__udivmoddi4+0x2a0>
 8000aee:	45b8      	cmp	r8, r7
 8000af0:	d92c      	bls.n	8000b4c <__udivmoddi4+0x2a0>
 8000af2:	3802      	subs	r0, #2
 8000af4:	4427      	add	r7, r4
 8000af6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000afa:	eba7 0708 	sub.w	r7, r7, r8
 8000afe:	fba0 8902 	umull	r8, r9, r0, r2
 8000b02:	454f      	cmp	r7, r9
 8000b04:	46c6      	mov	lr, r8
 8000b06:	4649      	mov	r1, r9
 8000b08:	d31a      	bcc.n	8000b40 <__udivmoddi4+0x294>
 8000b0a:	d017      	beq.n	8000b3c <__udivmoddi4+0x290>
 8000b0c:	b15d      	cbz	r5, 8000b26 <__udivmoddi4+0x27a>
 8000b0e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b12:	eb67 0701 	sbc.w	r7, r7, r1
 8000b16:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b1a:	40f2      	lsrs	r2, r6
 8000b1c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b20:	40f7      	lsrs	r7, r6
 8000b22:	e9c5 2700 	strd	r2, r7, [r5]
 8000b26:	2600      	movs	r6, #0
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	462e      	mov	r6, r5
 8000b30:	4628      	mov	r0, r5
 8000b32:	e70b      	b.n	800094c <__udivmoddi4+0xa0>
 8000b34:	4606      	mov	r6, r0
 8000b36:	e6e9      	b.n	800090c <__udivmoddi4+0x60>
 8000b38:	4618      	mov	r0, r3
 8000b3a:	e6fd      	b.n	8000938 <__udivmoddi4+0x8c>
 8000b3c:	4543      	cmp	r3, r8
 8000b3e:	d2e5      	bcs.n	8000b0c <__udivmoddi4+0x260>
 8000b40:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b44:	eb69 0104 	sbc.w	r1, r9, r4
 8000b48:	3801      	subs	r0, #1
 8000b4a:	e7df      	b.n	8000b0c <__udivmoddi4+0x260>
 8000b4c:	4608      	mov	r0, r1
 8000b4e:	e7d2      	b.n	8000af6 <__udivmoddi4+0x24a>
 8000b50:	4660      	mov	r0, ip
 8000b52:	e78d      	b.n	8000a70 <__udivmoddi4+0x1c4>
 8000b54:	4681      	mov	r9, r0
 8000b56:	e7b9      	b.n	8000acc <__udivmoddi4+0x220>
 8000b58:	4666      	mov	r6, ip
 8000b5a:	e775      	b.n	8000a48 <__udivmoddi4+0x19c>
 8000b5c:	4630      	mov	r0, r6
 8000b5e:	e74a      	b.n	80009f6 <__udivmoddi4+0x14a>
 8000b60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b64:	4439      	add	r1, r7
 8000b66:	e713      	b.n	8000990 <__udivmoddi4+0xe4>
 8000b68:	3802      	subs	r0, #2
 8000b6a:	443c      	add	r4, r7
 8000b6c:	e724      	b.n	80009b8 <__udivmoddi4+0x10c>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_idiv0>:
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <SELECT>:
#define SD_CS_GPIO_Port GPIOC
#define SD_CS_Pin GPIO_PIN_4

/* SPI Chip Select */
static void SELECT(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2110      	movs	r1, #16
 8000b7c:	4802      	ldr	r0, [pc, #8]	; (8000b88 <SELECT+0x14>)
 8000b7e:	f001 fae9 	bl	8002154 <HAL_GPIO_WritePin>
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40020800 	.word	0x40020800

08000b8c <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000b90:	2201      	movs	r2, #1
 8000b92:	2110      	movs	r1, #16
 8000b94:	4802      	ldr	r0, [pc, #8]	; (8000ba0 <DESELECT+0x14>)
 8000b96:	f001 fadd 	bl	8002154 <HAL_GPIO_WritePin>
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40020800 	.word	0x40020800

08000ba4 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000bae:	bf00      	nop
 8000bb0:	4808      	ldr	r0, [pc, #32]	; (8000bd4 <SPI_TxByte+0x30>)
 8000bb2:	f002 faaa 	bl	800310a <HAL_SPI_GetState>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d1f9      	bne.n	8000bb0 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000bbc:	1df9      	adds	r1, r7, #7
 8000bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	4803      	ldr	r0, [pc, #12]	; (8000bd4 <SPI_TxByte+0x30>)
 8000bc6:	f001 ffc2 	bl	8002b4e <HAL_SPI_Transmit>
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	2000276c 	.word	0x2000276c

08000bd8 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000bde:	23ff      	movs	r3, #255	; 0xff
 8000be0:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000be6:	bf00      	nop
 8000be8:	4809      	ldr	r0, [pc, #36]	; (8000c10 <SPI_RxByte+0x38>)
 8000bea:	f002 fa8e 	bl	800310a <HAL_SPI_GetState>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d1f9      	bne.n	8000be8 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000bf4:	1dba      	adds	r2, r7, #6
 8000bf6:	1df9      	adds	r1, r7, #7
 8000bf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	2301      	movs	r3, #1
 8000c00:	4803      	ldr	r0, [pc, #12]	; (8000c10 <SPI_RxByte+0x38>)
 8000c02:	f002 f8e0 	bl	8002dc6 <HAL_SPI_TransmitReceive>

  return data;
 8000c06:	79bb      	ldrb	r3, [r7, #6]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	2000276c 	.word	0x2000276c

08000c14 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000c1c:	f7ff ffdc 	bl	8000bd8 <SPI_RxByte>
 8000c20:	4603      	mov	r3, r0
 8000c22:	461a      	mov	r2, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	701a      	strb	r2, [r3, #0]
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8000c36:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <SD_ReadyWait+0x34>)
 8000c38:	2232      	movs	r2, #50	; 0x32
 8000c3a:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000c3c:	f7ff ffcc 	bl	8000bd8 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000c40:	f7ff ffca 	bl	8000bd8 <SPI_RxByte>
 8000c44:	4603      	mov	r3, r0
 8000c46:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	2bff      	cmp	r3, #255	; 0xff
 8000c4c:	d004      	beq.n	8000c58 <SD_ReadyWait+0x28>
 8000c4e:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <SD_ReadyWait+0x34>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1f3      	bne.n	8000c40 <SD_ReadyWait+0x10>

  return res;
 8000c58:	79fb      	ldrb	r3, [r7, #7]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	200027c8 	.word	0x200027c8

08000c68 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000c6e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000c72:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000c74:	f7ff ff8a 	bl	8000b8c <DESELECT>

  for(int i = 0; i < 10; i++)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	e005      	b.n	8000c8a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000c7e:	20ff      	movs	r0, #255	; 0xff
 8000c80:	f7ff ff90 	bl	8000ba4 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	3301      	adds	r3, #1
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	2b09      	cmp	r3, #9
 8000c8e:	ddf6      	ble.n	8000c7e <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000c90:	f7ff ff70 	bl	8000b74 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000c94:	2340      	movs	r3, #64	; 0x40
 8000c96:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000ca8:	2395      	movs	r3, #149	; 0x95
 8000caa:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000cac:	2300      	movs	r3, #0
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	e009      	b.n	8000cc6 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000cb2:	1d3a      	adds	r2, r7, #4
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff ff72 	bl	8000ba4 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	2b05      	cmp	r3, #5
 8000cca:	ddf2      	ble.n	8000cb2 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8000ccc:	e002      	b.n	8000cd4 <SD_PowerOn+0x6c>
  {
    Count--;
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000cd4:	f7ff ff80 	bl	8000bd8 <SPI_RxByte>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d002      	beq.n	8000ce4 <SD_PowerOn+0x7c>
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d1f4      	bne.n	8000cce <SD_PowerOn+0x66>
  }

  DESELECT();
 8000ce4:	f7ff ff52 	bl	8000b8c <DESELECT>
  SPI_TxByte(0XFF);
 8000ce8:	20ff      	movs	r0, #255	; 0xff
 8000cea:	f7ff ff5b 	bl	8000ba4 <SPI_TxByte>

  PowerFlag = 1;
 8000cee:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <SD_PowerOn+0x94>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	701a      	strb	r2, [r3, #0]
}
 8000cf4:	bf00      	nop
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	200000a5 	.word	0x200000a5

08000d00 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000d04:	4b03      	ldr	r3, [pc, #12]	; (8000d14 <SD_PowerOff+0x14>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	701a      	strb	r2, [r3, #0]
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	200000a5 	.word	0x200000a5

08000d18 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <SD_CheckPower+0x14>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	200000a5 	.word	0x200000a5

08000d30 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8000d3a:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <SD_RxDataBlock+0x68>)
 8000d3c:	220a      	movs	r2, #10
 8000d3e:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000d40:	f7ff ff4a 	bl	8000bd8 <SPI_RxByte>
 8000d44:	4603      	mov	r3, r0
 8000d46:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
 8000d4a:	2bff      	cmp	r3, #255	; 0xff
 8000d4c:	d104      	bne.n	8000d58 <SD_RxDataBlock+0x28>
 8000d4e:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <SD_RxDataBlock+0x68>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d1f3      	bne.n	8000d40 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	2bfe      	cmp	r3, #254	; 0xfe
 8000d5c:	d001      	beq.n	8000d62 <SD_RxDataBlock+0x32>
    return FALSE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e016      	b.n	8000d90 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	1c5a      	adds	r2, r3, #1
 8000d66:	607a      	str	r2, [r7, #4]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff53 	bl	8000c14 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	1c5a      	adds	r2, r3, #1
 8000d72:	607a      	str	r2, [r7, #4]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff4d 	bl	8000c14 <SPI_RxBytePtr>
  } while(btr -= 2);
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	3b02      	subs	r3, #2
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d1ed      	bne.n	8000d62 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8000d86:	f7ff ff27 	bl	8000bd8 <SPI_RxByte>
  SPI_RxByte();
 8000d8a:	f7ff ff25 	bl	8000bd8 <SPI_RxByte>

  return TRUE;
 8000d8e:	2301      	movs	r3, #1
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	200027c9 	.word	0x200027c9

08000d9c <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	460b      	mov	r3, r1
 8000da6:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000dac:	f7ff ff40 	bl	8000c30 <SD_ReadyWait>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2bff      	cmp	r3, #255	; 0xff
 8000db4:	d001      	beq.n	8000dba <SD_TxDataBlock+0x1e>
    return FALSE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	e040      	b.n	8000e3c <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8000dba:	78fb      	ldrb	r3, [r7, #3]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fef1 	bl	8000ba4 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8000dc2:	78fb      	ldrb	r3, [r7, #3]
 8000dc4:	2bfd      	cmp	r3, #253	; 0xfd
 8000dc6:	d031      	beq.n	8000e2c <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	1c5a      	adds	r2, r3, #1
 8000dd0:	607a      	str	r2, [r7, #4]
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fee5 	bl	8000ba4 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	1c5a      	adds	r2, r3, #1
 8000dde:	607a      	str	r2, [r7, #4]
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fede 	bl	8000ba4 <SPI_TxByte>
    } while (--wc);
 8000de8:	7bbb      	ldrb	r3, [r7, #14]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	73bb      	strb	r3, [r7, #14]
 8000dee:	7bbb      	ldrb	r3, [r7, #14]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d1eb      	bne.n	8000dcc <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8000df4:	f7ff fef0 	bl	8000bd8 <SPI_RxByte>
    SPI_RxByte();
 8000df8:	f7ff feee 	bl	8000bd8 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8000dfc:	e00b      	b.n	8000e16 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8000dfe:	f7ff feeb 	bl	8000bd8 <SPI_RxByte>
 8000e02:	4603      	mov	r3, r0
 8000e04:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	f003 031f 	and.w	r3, r3, #31
 8000e0c:	2b05      	cmp	r3, #5
 8000e0e:	d006      	beq.n	8000e1e <SD_TxDataBlock+0x82>
        break;

      i++;
 8000e10:	7b7b      	ldrb	r3, [r7, #13]
 8000e12:	3301      	adds	r3, #1
 8000e14:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8000e16:	7b7b      	ldrb	r3, [r7, #13]
 8000e18:	2b40      	cmp	r3, #64	; 0x40
 8000e1a:	d9f0      	bls.n	8000dfe <SD_TxDataBlock+0x62>
 8000e1c:	e000      	b.n	8000e20 <SD_TxDataBlock+0x84>
        break;
 8000e1e:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000e20:	bf00      	nop
 8000e22:	f7ff fed9 	bl	8000bd8 <SPI_RxByte>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d0fa      	beq.n	8000e22 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
 8000e2e:	f003 031f 	and.w	r3, r3, #31
 8000e32:	2b05      	cmp	r3, #5
 8000e34:	d101      	bne.n	8000e3a <SD_TxDataBlock+0x9e>
    return TRUE;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e000      	b.n	8000e3c <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000e3a:	2300      	movs	r3, #0
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	6039      	str	r1, [r7, #0]
 8000e4e:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000e50:	f7ff feee 	bl	8000c30 <SD_ReadyWait>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2bff      	cmp	r3, #255	; 0xff
 8000e58:	d001      	beq.n	8000e5e <SD_SendCmd+0x1a>
    return 0xFF;
 8000e5a:	23ff      	movs	r3, #255	; 0xff
 8000e5c:	e040      	b.n	8000ee0 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fe9f 	bl	8000ba4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	0e1b      	lsrs	r3, r3, #24
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fe99 	bl	8000ba4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	0c1b      	lsrs	r3, r3, #16
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fe93 	bl	8000ba4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fe8d 	bl	8000ba4 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fe88 	bl	8000ba4 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	2b40      	cmp	r3, #64	; 0x40
 8000e9c:	d101      	bne.n	8000ea2 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000e9e:	2395      	movs	r3, #149	; 0x95
 8000ea0:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	2b48      	cmp	r3, #72	; 0x48
 8000ea6:	d101      	bne.n	8000eac <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000ea8:	2387      	movs	r3, #135	; 0x87
 8000eaa:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fe78 	bl	8000ba4 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	2b4c      	cmp	r3, #76	; 0x4c
 8000eb8:	d101      	bne.n	8000ebe <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000eba:	f7ff fe8d 	bl	8000bd8 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8000ebe:	230a      	movs	r3, #10
 8000ec0:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8000ec2:	f7ff fe89 	bl	8000bd8 <SPI_RxByte>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000eca:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	da05      	bge.n	8000ede <SD_SendCmd+0x9a>
 8000ed2:	7bbb      	ldrb	r3, [r7, #14]
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	73bb      	strb	r3, [r7, #14]
 8000ed8:	7bbb      	ldrb	r3, [r7, #14]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1f1      	bne.n	8000ec2 <SD_SendCmd+0x7e>

  return res;
 8000ede:	7b7b      	ldrb	r3, [r7, #13]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e0d5      	b.n	80010a8 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000efc:	4b6c      	ldr	r3, [pc, #432]	; (80010b0 <SD_disk_initialize+0x1c8>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <SD_disk_initialize+0x2a>
    return Stat;
 8000f0a:	4b69      	ldr	r3, [pc, #420]	; (80010b0 <SD_disk_initialize+0x1c8>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	e0ca      	b.n	80010a8 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8000f12:	f7ff fea9 	bl	8000c68 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8000f16:	f7ff fe2d 	bl	8000b74 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000f1e:	2100      	movs	r1, #0
 8000f20:	2040      	movs	r0, #64	; 0x40
 8000f22:	f7ff ff8f 	bl	8000e44 <SD_SendCmd>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	f040 80a5 	bne.w	8001078 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000f2e:	4b61      	ldr	r3, [pc, #388]	; (80010b4 <SD_disk_initialize+0x1cc>)
 8000f30:	2264      	movs	r2, #100	; 0x64
 8000f32:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000f34:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000f38:	2048      	movs	r0, #72	; 0x48
 8000f3a:	f7ff ff83 	bl	8000e44 <SD_SendCmd>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d158      	bne.n	8000ff6 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000f44:	2300      	movs	r3, #0
 8000f46:	73fb      	strb	r3, [r7, #15]
 8000f48:	e00c      	b.n	8000f64 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8000f4a:	7bfc      	ldrb	r4, [r7, #15]
 8000f4c:	f7ff fe44 	bl	8000bd8 <SPI_RxByte>
 8000f50:	4603      	mov	r3, r0
 8000f52:	461a      	mov	r2, r3
 8000f54:	f107 0310 	add.w	r3, r7, #16
 8000f58:	4423      	add	r3, r4
 8000f5a:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	3301      	adds	r3, #1
 8000f62:	73fb      	strb	r3, [r7, #15]
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	2b03      	cmp	r3, #3
 8000f68:	d9ef      	bls.n	8000f4a <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000f6a:	7abb      	ldrb	r3, [r7, #10]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	f040 8083 	bne.w	8001078 <SD_disk_initialize+0x190>
 8000f72:	7afb      	ldrb	r3, [r7, #11]
 8000f74:	2baa      	cmp	r3, #170	; 0xaa
 8000f76:	d17f      	bne.n	8001078 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2077      	movs	r0, #119	; 0x77
 8000f7c:	f7ff ff62 	bl	8000e44 <SD_SendCmd>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d807      	bhi.n	8000f96 <SD_disk_initialize+0xae>
 8000f86:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000f8a:	2069      	movs	r0, #105	; 0x69
 8000f8c:	f7ff ff5a 	bl	8000e44 <SD_SendCmd>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d005      	beq.n	8000fa2 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8000f96:	4b47      	ldr	r3, [pc, #284]	; (80010b4 <SD_disk_initialize+0x1cc>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1eb      	bne.n	8000f78 <SD_disk_initialize+0x90>
 8000fa0:	e000      	b.n	8000fa4 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000fa2:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000fa4:	4b43      	ldr	r3, [pc, #268]	; (80010b4 <SD_disk_initialize+0x1cc>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d064      	beq.n	8001078 <SD_disk_initialize+0x190>
 8000fae:	2100      	movs	r1, #0
 8000fb0:	207a      	movs	r0, #122	; 0x7a
 8000fb2:	f7ff ff47 	bl	8000e44 <SD_SendCmd>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d15d      	bne.n	8001078 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	73fb      	strb	r3, [r7, #15]
 8000fc0:	e00c      	b.n	8000fdc <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000fc2:	7bfc      	ldrb	r4, [r7, #15]
 8000fc4:	f7ff fe08 	bl	8000bd8 <SPI_RxByte>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	461a      	mov	r2, r3
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	4423      	add	r3, r4
 8000fd2:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	73fb      	strb	r3, [r7, #15]
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	2b03      	cmp	r3, #3
 8000fe0:	d9ef      	bls.n	8000fc2 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8000fe2:	7a3b      	ldrb	r3, [r7, #8]
 8000fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <SD_disk_initialize+0x108>
 8000fec:	2306      	movs	r3, #6
 8000fee:	e000      	b.n	8000ff2 <SD_disk_initialize+0x10a>
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	73bb      	strb	r3, [r7, #14]
 8000ff4:	e040      	b.n	8001078 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	2077      	movs	r0, #119	; 0x77
 8000ffa:	f7ff ff23 	bl	8000e44 <SD_SendCmd>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b01      	cmp	r3, #1
 8001002:	d808      	bhi.n	8001016 <SD_disk_initialize+0x12e>
 8001004:	2100      	movs	r1, #0
 8001006:	2069      	movs	r0, #105	; 0x69
 8001008:	f7ff ff1c 	bl	8000e44 <SD_SendCmd>
 800100c:	4603      	mov	r3, r0
 800100e:	2b01      	cmp	r3, #1
 8001010:	d801      	bhi.n	8001016 <SD_disk_initialize+0x12e>
 8001012:	2302      	movs	r3, #2
 8001014:	e000      	b.n	8001018 <SD_disk_initialize+0x130>
 8001016:	2301      	movs	r3, #1
 8001018:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 800101a:	7bbb      	ldrb	r3, [r7, #14]
 800101c:	2b02      	cmp	r3, #2
 800101e:	d10e      	bne.n	800103e <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001020:	2100      	movs	r1, #0
 8001022:	2077      	movs	r0, #119	; 0x77
 8001024:	f7ff ff0e 	bl	8000e44 <SD_SendCmd>
 8001028:	4603      	mov	r3, r0
 800102a:	2b01      	cmp	r3, #1
 800102c:	d80e      	bhi.n	800104c <SD_disk_initialize+0x164>
 800102e:	2100      	movs	r1, #0
 8001030:	2069      	movs	r0, #105	; 0x69
 8001032:	f7ff ff07 	bl	8000e44 <SD_SendCmd>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d107      	bne.n	800104c <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 800103c:	e00d      	b.n	800105a <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800103e:	2100      	movs	r1, #0
 8001040:	2041      	movs	r0, #65	; 0x41
 8001042:	f7ff feff 	bl	8000e44 <SD_SendCmd>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d005      	beq.n	8001058 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 800104c:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <SD_disk_initialize+0x1cc>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	d1e1      	bne.n	800101a <SD_disk_initialize+0x132>
 8001056:	e000      	b.n	800105a <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001058:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 800105a:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <SD_disk_initialize+0x1cc>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	d007      	beq.n	8001074 <SD_disk_initialize+0x18c>
 8001064:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001068:	2050      	movs	r0, #80	; 0x50
 800106a:	f7ff feeb 	bl	8000e44 <SD_SendCmd>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001078:	4a0f      	ldr	r2, [pc, #60]	; (80010b8 <SD_disk_initialize+0x1d0>)
 800107a:	7bbb      	ldrb	r3, [r7, #14]
 800107c:	7013      	strb	r3, [r2, #0]

  DESELECT();
 800107e:	f7ff fd85 	bl	8000b8c <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001082:	f7ff fda9 	bl	8000bd8 <SPI_RxByte>

  if (type)
 8001086:	7bbb      	ldrb	r3, [r7, #14]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d008      	beq.n	800109e <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <SD_disk_initialize+0x1c8>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	f023 0301 	bic.w	r3, r3, #1
 8001096:	b2da      	uxtb	r2, r3
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <SD_disk_initialize+0x1c8>)
 800109a:	701a      	strb	r2, [r3, #0]
 800109c:	e001      	b.n	80010a2 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800109e:	f7ff fe2f 	bl	8000d00 <SD_PowerOff>
  }

  return Stat;
 80010a2:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <SD_disk_initialize+0x1c8>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	b2db      	uxtb	r3, r3
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd90      	pop	{r4, r7, pc}
 80010b0:	20000000 	.word	0x20000000
 80010b4:	200027c9 	.word	0x200027c9
 80010b8:	200000a4 	.word	0x200000a4

080010bc <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SD_disk_status+0x14>
    return STA_NOINIT;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e002      	b.n	80010d6 <SD_disk_status+0x1a>

  return Stat;
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <SD_disk_status+0x28>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b2db      	uxtb	r3, r3
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20000000 	.word	0x20000000

080010e8 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	607a      	str	r2, [r7, #4]
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	4603      	mov	r3, r0
 80010f6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d102      	bne.n	8001104 <SD_disk_read+0x1c>
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d101      	bne.n	8001108 <SD_disk_read+0x20>
    return RES_PARERR;
 8001104:	2304      	movs	r3, #4
 8001106:	e051      	b.n	80011ac <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001108:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <SD_disk_read+0xcc>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001116:	2303      	movs	r3, #3
 8001118:	e048      	b.n	80011ac <SD_disk_read+0xc4>

  if (!(CardType & 4))
 800111a:	4b27      	ldr	r3, [pc, #156]	; (80011b8 <SD_disk_read+0xd0>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	2b00      	cmp	r3, #0
 8001124:	d102      	bne.n	800112c <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	025b      	lsls	r3, r3, #9
 800112a:	607b      	str	r3, [r7, #4]

  SELECT();
 800112c:	f7ff fd22 	bl	8000b74 <SELECT>

  if (count == 1)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d111      	bne.n	800115a <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	2051      	movs	r0, #81	; 0x51
 800113a:	f7ff fe83 	bl	8000e44 <SD_SendCmd>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d129      	bne.n	8001198 <SD_disk_read+0xb0>
 8001144:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001148:	68b8      	ldr	r0, [r7, #8]
 800114a:	f7ff fdf1 	bl	8000d30 <SD_RxDataBlock>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d021      	beq.n	8001198 <SD_disk_read+0xb0>
      count = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	e01e      	b.n	8001198 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	2052      	movs	r0, #82	; 0x52
 800115e:	f7ff fe71 	bl	8000e44 <SD_SendCmd>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d117      	bne.n	8001198 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001168:	f44f 7100 	mov.w	r1, #512	; 0x200
 800116c:	68b8      	ldr	r0, [r7, #8]
 800116e:	f7ff fddf 	bl	8000d30 <SD_RxDataBlock>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d00a      	beq.n	800118e <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800117e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	3b01      	subs	r3, #1
 8001184:	603b      	str	r3, [r7, #0]
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d1ed      	bne.n	8001168 <SD_disk_read+0x80>
 800118c:	e000      	b.n	8001190 <SD_disk_read+0xa8>
          break;
 800118e:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8001190:	2100      	movs	r1, #0
 8001192:	204c      	movs	r0, #76	; 0x4c
 8001194:	f7ff fe56 	bl	8000e44 <SD_SendCmd>
    }
  }

  DESELECT();
 8001198:	f7ff fcf8 	bl	8000b8c <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 800119c:	f7ff fd1c 	bl	8000bd8 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	bf14      	ite	ne
 80011a6:	2301      	movne	r3, #1
 80011a8:	2300      	moveq	r3, #0
 80011aa:	b2db      	uxtb	r3, r3
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000000 	.word	0x20000000
 80011b8:	200000a4 	.word	0x200000a4

080011bc <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60b9      	str	r1, [r7, #8]
 80011c4:	607a      	str	r2, [r7, #4]
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	4603      	mov	r3, r0
 80011ca:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d102      	bne.n	80011d8 <SD_disk_write+0x1c>
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d101      	bne.n	80011dc <SD_disk_write+0x20>
    return RES_PARERR;
 80011d8:	2304      	movs	r3, #4
 80011da:	e06b      	b.n	80012b4 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 80011dc:	4b37      	ldr	r3, [pc, #220]	; (80012bc <SD_disk_write+0x100>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <SD_disk_write+0x32>
    return RES_NOTRDY;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e062      	b.n	80012b4 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 80011ee:	4b33      	ldr	r3, [pc, #204]	; (80012bc <SD_disk_write+0x100>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <SD_disk_write+0x44>
    return RES_WRPRT;
 80011fc:	2302      	movs	r3, #2
 80011fe:	e059      	b.n	80012b4 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8001200:	4b2f      	ldr	r3, [pc, #188]	; (80012c0 <SD_disk_write+0x104>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	f003 0304 	and.w	r3, r3, #4
 8001208:	2b00      	cmp	r3, #0
 800120a:	d102      	bne.n	8001212 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	025b      	lsls	r3, r3, #9
 8001210:	607b      	str	r3, [r7, #4]

  SELECT();
 8001212:	f7ff fcaf 	bl	8000b74 <SELECT>

  if (count == 1)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d110      	bne.n	800123e <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800121c:	6879      	ldr	r1, [r7, #4]
 800121e:	2058      	movs	r0, #88	; 0x58
 8001220:	f7ff fe10 	bl	8000e44 <SD_SendCmd>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d13a      	bne.n	80012a0 <SD_disk_write+0xe4>
 800122a:	21fe      	movs	r1, #254	; 0xfe
 800122c:	68b8      	ldr	r0, [r7, #8]
 800122e:	f7ff fdb5 	bl	8000d9c <SD_TxDataBlock>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d033      	beq.n	80012a0 <SD_disk_write+0xe4>
      count = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	e030      	b.n	80012a0 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 800123e:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <SD_disk_write+0x104>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d007      	beq.n	800125a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800124a:	2100      	movs	r1, #0
 800124c:	2077      	movs	r0, #119	; 0x77
 800124e:	f7ff fdf9 	bl	8000e44 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001252:	6839      	ldr	r1, [r7, #0]
 8001254:	2057      	movs	r0, #87	; 0x57
 8001256:	f7ff fdf5 	bl	8000e44 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	2059      	movs	r0, #89	; 0x59
 800125e:	f7ff fdf1 	bl	8000e44 <SD_SendCmd>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d11b      	bne.n	80012a0 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001268:	21fc      	movs	r1, #252	; 0xfc
 800126a:	68b8      	ldr	r0, [r7, #8]
 800126c:	f7ff fd96 	bl	8000d9c <SD_TxDataBlock>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d00a      	beq.n	800128c <SD_disk_write+0xd0>
          break;

        buff += 512;
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800127c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	3b01      	subs	r3, #1
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1ee      	bne.n	8001268 <SD_disk_write+0xac>
 800128a:	e000      	b.n	800128e <SD_disk_write+0xd2>
          break;
 800128c:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 800128e:	21fd      	movs	r1, #253	; 0xfd
 8001290:	2000      	movs	r0, #0
 8001292:	f7ff fd83 	bl	8000d9c <SD_TxDataBlock>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d101      	bne.n	80012a0 <SD_disk_write+0xe4>
      {
        count = 1;
 800129c:	2301      	movs	r3, #1
 800129e:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 80012a0:	f7ff fc74 	bl	8000b8c <DESELECT>
  SPI_RxByte();
 80012a4:	f7ff fc98 	bl	8000bd8 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	bf14      	ite	ne
 80012ae:	2301      	movne	r3, #1
 80012b0:	2300      	moveq	r3, #0
 80012b2:	b2db      	uxtb	r3, r3
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000000 	.word	0x20000000
 80012c0:	200000a4 	.word	0x200000a4

080012c4 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80012c4:	b590      	push	{r4, r7, lr}
 80012c6:	b08b      	sub	sp, #44	; 0x2c
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	603a      	str	r2, [r7, #0]
 80012ce:	71fb      	strb	r3, [r7, #7]
 80012d0:	460b      	mov	r3, r1
 80012d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80012de:	2304      	movs	r3, #4
 80012e0:	e11b      	b.n	800151a <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 80012e8:	79bb      	ldrb	r3, [r7, #6]
 80012ea:	2b05      	cmp	r3, #5
 80012ec:	d129      	bne.n	8001342 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 80012ee:	6a3b      	ldr	r3, [r7, #32]
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d017      	beq.n	8001326 <SD_disk_ioctl+0x62>
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	dc1f      	bgt.n	800133a <SD_disk_ioctl+0x76>
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d002      	beq.n	8001304 <SD_disk_ioctl+0x40>
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d00b      	beq.n	800131a <SD_disk_ioctl+0x56>
 8001302:	e01a      	b.n	800133a <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001304:	f7ff fd08 	bl	8000d18 <SD_CheckPower>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 800130e:	f7ff fcf7 	bl	8000d00 <SD_PowerOff>
      res = RES_OK;
 8001312:	2300      	movs	r3, #0
 8001314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001318:	e0fd      	b.n	8001516 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 800131a:	f7ff fca5 	bl	8000c68 <SD_PowerOn>
      res = RES_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001324:	e0f7      	b.n	8001516 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001326:	6a3b      	ldr	r3, [r7, #32]
 8001328:	1c5c      	adds	r4, r3, #1
 800132a:	f7ff fcf5 	bl	8000d18 <SD_CheckPower>
 800132e:	4603      	mov	r3, r0
 8001330:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001332:	2300      	movs	r3, #0
 8001334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001338:	e0ed      	b.n	8001516 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 800133a:	2304      	movs	r3, #4
 800133c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001340:	e0e9      	b.n	8001516 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8001342:	4b78      	ldr	r3, [pc, #480]	; (8001524 <SD_disk_ioctl+0x260>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	b2db      	uxtb	r3, r3
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001350:	2303      	movs	r3, #3
 8001352:	e0e2      	b.n	800151a <SD_disk_ioctl+0x256>

    SELECT();
 8001354:	f7ff fc0e 	bl	8000b74 <SELECT>

    switch (ctrl)
 8001358:	79bb      	ldrb	r3, [r7, #6]
 800135a:	2b0d      	cmp	r3, #13
 800135c:	f200 80cc 	bhi.w	80014f8 <SD_disk_ioctl+0x234>
 8001360:	a201      	add	r2, pc, #4	; (adr r2, 8001368 <SD_disk_ioctl+0xa4>)
 8001362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001366:	bf00      	nop
 8001368:	08001463 	.word	0x08001463
 800136c:	080013a1 	.word	0x080013a1
 8001370:	08001453 	.word	0x08001453
 8001374:	080014f9 	.word	0x080014f9
 8001378:	080014f9 	.word	0x080014f9
 800137c:	080014f9 	.word	0x080014f9
 8001380:	080014f9 	.word	0x080014f9
 8001384:	080014f9 	.word	0x080014f9
 8001388:	080014f9 	.word	0x080014f9
 800138c:	080014f9 	.word	0x080014f9
 8001390:	080014f9 	.word	0x080014f9
 8001394:	08001475 	.word	0x08001475
 8001398:	08001499 	.word	0x08001499
 800139c:	080014bd 	.word	0x080014bd
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80013a0:	2100      	movs	r1, #0
 80013a2:	2049      	movs	r0, #73	; 0x49
 80013a4:	f7ff fd4e 	bl	8000e44 <SD_SendCmd>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f040 80a8 	bne.w	8001500 <SD_disk_ioctl+0x23c>
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	2110      	movs	r1, #16
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fcba 	bl	8000d30 <SD_RxDataBlock>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f000 809e 	beq.w	8001500 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 80013c4:	7b3b      	ldrb	r3, [r7, #12]
 80013c6:	099b      	lsrs	r3, r3, #6
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d10e      	bne.n	80013ec <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80013ce:	7d7b      	ldrb	r3, [r7, #21]
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	7d3b      	ldrb	r3, [r7, #20]
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	021b      	lsls	r3, r3, #8
 80013d8:	b29b      	uxth	r3, r3
 80013da:	4413      	add	r3, r2
 80013dc:	b29b      	uxth	r3, r3
 80013de:	3301      	adds	r3, #1
 80013e0:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80013e2:	8bfb      	ldrh	r3, [r7, #30]
 80013e4:	029a      	lsls	r2, r3, #10
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	e02e      	b.n	800144a <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80013ec:	7c7b      	ldrb	r3, [r7, #17]
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	7dbb      	ldrb	r3, [r7, #22]
 80013f6:	09db      	lsrs	r3, r3, #7
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	4413      	add	r3, r2
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	7d7b      	ldrb	r3, [r7, #21]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	b2db      	uxtb	r3, r3
 8001404:	f003 0306 	and.w	r3, r3, #6
 8001408:	b2db      	uxtb	r3, r3
 800140a:	4413      	add	r3, r2
 800140c:	b2db      	uxtb	r3, r3
 800140e:	3302      	adds	r3, #2
 8001410:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001414:	7d3b      	ldrb	r3, [r7, #20]
 8001416:	099b      	lsrs	r3, r3, #6
 8001418:	b2db      	uxtb	r3, r3
 800141a:	b29a      	uxth	r2, r3
 800141c:	7cfb      	ldrb	r3, [r7, #19]
 800141e:	b29b      	uxth	r3, r3
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	b29b      	uxth	r3, r3
 8001424:	4413      	add	r3, r2
 8001426:	b29a      	uxth	r2, r3
 8001428:	7cbb      	ldrb	r3, [r7, #18]
 800142a:	029b      	lsls	r3, r3, #10
 800142c:	b29b      	uxth	r3, r3
 800142e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001432:	b29b      	uxth	r3, r3
 8001434:	4413      	add	r3, r2
 8001436:	b29b      	uxth	r3, r3
 8001438:	3301      	adds	r3, #1
 800143a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800143c:	8bfa      	ldrh	r2, [r7, #30]
 800143e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001442:	3b09      	subs	r3, #9
 8001444:	409a      	lsls	r2, r3
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 800144a:	2300      	movs	r3, #0
 800144c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001450:	e056      	b.n	8001500 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001458:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800145a:	2300      	movs	r3, #0
 800145c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001460:	e055      	b.n	800150e <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001462:	f7ff fbe5 	bl	8000c30 <SD_ReadyWait>
 8001466:	4603      	mov	r3, r0
 8001468:	2bff      	cmp	r3, #255	; 0xff
 800146a:	d14b      	bne.n	8001504 <SD_disk_ioctl+0x240>
        res = RES_OK;
 800146c:	2300      	movs	r3, #0
 800146e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001472:	e047      	b.n	8001504 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001474:	2100      	movs	r1, #0
 8001476:	2049      	movs	r0, #73	; 0x49
 8001478:	f7ff fce4 	bl	8000e44 <SD_SendCmd>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d142      	bne.n	8001508 <SD_disk_ioctl+0x244>
 8001482:	2110      	movs	r1, #16
 8001484:	6a38      	ldr	r0, [r7, #32]
 8001486:	f7ff fc53 	bl	8000d30 <SD_RxDataBlock>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d03b      	beq.n	8001508 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001490:	2300      	movs	r3, #0
 8001492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001496:	e037      	b.n	8001508 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001498:	2100      	movs	r1, #0
 800149a:	204a      	movs	r0, #74	; 0x4a
 800149c:	f7ff fcd2 	bl	8000e44 <SD_SendCmd>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d132      	bne.n	800150c <SD_disk_ioctl+0x248>
 80014a6:	2110      	movs	r1, #16
 80014a8:	6a38      	ldr	r0, [r7, #32]
 80014aa:	f7ff fc41 	bl	8000d30 <SD_RxDataBlock>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d02b      	beq.n	800150c <SD_disk_ioctl+0x248>
        res = RES_OK;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80014ba:	e027      	b.n	800150c <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 80014bc:	2100      	movs	r1, #0
 80014be:	207a      	movs	r0, #122	; 0x7a
 80014c0:	f7ff fcc0 	bl	8000e44 <SD_SendCmd>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d116      	bne.n	80014f8 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 80014ca:	2300      	movs	r3, #0
 80014cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80014d0:	e00b      	b.n	80014ea <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 80014d2:	6a3c      	ldr	r4, [r7, #32]
 80014d4:	1c63      	adds	r3, r4, #1
 80014d6:	623b      	str	r3, [r7, #32]
 80014d8:	f7ff fb7e 	bl	8000bd8 <SPI_RxByte>
 80014dc:	4603      	mov	r3, r0
 80014de:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80014e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014e4:	3301      	adds	r3, #1
 80014e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80014ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d9ef      	bls.n	80014d2 <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 80014f2:	2300      	movs	r3, #0
 80014f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 80014f8:	2304      	movs	r3, #4
 80014fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014fe:	e006      	b.n	800150e <SD_disk_ioctl+0x24a>
      break;
 8001500:	bf00      	nop
 8001502:	e004      	b.n	800150e <SD_disk_ioctl+0x24a>
      break;
 8001504:	bf00      	nop
 8001506:	e002      	b.n	800150e <SD_disk_ioctl+0x24a>
      break;
 8001508:	bf00      	nop
 800150a:	e000      	b.n	800150e <SD_disk_ioctl+0x24a>
      break;
 800150c:	bf00      	nop
    }

    DESELECT();
 800150e:	f7ff fb3d 	bl	8000b8c <DESELECT>
    SPI_RxByte();
 8001512:	f7ff fb61 	bl	8000bd8 <SPI_RxByte>
  }

  return res;
 8001516:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800151a:	4618      	mov	r0, r3
 800151c:	372c      	adds	r7, #44	; 0x2c
 800151e:	46bd      	mov	sp, r7
 8001520:	bd90      	pop	{r4, r7, pc}
 8001522:	bf00      	nop
 8001524:	20000000 	.word	0x20000000

08001528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800152e:	f000 faf9 	bl	8001b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001532:	f000 f89b 	bl	800166c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001536:	f000 f939 	bl	80017ac <MX_GPIO_Init>
  MX_SPI1_Init();
 800153a:	f000 f901 	bl	8001740 <MX_SPI1_Init>
  MX_FATFS_Init();
 800153e:	f001 febd 	bl	80032bc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  fresult = f_mount(&fs, "", 0);
 8001542:	2200      	movs	r2, #0
 8001544:	493b      	ldr	r1, [pc, #236]	; (8001634 <main+0x10c>)
 8001546:	483c      	ldr	r0, [pc, #240]	; (8001638 <main+0x110>)
 8001548:	f004 f8ce 	bl	80056e8 <f_mount>
 800154c:	4603      	mov	r3, r0
 800154e:	461a      	mov	r2, r3
 8001550:	4b3a      	ldr	r3, [pc, #232]	; (800163c <main+0x114>)
 8001552:	701a      	strb	r2, [r3, #0]
  f_getfree("", &fre_clust, &pfs);
 8001554:	4a3a      	ldr	r2, [pc, #232]	; (8001640 <main+0x118>)
 8001556:	493b      	ldr	r1, [pc, #236]	; (8001644 <main+0x11c>)
 8001558:	4836      	ldr	r0, [pc, #216]	; (8001634 <main+0x10c>)
 800155a:	f004 fce9 	bl	8005f30 <f_getfree>
  total = (uint32_t)((pfs -> n_fatent-2) * pfs->csize-0.5);
 800155e:	4b38      	ldr	r3, [pc, #224]	; (8001640 <main+0x118>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	69db      	ldr	r3, [r3, #28]
 8001564:	3b02      	subs	r3, #2
 8001566:	4a36      	ldr	r2, [pc, #216]	; (8001640 <main+0x118>)
 8001568:	6812      	ldr	r2, [r2, #0]
 800156a:	8952      	ldrh	r2, [r2, #10]
 800156c:	fb02 f303 	mul.w	r3, r2, r3
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff f8e9 	bl	8000748 <__aeabi_ui2d>
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	4b33      	ldr	r3, [pc, #204]	; (8001648 <main+0x120>)
 800157c:	f7fe ffa6 	bl	80004cc <__aeabi_dsub>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4610      	mov	r0, r2
 8001586:	4619      	mov	r1, r3
 8001588:	f7ff f958 	bl	800083c <__aeabi_d2uiz>
 800158c:	4603      	mov	r3, r0
 800158e:	4a2f      	ldr	r2, [pc, #188]	; (800164c <main+0x124>)
 8001590:	6013      	str	r3, [r2, #0]
  free_space = (uint32_t)(fre_clust * pfs ->csize * 0.5);
 8001592:	4b2b      	ldr	r3, [pc, #172]	; (8001640 <main+0x118>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	895b      	ldrh	r3, [r3, #10]
 8001598:	461a      	mov	r2, r3
 800159a:	4b2a      	ldr	r3, [pc, #168]	; (8001644 <main+0x11c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	fb03 f302 	mul.w	r3, r3, r2
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff f8d0 	bl	8000748 <__aeabi_ui2d>
 80015a8:	f04f 0200 	mov.w	r2, #0
 80015ac:	4b26      	ldr	r3, [pc, #152]	; (8001648 <main+0x120>)
 80015ae:	f7fe fe5f 	bl	8000270 <__aeabi_dmul>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	4610      	mov	r0, r2
 80015b8:	4619      	mov	r1, r3
 80015ba:	f7ff f93f 	bl	800083c <__aeabi_d2uiz>
 80015be:	4603      	mov	r3, r0
 80015c0:	4a23      	ldr	r2, [pc, #140]	; (8001650 <main+0x128>)
 80015c2:	6013      	str	r3, [r2, #0]
  fresult = f_open(&file,"myFirstFile.txt",FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
 80015c4:	220b      	movs	r2, #11
 80015c6:	4923      	ldr	r1, [pc, #140]	; (8001654 <main+0x12c>)
 80015c8:	4823      	ldr	r0, [pc, #140]	; (8001658 <main+0x130>)
 80015ca:	f004 f8d3 	bl	8005774 <f_open>
 80015ce:	4603      	mov	r3, r0
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b1a      	ldr	r3, [pc, #104]	; (800163c <main+0x114>)
 80015d4:	701a      	strb	r2, [r3, #0]
  f_puts("init basarili\n",&file);
 80015d6:	4920      	ldr	r1, [pc, #128]	; (8001658 <main+0x130>)
 80015d8:	4820      	ldr	r0, [pc, #128]	; (800165c <main+0x134>)
 80015da:	f004 fdd5 	bl	8006188 <f_puts>


  uint16_t sayac = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	83fb      	strh	r3, [r7, #30]

  int myInt = 400 ;
 80015e2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80015e6:	61bb      	str	r3, [r7, #24]
    /* USER CODE END WHILE */


    /* USER CODE BEGIN 3 */
	 // fresult = f_open(&file,"myFirstFile.txt",FA_OPEN_APPEND | FA_WRITE | FA_READ);
	  if(sayac == 0)
 80015e8:	8bfb      	ldrh	r3, [r7, #30]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d106      	bne.n	80015fc <main+0xd4>
	  {
		  f_puts("donguye girdi\n",&file);
 80015ee:	491a      	ldr	r1, [pc, #104]	; (8001658 <main+0x130>)
 80015f0:	481b      	ldr	r0, [pc, #108]	; (8001660 <main+0x138>)
 80015f2:	f004 fdc9 	bl	8006188 <f_puts>
		  f_sync(&file);
 80015f6:	4818      	ldr	r0, [pc, #96]	; (8001658 <main+0x130>)
 80015f8:	f004 fc1c 	bl	8005e34 <f_sync>
		//  fresult=f_close(&file);
	  }
	  	  sayac++;
 80015fc:	8bfb      	ldrh	r3, [r7, #30]
 80015fe:	3301      	adds	r3, #1
 8001600:	83fb      	strh	r3, [r7, #30]

	  	  sprintf( string_buffer, "%d\n", sayac ) ;
 8001602:	8bfa      	ldrh	r2, [r7, #30]
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	4917      	ldr	r1, [pc, #92]	; (8001664 <main+0x13c>)
 8001608:	4618      	mov	r0, r3
 800160a:	f004 ff35 	bl	8006478 <siprintf>

	  //	 fresult = f_open(&file,"myFirstFile.txt",FA_OPEN_APPEND | FA_WRITE | FA_READ);
	  	f_puts(string_buffer,&file);
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	4911      	ldr	r1, [pc, #68]	; (8001658 <main+0x130>)
 8001612:	4618      	mov	r0, r3
 8001614:	f004 fdb8 	bl	8006188 <f_puts>
	  	f_sync(&file);
 8001618:	480f      	ldr	r0, [pc, #60]	; (8001658 <main+0x130>)
 800161a:	f004 fc0b 	bl	8005e34 <f_sync>
	  	// fresult=f_close(&file);

		  	HAL_Delay(1000);
 800161e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001622:	f000 faf1 	bl	8001c08 <HAL_Delay>
		  	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001626:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800162a:	480f      	ldr	r0, [pc, #60]	; (8001668 <main+0x140>)
 800162c:	f000 fdab 	bl	8002186 <HAL_GPIO_TogglePin>
  {
 8001630:	e7da      	b.n	80015e8 <main+0xc0>
 8001632:	bf00      	nop
 8001634:	08006cec 	.word	0x08006cec
 8001638:	200002f0 	.word	0x200002f0
 800163c:	20002768 	.word	0x20002768
 8001640:	20002764 	.word	0x20002764
 8001644:	200002ec 	.word	0x200002ec
 8001648:	3fe00000 	.word	0x3fe00000
 800164c:	200027c4 	.word	0x200027c4
 8001650:	2000235c 	.word	0x2000235c
 8001654:	08006cf0 	.word	0x08006cf0
 8001658:	2000132c 	.word	0x2000132c
 800165c:	08006d00 	.word	0x08006d00
 8001660:	08006d10 	.word	0x08006d10
 8001664:	08006d20 	.word	0x08006d20
 8001668:	40020c00 	.word	0x40020c00

0800166c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b094      	sub	sp, #80	; 0x50
 8001670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001672:	f107 0320 	add.w	r3, r7, #32
 8001676:	2230      	movs	r2, #48	; 0x30
 8001678:	2100      	movs	r1, #0
 800167a:	4618      	mov	r0, r3
 800167c:	f004 fef4 	bl	8006468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001690:	2300      	movs	r3, #0
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	4b28      	ldr	r3, [pc, #160]	; (8001738 <SystemClock_Config+0xcc>)
 8001696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001698:	4a27      	ldr	r2, [pc, #156]	; (8001738 <SystemClock_Config+0xcc>)
 800169a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800169e:	6413      	str	r3, [r2, #64]	; 0x40
 80016a0:	4b25      	ldr	r3, [pc, #148]	; (8001738 <SystemClock_Config+0xcc>)
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016ac:	2300      	movs	r3, #0
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	4b22      	ldr	r3, [pc, #136]	; (800173c <SystemClock_Config+0xd0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a21      	ldr	r2, [pc, #132]	; (800173c <SystemClock_Config+0xd0>)
 80016b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ba:	6013      	str	r3, [r2, #0]
 80016bc:	4b1f      	ldr	r3, [pc, #124]	; (800173c <SystemClock_Config+0xd0>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c4:	607b      	str	r3, [r7, #4]
 80016c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016c8:	2301      	movs	r3, #1
 80016ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d2:	2302      	movs	r3, #2
 80016d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016dc:	2304      	movs	r3, #4
 80016de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016e0:	23a8      	movs	r3, #168	; 0xa8
 80016e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016e4:	2302      	movs	r3, #2
 80016e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016e8:	2304      	movs	r3, #4
 80016ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ec:	f107 0320 	add.w	r3, r7, #32
 80016f0:	4618      	mov	r0, r3
 80016f2:	f000 fd63 	bl	80021bc <HAL_RCC_OscConfig>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016fc:	f000 f8cc 	bl	8001898 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001700:	230f      	movs	r3, #15
 8001702:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001704:	2302      	movs	r3, #2
 8001706:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800170c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001710:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001716:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001718:	f107 030c 	add.w	r3, r7, #12
 800171c:	2105      	movs	r1, #5
 800171e:	4618      	mov	r0, r3
 8001720:	f000 ffc4 	bl	80026ac <HAL_RCC_ClockConfig>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800172a:	f000 f8b5 	bl	8001898 <Error_Handler>
  }
}
 800172e:	bf00      	nop
 8001730:	3750      	adds	r7, #80	; 0x50
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800
 800173c:	40007000 	.word	0x40007000

08001740 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001744:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <MX_SPI1_Init+0x64>)
 8001746:	4a18      	ldr	r2, [pc, #96]	; (80017a8 <MX_SPI1_Init+0x68>)
 8001748:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800174a:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <MX_SPI1_Init+0x64>)
 800174c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001750:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001752:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <MX_SPI1_Init+0x64>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <MX_SPI1_Init+0x64>)
 800175a:	2200      	movs	r2, #0
 800175c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800175e:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <MX_SPI1_Init+0x64>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001764:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <MX_SPI1_Init+0x64>)
 8001766:	2200      	movs	r2, #0
 8001768:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800176a:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <MX_SPI1_Init+0x64>)
 800176c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001770:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001772:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <MX_SPI1_Init+0x64>)
 8001774:	2228      	movs	r2, #40	; 0x28
 8001776:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <MX_SPI1_Init+0x64>)
 800177a:	2200      	movs	r2, #0
 800177c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <MX_SPI1_Init+0x64>)
 8001780:	2200      	movs	r2, #0
 8001782:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001784:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <MX_SPI1_Init+0x64>)
 8001786:	2200      	movs	r2, #0
 8001788:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <MX_SPI1_Init+0x64>)
 800178c:	220a      	movs	r2, #10
 800178e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001790:	4804      	ldr	r0, [pc, #16]	; (80017a4 <MX_SPI1_Init+0x64>)
 8001792:	f001 f953 	bl	8002a3c <HAL_SPI_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800179c:	f000 f87c 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	2000276c 	.word	0x2000276c
 80017a8:	40013000 	.word	0x40013000

080017ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	; 0x28
 80017b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
 80017c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	4b31      	ldr	r3, [pc, #196]	; (800188c <MX_GPIO_Init+0xe0>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a30      	ldr	r2, [pc, #192]	; (800188c <MX_GPIO_Init+0xe0>)
 80017cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b2e      	ldr	r3, [pc, #184]	; (800188c <MX_GPIO_Init+0xe0>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	4b2a      	ldr	r3, [pc, #168]	; (800188c <MX_GPIO_Init+0xe0>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a29      	ldr	r2, [pc, #164]	; (800188c <MX_GPIO_Init+0xe0>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b27      	ldr	r3, [pc, #156]	; (800188c <MX_GPIO_Init+0xe0>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	4b23      	ldr	r3, [pc, #140]	; (800188c <MX_GPIO_Init+0xe0>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a22      	ldr	r2, [pc, #136]	; (800188c <MX_GPIO_Init+0xe0>)
 8001804:	f043 0304 	orr.w	r3, r3, #4
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b20      	ldr	r3, [pc, #128]	; (800188c <MX_GPIO_Init+0xe0>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0304 	and.w	r3, r3, #4
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	4b1c      	ldr	r3, [pc, #112]	; (800188c <MX_GPIO_Init+0xe0>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a1b      	ldr	r2, [pc, #108]	; (800188c <MX_GPIO_Init+0xe0>)
 8001820:	f043 0308 	orr.w	r3, r3, #8
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b19      	ldr	r3, [pc, #100]	; (800188c <MX_GPIO_Init+0xe0>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001832:	2200      	movs	r2, #0
 8001834:	2110      	movs	r1, #16
 8001836:	4816      	ldr	r0, [pc, #88]	; (8001890 <MX_GPIO_Init+0xe4>)
 8001838:	f000 fc8c 	bl	8002154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800183c:	2200      	movs	r2, #0
 800183e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001842:	4814      	ldr	r0, [pc, #80]	; (8001894 <MX_GPIO_Init+0xe8>)
 8001844:	f000 fc86 	bl	8002154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001848:	2310      	movs	r3, #16
 800184a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184c:	2301      	movs	r3, #1
 800184e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	4619      	mov	r1, r3
 800185e:	480c      	ldr	r0, [pc, #48]	; (8001890 <MX_GPIO_Init+0xe4>)
 8001860:	f000 fadc 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186a:	2301      	movs	r3, #1
 800186c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001872:	2300      	movs	r3, #0
 8001874:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	4619      	mov	r1, r3
 800187c:	4805      	ldr	r0, [pc, #20]	; (8001894 <MX_GPIO_Init+0xe8>)
 800187e:	f000 facd 	bl	8001e1c <HAL_GPIO_Init>

}
 8001882:	bf00      	nop
 8001884:	3728      	adds	r7, #40	; 0x28
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40023800 	.word	0x40023800
 8001890:	40020800 	.word	0x40020800
 8001894:	40020c00 	.word	0x40020c00

08001898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800189c:	b672      	cpsid	i
}
 800189e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <Error_Handler+0x8>
	...

080018a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <HAL_MspInit+0x4c>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	4a0f      	ldr	r2, [pc, #60]	; (80018f0 <HAL_MspInit+0x4c>)
 80018b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ba:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <HAL_MspInit+0x4c>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	603b      	str	r3, [r7, #0]
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <HAL_MspInit+0x4c>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	4a08      	ldr	r2, [pc, #32]	; (80018f0 <HAL_MspInit+0x4c>)
 80018d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d4:	6413      	str	r3, [r2, #64]	; 0x40
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_MspInit+0x4c>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018de:	603b      	str	r3, [r7, #0]
 80018e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	40023800 	.word	0x40023800

080018f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08a      	sub	sp, #40	; 0x28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a19      	ldr	r2, [pc, #100]	; (8001978 <HAL_SPI_MspInit+0x84>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d12b      	bne.n	800196e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	4b18      	ldr	r3, [pc, #96]	; (800197c <HAL_SPI_MspInit+0x88>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191e:	4a17      	ldr	r2, [pc, #92]	; (800197c <HAL_SPI_MspInit+0x88>)
 8001920:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001924:	6453      	str	r3, [r2, #68]	; 0x44
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <HAL_SPI_MspInit+0x88>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	4b11      	ldr	r3, [pc, #68]	; (800197c <HAL_SPI_MspInit+0x88>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a10      	ldr	r2, [pc, #64]	; (800197c <HAL_SPI_MspInit+0x88>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b0e      	ldr	r3, [pc, #56]	; (800197c <HAL_SPI_MspInit+0x88>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800194e:	23e0      	movs	r3, #224	; 0xe0
 8001950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001952:	2302      	movs	r3, #2
 8001954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195a:	2303      	movs	r3, #3
 800195c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800195e:	2305      	movs	r3, #5
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001962:	f107 0314 	add.w	r3, r7, #20
 8001966:	4619      	mov	r1, r3
 8001968:	4805      	ldr	r0, [pc, #20]	; (8001980 <HAL_SPI_MspInit+0x8c>)
 800196a:	f000 fa57 	bl	8001e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800196e:	bf00      	nop
 8001970:	3728      	adds	r7, #40	; 0x28
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40013000 	.word	0x40013000
 800197c:	40023800 	.word	0x40023800
 8001980:	40020000 	.word	0x40020000

08001984 <SDTimer_Handler>:

volatile FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8001988:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <SDTimer_Handler+0x40>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d006      	beq.n	80019a0 <SDTimer_Handler+0x1c>
		Timer1--;
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <SDTimer_Handler+0x40>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	3b01      	subs	r3, #1
 800199a:	b2da      	uxtb	r2, r3
 800199c:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <SDTimer_Handler+0x40>)
 800199e:	701a      	strb	r2, [r3, #0]
	if(Timer2 > 0)
 80019a0:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <SDTimer_Handler+0x44>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d006      	beq.n	80019b8 <SDTimer_Handler+0x34>
		Timer2--;
 80019aa:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <SDTimer_Handler+0x44>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	3b01      	subs	r3, #1
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <SDTimer_Handler+0x44>)
 80019b6:	701a      	strb	r2, [r3, #0]
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	200027c9 	.word	0x200027c9
 80019c8:	200027c8 	.word	0x200027c8

080019cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <NMI_Handler+0x4>

080019d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d6:	e7fe      	b.n	80019d6 <HardFault_Handler+0x4>

080019d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <MemManage_Handler+0x4>

080019de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e2:	e7fe      	b.n	80019e2 <BusFault_Handler+0x4>

080019e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <UsageFault_Handler+0x4>

080019ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
FatFsCnt++ ;
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <SysTick_Handler+0x28>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	4a07      	ldr	r2, [pc, #28]	; (8001a3c <SysTick_Handler+0x28>)
 8001a20:	6013      	str	r3, [r2, #0]
if(FatFsCnt >= 10)
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <SysTick_Handler+0x28>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b09      	cmp	r3, #9
 8001a28:	dd04      	ble.n	8001a34 <SysTick_Handler+0x20>
{
	 	FatFsCnt = 0;
 8001a2a:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <SysTick_Handler+0x28>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
	 	SDTimer_Handler();
 8001a30:	f7ff ffa8 	bl	8001984 <SDTimer_Handler>
}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a34:	f000 f8c8 	bl	8001bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	200000a8 	.word	0x200000a8

08001a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a48:	4a14      	ldr	r2, [pc, #80]	; (8001a9c <_sbrk+0x5c>)
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <_sbrk+0x60>)
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a54:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <_sbrk+0x64>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d102      	bne.n	8001a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <_sbrk+0x64>)
 8001a5e:	4a12      	ldr	r2, [pc, #72]	; (8001aa8 <_sbrk+0x68>)
 8001a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a62:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <_sbrk+0x64>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d207      	bcs.n	8001a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a70:	f004 fcd0 	bl	8006414 <__errno>
 8001a74:	4603      	mov	r3, r0
 8001a76:	220c      	movs	r2, #12
 8001a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7e:	e009      	b.n	8001a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <_sbrk+0x64>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a86:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <_sbrk+0x64>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <_sbrk+0x64>)
 8001a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a92:	68fb      	ldr	r3, [r7, #12]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20020000 	.word	0x20020000
 8001aa0:	00000400 	.word	0x00000400
 8001aa4:	200000ac 	.word	0x200000ac
 8001aa8:	20004850 	.word	0x20004850

08001aac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <SystemInit+0x20>)
 8001ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ab6:	4a05      	ldr	r2, [pc, #20]	; (8001acc <SystemInit+0x20>)
 8001ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ad4:	480d      	ldr	r0, [pc, #52]	; (8001b0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ad6:	490e      	ldr	r1, [pc, #56]	; (8001b10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ad8:	4a0e      	ldr	r2, [pc, #56]	; (8001b14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001adc:	e002      	b.n	8001ae4 <LoopCopyDataInit>

08001ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ae2:	3304      	adds	r3, #4

08001ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae8:	d3f9      	bcc.n	8001ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aea:	4a0b      	ldr	r2, [pc, #44]	; (8001b18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001aec:	4c0b      	ldr	r4, [pc, #44]	; (8001b1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af0:	e001      	b.n	8001af6 <LoopFillZerobss>

08001af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af4:	3204      	adds	r2, #4

08001af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af8:	d3fb      	bcc.n	8001af2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001afa:	f7ff ffd7 	bl	8001aac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001afe:	f004 fc8f 	bl	8006420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b02:	f7ff fd11 	bl	8001528 <main>
  bx  lr    
 8001b06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b10:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001b14:	08007200 	.word	0x08007200
  ldr r2, =_sbss
 8001b18:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001b1c:	20004850 	.word	0x20004850

08001b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b20:	e7fe      	b.n	8001b20 <ADC_IRQHandler>
	...

08001b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b28:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <HAL_Init+0x40>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0d      	ldr	r2, [pc, #52]	; (8001b64 <HAL_Init+0x40>)
 8001b2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <HAL_Init+0x40>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <HAL_Init+0x40>)
 8001b3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b40:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <HAL_Init+0x40>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a07      	ldr	r2, [pc, #28]	; (8001b64 <HAL_Init+0x40>)
 8001b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b4c:	2003      	movs	r0, #3
 8001b4e:	f000 f931 	bl	8001db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b52:	200f      	movs	r0, #15
 8001b54:	f000 f808 	bl	8001b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b58:	f7ff fea4 	bl	80018a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40023c00 	.word	0x40023c00

08001b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b70:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <HAL_InitTick+0x54>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <HAL_InitTick+0x58>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 f93b 	bl	8001e02 <HAL_SYSTICK_Config>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e00e      	b.n	8001bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b0f      	cmp	r3, #15
 8001b9a:	d80a      	bhi.n	8001bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba4:	f000 f911 	bl	8001dca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ba8:	4a06      	ldr	r2, [pc, #24]	; (8001bc4 <HAL_InitTick+0x5c>)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	e000      	b.n	8001bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000004 	.word	0x20000004
 8001bc0:	2000000c 	.word	0x2000000c
 8001bc4:	20000008 	.word	0x20000008

08001bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bcc:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <HAL_IncTick+0x20>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_IncTick+0x24>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	4a04      	ldr	r2, [pc, #16]	; (8001bec <HAL_IncTick+0x24>)
 8001bda:	6013      	str	r3, [r2, #0]
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	2000000c 	.word	0x2000000c
 8001bec:	200027cc 	.word	0x200027cc

08001bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf4:	4b03      	ldr	r3, [pc, #12]	; (8001c04 <HAL_GetTick+0x14>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	200027cc 	.word	0x200027cc

08001c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c10:	f7ff ffee 	bl	8001bf0 <HAL_GetTick>
 8001c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c20:	d005      	beq.n	8001c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c22:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <HAL_Delay+0x44>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	461a      	mov	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c2e:	bf00      	nop
 8001c30:	f7ff ffde 	bl	8001bf0 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d8f7      	bhi.n	8001c30 <HAL_Delay+0x28>
  {
  }
}
 8001c40:	bf00      	nop
 8001c42:	bf00      	nop
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	2000000c 	.word	0x2000000c

08001c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c82:	4a04      	ldr	r2, [pc, #16]	; (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	60d3      	str	r3, [r2, #12]
}
 8001c88:	bf00      	nop
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c9c:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	f003 0307 	and.w	r3, r3, #7
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	6039      	str	r1, [r7, #0]
 8001cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	db0a      	blt.n	8001cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	490c      	ldr	r1, [pc, #48]	; (8001d00 <__NVIC_SetPriority+0x4c>)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	0112      	lsls	r2, r2, #4
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	440b      	add	r3, r1
 8001cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cdc:	e00a      	b.n	8001cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	4908      	ldr	r1, [pc, #32]	; (8001d04 <__NVIC_SetPriority+0x50>)
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	3b04      	subs	r3, #4
 8001cec:	0112      	lsls	r2, r2, #4
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	761a      	strb	r2, [r3, #24]
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000e100 	.word	0xe000e100
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b089      	sub	sp, #36	; 0x24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f1c3 0307 	rsb	r3, r3, #7
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	bf28      	it	cs
 8001d26:	2304      	movcs	r3, #4
 8001d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	2b06      	cmp	r3, #6
 8001d30:	d902      	bls.n	8001d38 <NVIC_EncodePriority+0x30>
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3b03      	subs	r3, #3
 8001d36:	e000      	b.n	8001d3a <NVIC_EncodePriority+0x32>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43da      	mvns	r2, r3
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d50:	f04f 31ff 	mov.w	r1, #4294967295
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5a:	43d9      	mvns	r1, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d60:	4313      	orrs	r3, r2
         );
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3724      	adds	r7, #36	; 0x24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
	...

08001d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d80:	d301      	bcc.n	8001d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d82:	2301      	movs	r3, #1
 8001d84:	e00f      	b.n	8001da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d86:	4a0a      	ldr	r2, [pc, #40]	; (8001db0 <SysTick_Config+0x40>)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d8e:	210f      	movs	r1, #15
 8001d90:	f04f 30ff 	mov.w	r0, #4294967295
 8001d94:	f7ff ff8e 	bl	8001cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d98:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <SysTick_Config+0x40>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d9e:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <SysTick_Config+0x40>)
 8001da0:	2207      	movs	r2, #7
 8001da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	e000e010 	.word	0xe000e010

08001db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff ff47 	bl	8001c50 <__NVIC_SetPriorityGrouping>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b086      	sub	sp, #24
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	607a      	str	r2, [r7, #4]
 8001dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ddc:	f7ff ff5c 	bl	8001c98 <__NVIC_GetPriorityGrouping>
 8001de0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	68b9      	ldr	r1, [r7, #8]
 8001de6:	6978      	ldr	r0, [r7, #20]
 8001de8:	f7ff ff8e 	bl	8001d08 <NVIC_EncodePriority>
 8001dec:	4602      	mov	r2, r0
 8001dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df2:	4611      	mov	r1, r2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff5d 	bl	8001cb4 <__NVIC_SetPriority>
}
 8001dfa:	bf00      	nop
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff ffb0 	bl	8001d70 <SysTick_Config>
 8001e10:	4603      	mov	r3, r0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b089      	sub	sp, #36	; 0x24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
 8001e36:	e16b      	b.n	8002110 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e38:	2201      	movs	r2, #1
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	f040 815a 	bne.w	800210a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d005      	beq.n	8001e6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d130      	bne.n	8001ed0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	2203      	movs	r2, #3
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4013      	ands	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	091b      	lsrs	r3, r3, #4
 8001eba:	f003 0201 	and.w	r2, r3, #1
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	d017      	beq.n	8001f0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	2203      	movs	r2, #3
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 0303 	and.w	r3, r3, #3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d123      	bne.n	8001f60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	08da      	lsrs	r2, r3, #3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3208      	adds	r2, #8
 8001f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	220f      	movs	r2, #15
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	691a      	ldr	r2, [r3, #16]
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	08da      	lsrs	r2, r3, #3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3208      	adds	r2, #8
 8001f5a:	69b9      	ldr	r1, [r7, #24]
 8001f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 0203 	and.w	r2, r3, #3
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 80b4 	beq.w	800210a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	4b60      	ldr	r3, [pc, #384]	; (8002128 <HAL_GPIO_Init+0x30c>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	4a5f      	ldr	r2, [pc, #380]	; (8002128 <HAL_GPIO_Init+0x30c>)
 8001fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb2:	4b5d      	ldr	r3, [pc, #372]	; (8002128 <HAL_GPIO_Init+0x30c>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fbe:	4a5b      	ldr	r2, [pc, #364]	; (800212c <HAL_GPIO_Init+0x310>)
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	089b      	lsrs	r3, r3, #2
 8001fc4:	3302      	adds	r3, #2
 8001fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	220f      	movs	r2, #15
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a52      	ldr	r2, [pc, #328]	; (8002130 <HAL_GPIO_Init+0x314>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d02b      	beq.n	8002042 <HAL_GPIO_Init+0x226>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a51      	ldr	r2, [pc, #324]	; (8002134 <HAL_GPIO_Init+0x318>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d025      	beq.n	800203e <HAL_GPIO_Init+0x222>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a50      	ldr	r2, [pc, #320]	; (8002138 <HAL_GPIO_Init+0x31c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d01f      	beq.n	800203a <HAL_GPIO_Init+0x21e>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a4f      	ldr	r2, [pc, #316]	; (800213c <HAL_GPIO_Init+0x320>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d019      	beq.n	8002036 <HAL_GPIO_Init+0x21a>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a4e      	ldr	r2, [pc, #312]	; (8002140 <HAL_GPIO_Init+0x324>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d013      	beq.n	8002032 <HAL_GPIO_Init+0x216>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a4d      	ldr	r2, [pc, #308]	; (8002144 <HAL_GPIO_Init+0x328>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d00d      	beq.n	800202e <HAL_GPIO_Init+0x212>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a4c      	ldr	r2, [pc, #304]	; (8002148 <HAL_GPIO_Init+0x32c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d007      	beq.n	800202a <HAL_GPIO_Init+0x20e>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a4b      	ldr	r2, [pc, #300]	; (800214c <HAL_GPIO_Init+0x330>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d101      	bne.n	8002026 <HAL_GPIO_Init+0x20a>
 8002022:	2307      	movs	r3, #7
 8002024:	e00e      	b.n	8002044 <HAL_GPIO_Init+0x228>
 8002026:	2308      	movs	r3, #8
 8002028:	e00c      	b.n	8002044 <HAL_GPIO_Init+0x228>
 800202a:	2306      	movs	r3, #6
 800202c:	e00a      	b.n	8002044 <HAL_GPIO_Init+0x228>
 800202e:	2305      	movs	r3, #5
 8002030:	e008      	b.n	8002044 <HAL_GPIO_Init+0x228>
 8002032:	2304      	movs	r3, #4
 8002034:	e006      	b.n	8002044 <HAL_GPIO_Init+0x228>
 8002036:	2303      	movs	r3, #3
 8002038:	e004      	b.n	8002044 <HAL_GPIO_Init+0x228>
 800203a:	2302      	movs	r3, #2
 800203c:	e002      	b.n	8002044 <HAL_GPIO_Init+0x228>
 800203e:	2301      	movs	r3, #1
 8002040:	e000      	b.n	8002044 <HAL_GPIO_Init+0x228>
 8002042:	2300      	movs	r3, #0
 8002044:	69fa      	ldr	r2, [r7, #28]
 8002046:	f002 0203 	and.w	r2, r2, #3
 800204a:	0092      	lsls	r2, r2, #2
 800204c:	4093      	lsls	r3, r2
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4313      	orrs	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002054:	4935      	ldr	r1, [pc, #212]	; (800212c <HAL_GPIO_Init+0x310>)
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	089b      	lsrs	r3, r3, #2
 800205a:	3302      	adds	r3, #2
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002062:	4b3b      	ldr	r3, [pc, #236]	; (8002150 <HAL_GPIO_Init+0x334>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	43db      	mvns	r3, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4013      	ands	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002086:	4a32      	ldr	r2, [pc, #200]	; (8002150 <HAL_GPIO_Init+0x334>)
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800208c:	4b30      	ldr	r3, [pc, #192]	; (8002150 <HAL_GPIO_Init+0x334>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	43db      	mvns	r3, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4013      	ands	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020b0:	4a27      	ldr	r2, [pc, #156]	; (8002150 <HAL_GPIO_Init+0x334>)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020b6:	4b26      	ldr	r3, [pc, #152]	; (8002150 <HAL_GPIO_Init+0x334>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	43db      	mvns	r3, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4013      	ands	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020da:	4a1d      	ldr	r2, [pc, #116]	; (8002150 <HAL_GPIO_Init+0x334>)
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020e0:	4b1b      	ldr	r3, [pc, #108]	; (8002150 <HAL_GPIO_Init+0x334>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002104:	4a12      	ldr	r2, [pc, #72]	; (8002150 <HAL_GPIO_Init+0x334>)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3301      	adds	r3, #1
 800210e:	61fb      	str	r3, [r7, #28]
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	2b0f      	cmp	r3, #15
 8002114:	f67f ae90 	bls.w	8001e38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002118:	bf00      	nop
 800211a:	bf00      	nop
 800211c:	3724      	adds	r7, #36	; 0x24
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40023800 	.word	0x40023800
 800212c:	40013800 	.word	0x40013800
 8002130:	40020000 	.word	0x40020000
 8002134:	40020400 	.word	0x40020400
 8002138:	40020800 	.word	0x40020800
 800213c:	40020c00 	.word	0x40020c00
 8002140:	40021000 	.word	0x40021000
 8002144:	40021400 	.word	0x40021400
 8002148:	40021800 	.word	0x40021800
 800214c:	40021c00 	.word	0x40021c00
 8002150:	40013c00 	.word	0x40013c00

08002154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	807b      	strh	r3, [r7, #2]
 8002160:	4613      	mov	r3, r2
 8002162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002164:	787b      	ldrb	r3, [r7, #1]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800216a:	887a      	ldrh	r2, [r7, #2]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002170:	e003      	b.n	800217a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002172:	887b      	ldrh	r3, [r7, #2]
 8002174:	041a      	lsls	r2, r3, #16
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	619a      	str	r2, [r3, #24]
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002186:	b480      	push	{r7}
 8002188:	b085      	sub	sp, #20
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	460b      	mov	r3, r1
 8002190:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002198:	887a      	ldrh	r2, [r7, #2]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	4013      	ands	r3, r2
 800219e:	041a      	lsls	r2, r3, #16
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	43d9      	mvns	r1, r3
 80021a4:	887b      	ldrh	r3, [r7, #2]
 80021a6:	400b      	ands	r3, r1
 80021a8:	431a      	orrs	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	619a      	str	r2, [r3, #24]
}
 80021ae:	bf00      	nop
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
	...

080021bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e264      	b.n	8002698 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d075      	beq.n	80022c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021da:	4ba3      	ldr	r3, [pc, #652]	; (8002468 <HAL_RCC_OscConfig+0x2ac>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d00c      	beq.n	8002200 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021e6:	4ba0      	ldr	r3, [pc, #640]	; (8002468 <HAL_RCC_OscConfig+0x2ac>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d112      	bne.n	8002218 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021f2:	4b9d      	ldr	r3, [pc, #628]	; (8002468 <HAL_RCC_OscConfig+0x2ac>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021fe:	d10b      	bne.n	8002218 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002200:	4b99      	ldr	r3, [pc, #612]	; (8002468 <HAL_RCC_OscConfig+0x2ac>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d05b      	beq.n	80022c4 <HAL_RCC_OscConfig+0x108>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d157      	bne.n	80022c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e23f      	b.n	8002698 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002220:	d106      	bne.n	8002230 <HAL_RCC_OscConfig+0x74>
 8002222:	4b91      	ldr	r3, [pc, #580]	; (8002468 <HAL_RCC_OscConfig+0x2ac>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a90      	ldr	r2, [pc, #576]	; (8002468 <HAL_RCC_OscConfig+0x2ac>)
 8002228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	e01d      	b.n	800226c <HAL_RCC_OscConfig+0xb0>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002238:	d10c      	bne.n	8002254 <HAL_RCC_OscConfig+0x98>
 800223a:	4b8b      	ldr	r3, [pc, #556]	; (8002468 <HAL_RCC_OscConfig+0x2ac>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a8a      	ldr	r2, [pc, #552]	; (8002468 <HAL_RCC_OscConfig+0x2ac>)
 8002240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	4b88      	ldr	r3, [pc, #544]	; (8002468 <HAL_RCC_OscConfig+0x2ac>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a87      	ldr	r2, [pc, #540]	; (8002468 <HAL_RCC_OscConfig+0x2ac>)
 800224c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	e00b      	b.n	800226c <HAL_RCC_OscConfig+0xb0>
 8002254:	4b84      	ldr	r3, [pc, #528]	; (8002468 <HAL_RCC_OscConfig+0x2ac>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a83      	ldr	r2, [pc, #524]	; (8002468 <HAL_RCC_OscConfig+0x2ac>)
 800225a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	4b81      	ldr	r3, [pc, #516]	; (8002468 <HAL_RCC_OscConfig+0x2ac>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a80      	ldr	r2, [pc, #512]	; (8002468 <HAL_RCC_OscConfig+0x2ac>)
 8002266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800226a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d013      	beq.n	800229c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002274:	f7ff fcbc 	bl	8001bf0 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800227c:	f7ff fcb8 	bl	8001bf0 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b64      	cmp	r3, #100	; 0x64
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e204      	b.n	8002698 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228e:	4b76      	ldr	r3, [pc, #472]	; (8002468 <HAL_RCC_OscConfig+0x2ac>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f0      	beq.n	800227c <HAL_RCC_OscConfig+0xc0>
 800229a:	e014      	b.n	80022c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229c:	f7ff fca8 	bl	8001bf0 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022a4:	f7ff fca4 	bl	8001bf0 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b64      	cmp	r3, #100	; 0x64
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e1f0      	b.n	8002698 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b6:	4b6c      	ldr	r3, [pc, #432]	; (8002468 <HAL_RCC_OscConfig+0x2ac>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0xe8>
 80022c2:	e000      	b.n	80022c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d063      	beq.n	800239a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022d2:	4b65      	ldr	r3, [pc, #404]	; (8002468 <HAL_RCC_OscConfig+0x2ac>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 030c 	and.w	r3, r3, #12
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00b      	beq.n	80022f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022de:	4b62      	ldr	r3, [pc, #392]	; (8002468 <HAL_RCC_OscConfig+0x2ac>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022e6:	2b08      	cmp	r3, #8
 80022e8:	d11c      	bne.n	8002324 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ea:	4b5f      	ldr	r3, [pc, #380]	; (8002468 <HAL_RCC_OscConfig+0x2ac>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d116      	bne.n	8002324 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022f6:	4b5c      	ldr	r3, [pc, #368]	; (8002468 <HAL_RCC_OscConfig+0x2ac>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d005      	beq.n	800230e <HAL_RCC_OscConfig+0x152>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d001      	beq.n	800230e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e1c4      	b.n	8002698 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800230e:	4b56      	ldr	r3, [pc, #344]	; (8002468 <HAL_RCC_OscConfig+0x2ac>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	4952      	ldr	r1, [pc, #328]	; (8002468 <HAL_RCC_OscConfig+0x2ac>)
 800231e:	4313      	orrs	r3, r2
 8002320:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002322:	e03a      	b.n	800239a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d020      	beq.n	800236e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800232c:	4b4f      	ldr	r3, [pc, #316]	; (800246c <HAL_RCC_OscConfig+0x2b0>)
 800232e:	2201      	movs	r2, #1
 8002330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002332:	f7ff fc5d 	bl	8001bf0 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800233a:	f7ff fc59 	bl	8001bf0 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e1a5      	b.n	8002698 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234c:	4b46      	ldr	r3, [pc, #280]	; (8002468 <HAL_RCC_OscConfig+0x2ac>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0f0      	beq.n	800233a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002358:	4b43      	ldr	r3, [pc, #268]	; (8002468 <HAL_RCC_OscConfig+0x2ac>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4940      	ldr	r1, [pc, #256]	; (8002468 <HAL_RCC_OscConfig+0x2ac>)
 8002368:	4313      	orrs	r3, r2
 800236a:	600b      	str	r3, [r1, #0]
 800236c:	e015      	b.n	800239a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800236e:	4b3f      	ldr	r3, [pc, #252]	; (800246c <HAL_RCC_OscConfig+0x2b0>)
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002374:	f7ff fc3c 	bl	8001bf0 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800237c:	f7ff fc38 	bl	8001bf0 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e184      	b.n	8002698 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800238e:	4b36      	ldr	r3, [pc, #216]	; (8002468 <HAL_RCC_OscConfig+0x2ac>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f0      	bne.n	800237c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0308 	and.w	r3, r3, #8
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d030      	beq.n	8002408 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d016      	beq.n	80023dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ae:	4b30      	ldr	r3, [pc, #192]	; (8002470 <HAL_RCC_OscConfig+0x2b4>)
 80023b0:	2201      	movs	r2, #1
 80023b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b4:	f7ff fc1c 	bl	8001bf0 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023bc:	f7ff fc18 	bl	8001bf0 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e164      	b.n	8002698 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ce:	4b26      	ldr	r3, [pc, #152]	; (8002468 <HAL_RCC_OscConfig+0x2ac>)
 80023d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0x200>
 80023da:	e015      	b.n	8002408 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023dc:	4b24      	ldr	r3, [pc, #144]	; (8002470 <HAL_RCC_OscConfig+0x2b4>)
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e2:	f7ff fc05 	bl	8001bf0 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ea:	f7ff fc01 	bl	8001bf0 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e14d      	b.n	8002698 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023fc:	4b1a      	ldr	r3, [pc, #104]	; (8002468 <HAL_RCC_OscConfig+0x2ac>)
 80023fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1f0      	bne.n	80023ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 80a0 	beq.w	8002556 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002416:	2300      	movs	r3, #0
 8002418:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800241a:	4b13      	ldr	r3, [pc, #76]	; (8002468 <HAL_RCC_OscConfig+0x2ac>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10f      	bne.n	8002446 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	60bb      	str	r3, [r7, #8]
 800242a:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <HAL_RCC_OscConfig+0x2ac>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	4a0e      	ldr	r2, [pc, #56]	; (8002468 <HAL_RCC_OscConfig+0x2ac>)
 8002430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002434:	6413      	str	r3, [r2, #64]	; 0x40
 8002436:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <HAL_RCC_OscConfig+0x2ac>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243e:	60bb      	str	r3, [r7, #8]
 8002440:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002442:	2301      	movs	r3, #1
 8002444:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002446:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <HAL_RCC_OscConfig+0x2b8>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244e:	2b00      	cmp	r3, #0
 8002450:	d121      	bne.n	8002496 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002452:	4b08      	ldr	r3, [pc, #32]	; (8002474 <HAL_RCC_OscConfig+0x2b8>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a07      	ldr	r2, [pc, #28]	; (8002474 <HAL_RCC_OscConfig+0x2b8>)
 8002458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800245c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800245e:	f7ff fbc7 	bl	8001bf0 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002464:	e011      	b.n	800248a <HAL_RCC_OscConfig+0x2ce>
 8002466:	bf00      	nop
 8002468:	40023800 	.word	0x40023800
 800246c:	42470000 	.word	0x42470000
 8002470:	42470e80 	.word	0x42470e80
 8002474:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002478:	f7ff fbba 	bl	8001bf0 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e106      	b.n	8002698 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800248a:	4b85      	ldr	r3, [pc, #532]	; (80026a0 <HAL_RCC_OscConfig+0x4e4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0f0      	beq.n	8002478 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d106      	bne.n	80024ac <HAL_RCC_OscConfig+0x2f0>
 800249e:	4b81      	ldr	r3, [pc, #516]	; (80026a4 <HAL_RCC_OscConfig+0x4e8>)
 80024a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a2:	4a80      	ldr	r2, [pc, #512]	; (80026a4 <HAL_RCC_OscConfig+0x4e8>)
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	6713      	str	r3, [r2, #112]	; 0x70
 80024aa:	e01c      	b.n	80024e6 <HAL_RCC_OscConfig+0x32a>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2b05      	cmp	r3, #5
 80024b2:	d10c      	bne.n	80024ce <HAL_RCC_OscConfig+0x312>
 80024b4:	4b7b      	ldr	r3, [pc, #492]	; (80026a4 <HAL_RCC_OscConfig+0x4e8>)
 80024b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b8:	4a7a      	ldr	r2, [pc, #488]	; (80026a4 <HAL_RCC_OscConfig+0x4e8>)
 80024ba:	f043 0304 	orr.w	r3, r3, #4
 80024be:	6713      	str	r3, [r2, #112]	; 0x70
 80024c0:	4b78      	ldr	r3, [pc, #480]	; (80026a4 <HAL_RCC_OscConfig+0x4e8>)
 80024c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c4:	4a77      	ldr	r2, [pc, #476]	; (80026a4 <HAL_RCC_OscConfig+0x4e8>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	6713      	str	r3, [r2, #112]	; 0x70
 80024cc:	e00b      	b.n	80024e6 <HAL_RCC_OscConfig+0x32a>
 80024ce:	4b75      	ldr	r3, [pc, #468]	; (80026a4 <HAL_RCC_OscConfig+0x4e8>)
 80024d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d2:	4a74      	ldr	r2, [pc, #464]	; (80026a4 <HAL_RCC_OscConfig+0x4e8>)
 80024d4:	f023 0301 	bic.w	r3, r3, #1
 80024d8:	6713      	str	r3, [r2, #112]	; 0x70
 80024da:	4b72      	ldr	r3, [pc, #456]	; (80026a4 <HAL_RCC_OscConfig+0x4e8>)
 80024dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024de:	4a71      	ldr	r2, [pc, #452]	; (80026a4 <HAL_RCC_OscConfig+0x4e8>)
 80024e0:	f023 0304 	bic.w	r3, r3, #4
 80024e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d015      	beq.n	800251a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ee:	f7ff fb7f 	bl	8001bf0 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f4:	e00a      	b.n	800250c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024f6:	f7ff fb7b 	bl	8001bf0 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	f241 3288 	movw	r2, #5000	; 0x1388
 8002504:	4293      	cmp	r3, r2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e0c5      	b.n	8002698 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800250c:	4b65      	ldr	r3, [pc, #404]	; (80026a4 <HAL_RCC_OscConfig+0x4e8>)
 800250e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0ee      	beq.n	80024f6 <HAL_RCC_OscConfig+0x33a>
 8002518:	e014      	b.n	8002544 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251a:	f7ff fb69 	bl	8001bf0 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002520:	e00a      	b.n	8002538 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002522:	f7ff fb65 	bl	8001bf0 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002530:	4293      	cmp	r3, r2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e0af      	b.n	8002698 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002538:	4b5a      	ldr	r3, [pc, #360]	; (80026a4 <HAL_RCC_OscConfig+0x4e8>)
 800253a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1ee      	bne.n	8002522 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002544:	7dfb      	ldrb	r3, [r7, #23]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d105      	bne.n	8002556 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800254a:	4b56      	ldr	r3, [pc, #344]	; (80026a4 <HAL_RCC_OscConfig+0x4e8>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	4a55      	ldr	r2, [pc, #340]	; (80026a4 <HAL_RCC_OscConfig+0x4e8>)
 8002550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002554:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 809b 	beq.w	8002696 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002560:	4b50      	ldr	r3, [pc, #320]	; (80026a4 <HAL_RCC_OscConfig+0x4e8>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 030c 	and.w	r3, r3, #12
 8002568:	2b08      	cmp	r3, #8
 800256a:	d05c      	beq.n	8002626 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	2b02      	cmp	r3, #2
 8002572:	d141      	bne.n	80025f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002574:	4b4c      	ldr	r3, [pc, #304]	; (80026a8 <HAL_RCC_OscConfig+0x4ec>)
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257a:	f7ff fb39 	bl	8001bf0 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002582:	f7ff fb35 	bl	8001bf0 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e081      	b.n	8002698 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002594:	4b43      	ldr	r3, [pc, #268]	; (80026a4 <HAL_RCC_OscConfig+0x4e8>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1f0      	bne.n	8002582 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	69da      	ldr	r2, [r3, #28]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	431a      	orrs	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	019b      	lsls	r3, r3, #6
 80025b0:	431a      	orrs	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b6:	085b      	lsrs	r3, r3, #1
 80025b8:	3b01      	subs	r3, #1
 80025ba:	041b      	lsls	r3, r3, #16
 80025bc:	431a      	orrs	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c2:	061b      	lsls	r3, r3, #24
 80025c4:	4937      	ldr	r1, [pc, #220]	; (80026a4 <HAL_RCC_OscConfig+0x4e8>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025ca:	4b37      	ldr	r3, [pc, #220]	; (80026a8 <HAL_RCC_OscConfig+0x4ec>)
 80025cc:	2201      	movs	r2, #1
 80025ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d0:	f7ff fb0e 	bl	8001bf0 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025d8:	f7ff fb0a 	bl	8001bf0 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e056      	b.n	8002698 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ea:	4b2e      	ldr	r3, [pc, #184]	; (80026a4 <HAL_RCC_OscConfig+0x4e8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0f0      	beq.n	80025d8 <HAL_RCC_OscConfig+0x41c>
 80025f6:	e04e      	b.n	8002696 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f8:	4b2b      	ldr	r3, [pc, #172]	; (80026a8 <HAL_RCC_OscConfig+0x4ec>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fe:	f7ff faf7 	bl	8001bf0 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002606:	f7ff faf3 	bl	8001bf0 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e03f      	b.n	8002698 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002618:	4b22      	ldr	r3, [pc, #136]	; (80026a4 <HAL_RCC_OscConfig+0x4e8>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1f0      	bne.n	8002606 <HAL_RCC_OscConfig+0x44a>
 8002624:	e037      	b.n	8002696 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d101      	bne.n	8002632 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e032      	b.n	8002698 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002632:	4b1c      	ldr	r3, [pc, #112]	; (80026a4 <HAL_RCC_OscConfig+0x4e8>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d028      	beq.n	8002692 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800264a:	429a      	cmp	r2, r3
 800264c:	d121      	bne.n	8002692 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002658:	429a      	cmp	r2, r3
 800265a:	d11a      	bne.n	8002692 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002662:	4013      	ands	r3, r2
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002668:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800266a:	4293      	cmp	r3, r2
 800266c:	d111      	bne.n	8002692 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002678:	085b      	lsrs	r3, r3, #1
 800267a:	3b01      	subs	r3, #1
 800267c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800267e:	429a      	cmp	r2, r3
 8002680:	d107      	bne.n	8002692 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800268e:	429a      	cmp	r2, r3
 8002690:	d001      	beq.n	8002696 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40007000 	.word	0x40007000
 80026a4:	40023800 	.word	0x40023800
 80026a8:	42470060 	.word	0x42470060

080026ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0cc      	b.n	800285a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026c0:	4b68      	ldr	r3, [pc, #416]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d90c      	bls.n	80026e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ce:	4b65      	ldr	r3, [pc, #404]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d6:	4b63      	ldr	r3, [pc, #396]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d001      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0b8      	b.n	800285a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d020      	beq.n	8002736 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d005      	beq.n	800270c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002700:	4b59      	ldr	r3, [pc, #356]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	4a58      	ldr	r2, [pc, #352]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 8002706:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800270a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002718:	4b53      	ldr	r3, [pc, #332]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	4a52      	ldr	r2, [pc, #328]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800271e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002722:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002724:	4b50      	ldr	r3, [pc, #320]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	494d      	ldr	r1, [pc, #308]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 8002732:	4313      	orrs	r3, r2
 8002734:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d044      	beq.n	80027cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d107      	bne.n	800275a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274a:	4b47      	ldr	r3, [pc, #284]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d119      	bne.n	800278a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e07f      	b.n	800285a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d003      	beq.n	800276a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002766:	2b03      	cmp	r3, #3
 8002768:	d107      	bne.n	800277a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800276a:	4b3f      	ldr	r3, [pc, #252]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d109      	bne.n	800278a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e06f      	b.n	800285a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800277a:	4b3b      	ldr	r3, [pc, #236]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e067      	b.n	800285a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800278a:	4b37      	ldr	r3, [pc, #220]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f023 0203 	bic.w	r2, r3, #3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	4934      	ldr	r1, [pc, #208]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 8002798:	4313      	orrs	r3, r2
 800279a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800279c:	f7ff fa28 	bl	8001bf0 <HAL_GetTick>
 80027a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a2:	e00a      	b.n	80027ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a4:	f7ff fa24 	bl	8001bf0 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e04f      	b.n	800285a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ba:	4b2b      	ldr	r3, [pc, #172]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 020c 	and.w	r2, r3, #12
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d1eb      	bne.n	80027a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027cc:	4b25      	ldr	r3, [pc, #148]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d20c      	bcs.n	80027f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027da:	4b22      	ldr	r3, [pc, #136]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e2:	4b20      	ldr	r3, [pc, #128]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d001      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e032      	b.n	800285a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d008      	beq.n	8002812 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002800:	4b19      	ldr	r3, [pc, #100]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	4916      	ldr	r1, [pc, #88]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	4313      	orrs	r3, r2
 8002810:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b00      	cmp	r3, #0
 800281c:	d009      	beq.n	8002832 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800281e:	4b12      	ldr	r3, [pc, #72]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	490e      	ldr	r1, [pc, #56]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800282e:	4313      	orrs	r3, r2
 8002830:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002832:	f000 f821 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 8002836:	4602      	mov	r2, r0
 8002838:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	091b      	lsrs	r3, r3, #4
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	490a      	ldr	r1, [pc, #40]	; (800286c <HAL_RCC_ClockConfig+0x1c0>)
 8002844:	5ccb      	ldrb	r3, [r1, r3]
 8002846:	fa22 f303 	lsr.w	r3, r2, r3
 800284a:	4a09      	ldr	r2, [pc, #36]	; (8002870 <HAL_RCC_ClockConfig+0x1c4>)
 800284c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800284e:	4b09      	ldr	r3, [pc, #36]	; (8002874 <HAL_RCC_ClockConfig+0x1c8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff f988 	bl	8001b68 <HAL_InitTick>

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40023c00 	.word	0x40023c00
 8002868:	40023800 	.word	0x40023800
 800286c:	08006d6c 	.word	0x08006d6c
 8002870:	20000004 	.word	0x20000004
 8002874:	20000008 	.word	0x20000008

08002878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002878:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800287c:	b084      	sub	sp, #16
 800287e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	607b      	str	r3, [r7, #4]
 8002884:	2300      	movs	r3, #0
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	2300      	movs	r3, #0
 800288a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800288c:	2300      	movs	r3, #0
 800288e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002890:	4b67      	ldr	r3, [pc, #412]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 030c 	and.w	r3, r3, #12
 8002898:	2b08      	cmp	r3, #8
 800289a:	d00d      	beq.n	80028b8 <HAL_RCC_GetSysClockFreq+0x40>
 800289c:	2b08      	cmp	r3, #8
 800289e:	f200 80bd 	bhi.w	8002a1c <HAL_RCC_GetSysClockFreq+0x1a4>
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_RCC_GetSysClockFreq+0x34>
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d003      	beq.n	80028b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80028aa:	e0b7      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028ac:	4b61      	ldr	r3, [pc, #388]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80028ae:	60bb      	str	r3, [r7, #8]
       break;
 80028b0:	e0b7      	b.n	8002a22 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028b2:	4b61      	ldr	r3, [pc, #388]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80028b4:	60bb      	str	r3, [r7, #8]
      break;
 80028b6:	e0b4      	b.n	8002a22 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028b8:	4b5d      	ldr	r3, [pc, #372]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028c2:	4b5b      	ldr	r3, [pc, #364]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d04d      	beq.n	800296a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ce:	4b58      	ldr	r3, [pc, #352]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	099b      	lsrs	r3, r3, #6
 80028d4:	461a      	mov	r2, r3
 80028d6:	f04f 0300 	mov.w	r3, #0
 80028da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80028de:	f04f 0100 	mov.w	r1, #0
 80028e2:	ea02 0800 	and.w	r8, r2, r0
 80028e6:	ea03 0901 	and.w	r9, r3, r1
 80028ea:	4640      	mov	r0, r8
 80028ec:	4649      	mov	r1, r9
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	f04f 0300 	mov.w	r3, #0
 80028f6:	014b      	lsls	r3, r1, #5
 80028f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80028fc:	0142      	lsls	r2, r0, #5
 80028fe:	4610      	mov	r0, r2
 8002900:	4619      	mov	r1, r3
 8002902:	ebb0 0008 	subs.w	r0, r0, r8
 8002906:	eb61 0109 	sbc.w	r1, r1, r9
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	018b      	lsls	r3, r1, #6
 8002914:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002918:	0182      	lsls	r2, r0, #6
 800291a:	1a12      	subs	r2, r2, r0
 800291c:	eb63 0301 	sbc.w	r3, r3, r1
 8002920:	f04f 0000 	mov.w	r0, #0
 8002924:	f04f 0100 	mov.w	r1, #0
 8002928:	00d9      	lsls	r1, r3, #3
 800292a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800292e:	00d0      	lsls	r0, r2, #3
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	eb12 0208 	adds.w	r2, r2, r8
 8002938:	eb43 0309 	adc.w	r3, r3, r9
 800293c:	f04f 0000 	mov.w	r0, #0
 8002940:	f04f 0100 	mov.w	r1, #0
 8002944:	0259      	lsls	r1, r3, #9
 8002946:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800294a:	0250      	lsls	r0, r2, #9
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4610      	mov	r0, r2
 8002952:	4619      	mov	r1, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	461a      	mov	r2, r3
 8002958:	f04f 0300 	mov.w	r3, #0
 800295c:	f7fd ff8e 	bl	800087c <__aeabi_uldivmod>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4613      	mov	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	e04a      	b.n	8002a00 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800296a:	4b31      	ldr	r3, [pc, #196]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	099b      	lsrs	r3, r3, #6
 8002970:	461a      	mov	r2, r3
 8002972:	f04f 0300 	mov.w	r3, #0
 8002976:	f240 10ff 	movw	r0, #511	; 0x1ff
 800297a:	f04f 0100 	mov.w	r1, #0
 800297e:	ea02 0400 	and.w	r4, r2, r0
 8002982:	ea03 0501 	and.w	r5, r3, r1
 8002986:	4620      	mov	r0, r4
 8002988:	4629      	mov	r1, r5
 800298a:	f04f 0200 	mov.w	r2, #0
 800298e:	f04f 0300 	mov.w	r3, #0
 8002992:	014b      	lsls	r3, r1, #5
 8002994:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002998:	0142      	lsls	r2, r0, #5
 800299a:	4610      	mov	r0, r2
 800299c:	4619      	mov	r1, r3
 800299e:	1b00      	subs	r0, r0, r4
 80029a0:	eb61 0105 	sbc.w	r1, r1, r5
 80029a4:	f04f 0200 	mov.w	r2, #0
 80029a8:	f04f 0300 	mov.w	r3, #0
 80029ac:	018b      	lsls	r3, r1, #6
 80029ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80029b2:	0182      	lsls	r2, r0, #6
 80029b4:	1a12      	subs	r2, r2, r0
 80029b6:	eb63 0301 	sbc.w	r3, r3, r1
 80029ba:	f04f 0000 	mov.w	r0, #0
 80029be:	f04f 0100 	mov.w	r1, #0
 80029c2:	00d9      	lsls	r1, r3, #3
 80029c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029c8:	00d0      	lsls	r0, r2, #3
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	1912      	adds	r2, r2, r4
 80029d0:	eb45 0303 	adc.w	r3, r5, r3
 80029d4:	f04f 0000 	mov.w	r0, #0
 80029d8:	f04f 0100 	mov.w	r1, #0
 80029dc:	0299      	lsls	r1, r3, #10
 80029de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80029e2:	0290      	lsls	r0, r2, #10
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4610      	mov	r0, r2
 80029ea:	4619      	mov	r1, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	461a      	mov	r2, r3
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	f7fd ff42 	bl	800087c <__aeabi_uldivmod>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4613      	mov	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a00:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	0c1b      	lsrs	r3, r3, #16
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a18:	60bb      	str	r3, [r7, #8]
      break;
 8002a1a:	e002      	b.n	8002a22 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a1e:	60bb      	str	r3, [r7, #8]
      break;
 8002a20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a22:	68bb      	ldr	r3, [r7, #8]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a2e:	bf00      	nop
 8002a30:	40023800 	.word	0x40023800
 8002a34:	00f42400 	.word	0x00f42400
 8002a38:	007a1200 	.word	0x007a1200

08002a3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e07b      	b.n	8002b46 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d108      	bne.n	8002a68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a5e:	d009      	beq.n	8002a74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	61da      	str	r2, [r3, #28]
 8002a66:	e005      	b.n	8002a74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d106      	bne.n	8002a94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7fe ff30 	bl	80018f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2202      	movs	r2, #2
 8002a98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aaa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002abc:	431a      	orrs	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	431a      	orrs	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af8:	ea42 0103 	orr.w	r1, r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b00:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	0c1b      	lsrs	r3, r3, #16
 8002b12:	f003 0104 	and.w	r1, r3, #4
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	f003 0210 	and.w	r2, r3, #16
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	69da      	ldr	r2, [r3, #28]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b088      	sub	sp, #32
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	60f8      	str	r0, [r7, #12]
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	603b      	str	r3, [r7, #0]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d101      	bne.n	8002b70 <HAL_SPI_Transmit+0x22>
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	e126      	b.n	8002dbe <HAL_SPI_Transmit+0x270>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b78:	f7ff f83a 	bl	8001bf0 <HAL_GetTick>
 8002b7c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002b7e:	88fb      	ldrh	r3, [r7, #6]
 8002b80:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d002      	beq.n	8002b94 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b92:	e10b      	b.n	8002dac <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d002      	beq.n	8002ba0 <HAL_SPI_Transmit+0x52>
 8002b9a:	88fb      	ldrh	r3, [r7, #6]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d102      	bne.n	8002ba6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ba4:	e102      	b.n	8002dac <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2203      	movs	r2, #3
 8002baa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	88fa      	ldrh	r2, [r7, #6]
 8002bbe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	88fa      	ldrh	r2, [r7, #6]
 8002bc4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bec:	d10f      	bne.n	8002c0e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bfc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c18:	2b40      	cmp	r3, #64	; 0x40
 8002c1a:	d007      	beq.n	8002c2c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c34:	d14b      	bne.n	8002cce <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d002      	beq.n	8002c44 <HAL_SPI_Transmit+0xf6>
 8002c3e:	8afb      	ldrh	r3, [r7, #22]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d13e      	bne.n	8002cc2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c48:	881a      	ldrh	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c54:	1c9a      	adds	r2, r3, #2
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	3b01      	subs	r3, #1
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c68:	e02b      	b.n	8002cc2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d112      	bne.n	8002c9e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7c:	881a      	ldrh	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c88:	1c9a      	adds	r2, r3, #2
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c9c:	e011      	b.n	8002cc2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c9e:	f7fe ffa7 	bl	8001bf0 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d803      	bhi.n	8002cb6 <HAL_SPI_Transmit+0x168>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb4:	d102      	bne.n	8002cbc <HAL_SPI_Transmit+0x16e>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d102      	bne.n	8002cc2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002cc0:	e074      	b.n	8002dac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1ce      	bne.n	8002c6a <HAL_SPI_Transmit+0x11c>
 8002ccc:	e04c      	b.n	8002d68 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d002      	beq.n	8002cdc <HAL_SPI_Transmit+0x18e>
 8002cd6:	8afb      	ldrh	r3, [r7, #22]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d140      	bne.n	8002d5e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	330c      	adds	r3, #12
 8002ce6:	7812      	ldrb	r2, [r2, #0]
 8002ce8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	1c5a      	adds	r2, r3, #1
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d02:	e02c      	b.n	8002d5e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d113      	bne.n	8002d3a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	330c      	adds	r3, #12
 8002d1c:	7812      	ldrb	r2, [r2, #0]
 8002d1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	1c5a      	adds	r2, r3, #1
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d38:	e011      	b.n	8002d5e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d3a:	f7fe ff59 	bl	8001bf0 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d803      	bhi.n	8002d52 <HAL_SPI_Transmit+0x204>
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d50:	d102      	bne.n	8002d58 <HAL_SPI_Transmit+0x20a>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d102      	bne.n	8002d5e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d5c:	e026      	b.n	8002dac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1cd      	bne.n	8002d04 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	6839      	ldr	r1, [r7, #0]
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 fa63 	bl	8003238 <SPI_EndRxTxTransaction>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d002      	beq.n	8002d7e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10a      	bne.n	8002d9c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d86:	2300      	movs	r3, #0
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d002      	beq.n	8002daa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	77fb      	strb	r3, [r7, #31]
 8002da8:	e000      	b.n	8002dac <HAL_SPI_Transmit+0x25e>
  }

error:
 8002daa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002dbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3720      	adds	r7, #32
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b08c      	sub	sp, #48	; 0x30
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	60f8      	str	r0, [r7, #12]
 8002dce:	60b9      	str	r1, [r7, #8]
 8002dd0:	607a      	str	r2, [r7, #4]
 8002dd2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <HAL_SPI_TransmitReceive+0x26>
 8002de8:	2302      	movs	r3, #2
 8002dea:	e18a      	b.n	8003102 <HAL_SPI_TransmitReceive+0x33c>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002df4:	f7fe fefc 	bl	8001bf0 <HAL_GetTick>
 8002df8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002e0a:	887b      	ldrh	r3, [r7, #2]
 8002e0c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d00f      	beq.n	8002e36 <HAL_SPI_TransmitReceive+0x70>
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e1c:	d107      	bne.n	8002e2e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d103      	bne.n	8002e2e <HAL_SPI_TransmitReceive+0x68>
 8002e26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d003      	beq.n	8002e36 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002e2e:	2302      	movs	r3, #2
 8002e30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e34:	e15b      	b.n	80030ee <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <HAL_SPI_TransmitReceive+0x82>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <HAL_SPI_TransmitReceive+0x82>
 8002e42:	887b      	ldrh	r3, [r7, #2]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d103      	bne.n	8002e50 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e4e:	e14e      	b.n	80030ee <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d003      	beq.n	8002e64 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2205      	movs	r2, #5
 8002e60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	887a      	ldrh	r2, [r7, #2]
 8002e74:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	887a      	ldrh	r2, [r7, #2]
 8002e7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	887a      	ldrh	r2, [r7, #2]
 8002e86:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	887a      	ldrh	r2, [r7, #2]
 8002e8c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea4:	2b40      	cmp	r3, #64	; 0x40
 8002ea6:	d007      	beq.n	8002eb8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eb6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ec0:	d178      	bne.n	8002fb4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d002      	beq.n	8002ed0 <HAL_SPI_TransmitReceive+0x10a>
 8002eca:	8b7b      	ldrh	r3, [r7, #26]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d166      	bne.n	8002f9e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed4:	881a      	ldrh	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee0:	1c9a      	adds	r2, r3, #2
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	3b01      	subs	r3, #1
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ef4:	e053      	b.n	8002f9e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d11b      	bne.n	8002f3c <HAL_SPI_TransmitReceive+0x176>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d016      	beq.n	8002f3c <HAL_SPI_TransmitReceive+0x176>
 8002f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d113      	bne.n	8002f3c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f18:	881a      	ldrh	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f24:	1c9a      	adds	r2, r3, #2
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	3b01      	subs	r3, #1
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d119      	bne.n	8002f7e <HAL_SPI_TransmitReceive+0x1b8>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d014      	beq.n	8002f7e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5e:	b292      	uxth	r2, r2
 8002f60:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f66:	1c9a      	adds	r2, r3, #2
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	3b01      	subs	r3, #1
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f7e:	f7fe fe37 	bl	8001bf0 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d807      	bhi.n	8002f9e <HAL_SPI_TransmitReceive+0x1d8>
 8002f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f94:	d003      	beq.n	8002f9e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f9c:	e0a7      	b.n	80030ee <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1a6      	bne.n	8002ef6 <HAL_SPI_TransmitReceive+0x130>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1a1      	bne.n	8002ef6 <HAL_SPI_TransmitReceive+0x130>
 8002fb2:	e07c      	b.n	80030ae <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d002      	beq.n	8002fc2 <HAL_SPI_TransmitReceive+0x1fc>
 8002fbc:	8b7b      	ldrh	r3, [r7, #26]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d16b      	bne.n	800309a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	330c      	adds	r3, #12
 8002fcc:	7812      	ldrb	r2, [r2, #0]
 8002fce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fe8:	e057      	b.n	800309a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d11c      	bne.n	8003032 <HAL_SPI_TransmitReceive+0x26c>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d017      	beq.n	8003032 <HAL_SPI_TransmitReceive+0x26c>
 8003002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003004:	2b01      	cmp	r3, #1
 8003006:	d114      	bne.n	8003032 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	330c      	adds	r3, #12
 8003012:	7812      	ldrb	r2, [r2, #0]
 8003014:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003024:	b29b      	uxth	r3, r3
 8003026:	3b01      	subs	r3, #1
 8003028:	b29a      	uxth	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800302e:	2300      	movs	r3, #0
 8003030:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b01      	cmp	r3, #1
 800303e:	d119      	bne.n	8003074 <HAL_SPI_TransmitReceive+0x2ae>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003044:	b29b      	uxth	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d014      	beq.n	8003074 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003054:	b2d2      	uxtb	r2, r2
 8003056:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305c:	1c5a      	adds	r2, r3, #1
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003066:	b29b      	uxth	r3, r3
 8003068:	3b01      	subs	r3, #1
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003070:	2301      	movs	r3, #1
 8003072:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003074:	f7fe fdbc 	bl	8001bf0 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003080:	429a      	cmp	r2, r3
 8003082:	d803      	bhi.n	800308c <HAL_SPI_TransmitReceive+0x2c6>
 8003084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308a:	d102      	bne.n	8003092 <HAL_SPI_TransmitReceive+0x2cc>
 800308c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800308e:	2b00      	cmp	r3, #0
 8003090:	d103      	bne.n	800309a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003098:	e029      	b.n	80030ee <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800309e:	b29b      	uxth	r3, r3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1a2      	bne.n	8002fea <HAL_SPI_TransmitReceive+0x224>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d19d      	bne.n	8002fea <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 f8c0 	bl	8003238 <SPI_EndRxTxTransaction>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d006      	beq.n	80030cc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2220      	movs	r2, #32
 80030c8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80030ca:	e010      	b.n	80030ee <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10b      	bne.n	80030ec <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030d4:	2300      	movs	r3, #0
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	617b      	str	r3, [r7, #20]
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	e000      	b.n	80030ee <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80030ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003102:	4618      	mov	r0, r3
 8003104:	3730      	adds	r7, #48	; 0x30
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003118:	b2db      	uxtb	r3, r3
}
 800311a:	4618      	mov	r0, r3
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
	...

08003128 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b088      	sub	sp, #32
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	603b      	str	r3, [r7, #0]
 8003134:	4613      	mov	r3, r2
 8003136:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003138:	f7fe fd5a 	bl	8001bf0 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003140:	1a9b      	subs	r3, r3, r2
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	4413      	add	r3, r2
 8003146:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003148:	f7fe fd52 	bl	8001bf0 <HAL_GetTick>
 800314c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800314e:	4b39      	ldr	r3, [pc, #228]	; (8003234 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	015b      	lsls	r3, r3, #5
 8003154:	0d1b      	lsrs	r3, r3, #20
 8003156:	69fa      	ldr	r2, [r7, #28]
 8003158:	fb02 f303 	mul.w	r3, r2, r3
 800315c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800315e:	e054      	b.n	800320a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003166:	d050      	beq.n	800320a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003168:	f7fe fd42 	bl	8001bf0 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	69fa      	ldr	r2, [r7, #28]
 8003174:	429a      	cmp	r2, r3
 8003176:	d902      	bls.n	800317e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d13d      	bne.n	80031fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800318c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003196:	d111      	bne.n	80031bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031a0:	d004      	beq.n	80031ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031aa:	d107      	bne.n	80031bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031c4:	d10f      	bne.n	80031e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e017      	b.n	800322a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	3b01      	subs	r3, #1
 8003208:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	4013      	ands	r3, r2
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	429a      	cmp	r2, r3
 8003218:	bf0c      	ite	eq
 800321a:	2301      	moveq	r3, #1
 800321c:	2300      	movne	r3, #0
 800321e:	b2db      	uxtb	r3, r3
 8003220:	461a      	mov	r2, r3
 8003222:	79fb      	ldrb	r3, [r7, #7]
 8003224:	429a      	cmp	r2, r3
 8003226:	d19b      	bne.n	8003160 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3720      	adds	r7, #32
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	20000004 	.word	0x20000004

08003238 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af02      	add	r7, sp, #8
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003244:	4b1b      	ldr	r3, [pc, #108]	; (80032b4 <SPI_EndRxTxTransaction+0x7c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a1b      	ldr	r2, [pc, #108]	; (80032b8 <SPI_EndRxTxTransaction+0x80>)
 800324a:	fba2 2303 	umull	r2, r3, r2, r3
 800324e:	0d5b      	lsrs	r3, r3, #21
 8003250:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003254:	fb02 f303 	mul.w	r3, r2, r3
 8003258:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003262:	d112      	bne.n	800328a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	2200      	movs	r2, #0
 800326c:	2180      	movs	r1, #128	; 0x80
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f7ff ff5a 	bl	8003128 <SPI_WaitFlagStateUntilTimeout>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d016      	beq.n	80032a8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327e:	f043 0220 	orr.w	r2, r3, #32
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e00f      	b.n	80032aa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00a      	beq.n	80032a6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	3b01      	subs	r3, #1
 8003294:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a0:	2b80      	cmp	r3, #128	; 0x80
 80032a2:	d0f2      	beq.n	800328a <SPI_EndRxTxTransaction+0x52>
 80032a4:	e000      	b.n	80032a8 <SPI_EndRxTxTransaction+0x70>
        break;
 80032a6:	bf00      	nop
  }

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20000004 	.word	0x20000004
 80032b8:	165e9f81 	.word	0x165e9f81

080032bc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80032c0:	4904      	ldr	r1, [pc, #16]	; (80032d4 <MX_FATFS_Init+0x18>)
 80032c2:	4805      	ldr	r0, [pc, #20]	; (80032d8 <MX_FATFS_Init+0x1c>)
 80032c4:	f002 ffd0 	bl	8006268 <FATFS_LinkDriver>
 80032c8:	4603      	mov	r3, r0
 80032ca:	461a      	mov	r2, r3
 80032cc:	4b03      	ldr	r3, [pc, #12]	; (80032dc <MX_FATFS_Init+0x20>)
 80032ce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80032d0:	bf00      	nop
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	200027d0 	.word	0x200027d0
 80032d8:	20000010 	.word	0x20000010
 80032dc:	200027d4 	.word	0x200027d4

080032e0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80032e4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
   return SD_disk_initialize(pdrv);
 80032fa:	79fb      	ldrb	r3, [r7, #7]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7fd fdf3 	bl	8000ee8 <SD_disk_initialize>
 8003302:	4603      	mov	r3, r0
 8003304:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8003306:	4618      	mov	r0, r3
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b082      	sub	sp, #8
 8003312:	af00      	add	r7, sp, #0
 8003314:	4603      	mov	r3, r0
 8003316:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8003318:	79fb      	ldrb	r3, [r7, #7]
 800331a:	4618      	mov	r0, r3
 800331c:	f7fd fece 	bl	80010bc <SD_disk_status>
 8003320:	4603      	mov	r3, r0
 8003322:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8003324:	4618      	mov	r0, r3
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	60b9      	str	r1, [r7, #8]
 8003334:	607a      	str	r2, [r7, #4]
 8003336:	603b      	str	r3, [r7, #0]
 8003338:	4603      	mov	r3, r0
 800333a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800333c:	7bf8      	ldrb	r0, [r7, #15]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	68b9      	ldr	r1, [r7, #8]
 8003344:	f7fd fed0 	bl	80010e8 <SD_disk_read>
 8003348:	4603      	mov	r3, r0
 800334a:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	60b9      	str	r1, [r7, #8]
 800335c:	607a      	str	r2, [r7, #4]
 800335e:	603b      	str	r3, [r7, #0]
 8003360:	4603      	mov	r3, r0
 8003362:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8003364:	7bf8      	ldrb	r0, [r7, #15]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	68b9      	ldr	r1, [r7, #8]
 800336c:	f7fd ff26 	bl	80011bc <SD_disk_write>
 8003370:	4603      	mov	r3, r0
 8003372:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	4603      	mov	r3, r0
 8003384:	603a      	str	r2, [r7, #0]
 8003386:	71fb      	strb	r3, [r7, #7]
 8003388:	460b      	mov	r3, r1
 800338a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv, cmd, buff);
 800338c:	79fb      	ldrb	r3, [r7, #7]
 800338e:	79b9      	ldrb	r1, [r7, #6]
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f7fd ff96 	bl	80012c4 <SD_disk_ioctl>
 8003398:	4603      	mov	r3, r0
 800339a:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800339c:	4618      	mov	r0, r3
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80033ae:	79fb      	ldrb	r3, [r7, #7]
 80033b0:	4a08      	ldr	r2, [pc, #32]	; (80033d4 <disk_status+0x30>)
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	79fa      	ldrb	r2, [r7, #7]
 80033bc:	4905      	ldr	r1, [pc, #20]	; (80033d4 <disk_status+0x30>)
 80033be:	440a      	add	r2, r1
 80033c0:	7a12      	ldrb	r2, [r2, #8]
 80033c2:	4610      	mov	r0, r2
 80033c4:	4798      	blx	r3
 80033c6:	4603      	mov	r3, r0
 80033c8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	200002d8 	.word	0x200002d8

080033d8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	4a0d      	ldr	r2, [pc, #52]	; (8003420 <disk_initialize+0x48>)
 80033ea:	5cd3      	ldrb	r3, [r2, r3]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d111      	bne.n	8003414 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80033f0:	79fb      	ldrb	r3, [r7, #7]
 80033f2:	4a0b      	ldr	r2, [pc, #44]	; (8003420 <disk_initialize+0x48>)
 80033f4:	2101      	movs	r1, #1
 80033f6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80033f8:	79fb      	ldrb	r3, [r7, #7]
 80033fa:	4a09      	ldr	r2, [pc, #36]	; (8003420 <disk_initialize+0x48>)
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	79fa      	ldrb	r2, [r7, #7]
 8003406:	4906      	ldr	r1, [pc, #24]	; (8003420 <disk_initialize+0x48>)
 8003408:	440a      	add	r2, r1
 800340a:	7a12      	ldrb	r2, [r2, #8]
 800340c:	4610      	mov	r0, r2
 800340e:	4798      	blx	r3
 8003410:	4603      	mov	r3, r0
 8003412:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003414:	7bfb      	ldrb	r3, [r7, #15]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	200002d8 	.word	0x200002d8

08003424 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003424:	b590      	push	{r4, r7, lr}
 8003426:	b087      	sub	sp, #28
 8003428:	af00      	add	r7, sp, #0
 800342a:	60b9      	str	r1, [r7, #8]
 800342c:	607a      	str	r2, [r7, #4]
 800342e:	603b      	str	r3, [r7, #0]
 8003430:	4603      	mov	r3, r0
 8003432:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003434:	7bfb      	ldrb	r3, [r7, #15]
 8003436:	4a0a      	ldr	r2, [pc, #40]	; (8003460 <disk_read+0x3c>)
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	689c      	ldr	r4, [r3, #8]
 8003440:	7bfb      	ldrb	r3, [r7, #15]
 8003442:	4a07      	ldr	r2, [pc, #28]	; (8003460 <disk_read+0x3c>)
 8003444:	4413      	add	r3, r2
 8003446:	7a18      	ldrb	r0, [r3, #8]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	68b9      	ldr	r1, [r7, #8]
 800344e:	47a0      	blx	r4
 8003450:	4603      	mov	r3, r0
 8003452:	75fb      	strb	r3, [r7, #23]
  return res;
 8003454:	7dfb      	ldrb	r3, [r7, #23]
}
 8003456:	4618      	mov	r0, r3
 8003458:	371c      	adds	r7, #28
 800345a:	46bd      	mov	sp, r7
 800345c:	bd90      	pop	{r4, r7, pc}
 800345e:	bf00      	nop
 8003460:	200002d8 	.word	0x200002d8

08003464 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003464:	b590      	push	{r4, r7, lr}
 8003466:	b087      	sub	sp, #28
 8003468:	af00      	add	r7, sp, #0
 800346a:	60b9      	str	r1, [r7, #8]
 800346c:	607a      	str	r2, [r7, #4]
 800346e:	603b      	str	r3, [r7, #0]
 8003470:	4603      	mov	r3, r0
 8003472:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003474:	7bfb      	ldrb	r3, [r7, #15]
 8003476:	4a0a      	ldr	r2, [pc, #40]	; (80034a0 <disk_write+0x3c>)
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	68dc      	ldr	r4, [r3, #12]
 8003480:	7bfb      	ldrb	r3, [r7, #15]
 8003482:	4a07      	ldr	r2, [pc, #28]	; (80034a0 <disk_write+0x3c>)
 8003484:	4413      	add	r3, r2
 8003486:	7a18      	ldrb	r0, [r3, #8]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	68b9      	ldr	r1, [r7, #8]
 800348e:	47a0      	blx	r4
 8003490:	4603      	mov	r3, r0
 8003492:	75fb      	strb	r3, [r7, #23]
  return res;
 8003494:	7dfb      	ldrb	r3, [r7, #23]
}
 8003496:	4618      	mov	r0, r3
 8003498:	371c      	adds	r7, #28
 800349a:	46bd      	mov	sp, r7
 800349c:	bd90      	pop	{r4, r7, pc}
 800349e:	bf00      	nop
 80034a0:	200002d8 	.word	0x200002d8

080034a4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	603a      	str	r2, [r7, #0]
 80034ae:	71fb      	strb	r3, [r7, #7]
 80034b0:	460b      	mov	r3, r1
 80034b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80034b4:	79fb      	ldrb	r3, [r7, #7]
 80034b6:	4a09      	ldr	r2, [pc, #36]	; (80034dc <disk_ioctl+0x38>)
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	79fa      	ldrb	r2, [r7, #7]
 80034c2:	4906      	ldr	r1, [pc, #24]	; (80034dc <disk_ioctl+0x38>)
 80034c4:	440a      	add	r2, r1
 80034c6:	7a10      	ldrb	r0, [r2, #8]
 80034c8:	79b9      	ldrb	r1, [r7, #6]
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	4798      	blx	r3
 80034ce:	4603      	mov	r3, r0
 80034d0:	73fb      	strb	r3, [r7, #15]
  return res;
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	200002d8 	.word	0x200002d8

080034e0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3301      	adds	r3, #1
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80034f0:	89fb      	ldrh	r3, [r7, #14]
 80034f2:	021b      	lsls	r3, r3, #8
 80034f4:	b21a      	sxth	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	b21b      	sxth	r3, r3
 80034fc:	4313      	orrs	r3, r2
 80034fe:	b21b      	sxth	r3, r3
 8003500:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003502:	89fb      	ldrh	r3, [r7, #14]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3303      	adds	r3, #3
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	021b      	lsls	r3, r3, #8
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	3202      	adds	r2, #2
 8003528:	7812      	ldrb	r2, [r2, #0]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	021b      	lsls	r3, r3, #8
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	3201      	adds	r2, #1
 8003536:	7812      	ldrb	r2, [r2, #0]
 8003538:	4313      	orrs	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	021b      	lsls	r3, r3, #8
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	7812      	ldrb	r2, [r2, #0]
 8003544:	4313      	orrs	r3, r2
 8003546:	60fb      	str	r3, [r7, #12]
	return rv;
 8003548:	68fb      	ldr	r3, [r7, #12]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003556:	b480      	push	{r7}
 8003558:	b083      	sub	sp, #12
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
 800355e:	460b      	mov	r3, r1
 8003560:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	607a      	str	r2, [r7, #4]
 8003568:	887a      	ldrh	r2, [r7, #2]
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	701a      	strb	r2, [r3, #0]
 800356e:	887b      	ldrh	r3, [r7, #2]
 8003570:	0a1b      	lsrs	r3, r3, #8
 8003572:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	607a      	str	r2, [r7, #4]
 800357a:	887a      	ldrh	r2, [r7, #2]
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	701a      	strb	r2, [r3, #0]
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	701a      	strb	r2, [r3, #0]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	0a1b      	lsrs	r3, r3, #8
 80035a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	1c5a      	adds	r2, r3, #1
 80035ac:	607a      	str	r2, [r7, #4]
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	701a      	strb	r2, [r3, #0]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	0a1b      	lsrs	r3, r3, #8
 80035b8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	1c5a      	adds	r2, r3, #1
 80035be:	607a      	str	r2, [r7, #4]
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	701a      	strb	r2, [r3, #0]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	0a1b      	lsrs	r3, r3, #8
 80035ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	607a      	str	r2, [r7, #4]
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	701a      	strb	r2, [r3, #0]
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00d      	beq.n	800361a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	1c53      	adds	r3, r2, #1
 8003602:	613b      	str	r3, [r7, #16]
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	1c59      	adds	r1, r3, #1
 8003608:	6179      	str	r1, [r7, #20]
 800360a:	7812      	ldrb	r2, [r2, #0]
 800360c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	3b01      	subs	r3, #1
 8003612:	607b      	str	r3, [r7, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f1      	bne.n	80035fe <mem_cpy+0x1a>
	}
}
 800361a:	bf00      	nop
 800361c:	371c      	adds	r7, #28
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003626:	b480      	push	{r7}
 8003628:	b087      	sub	sp, #28
 800362a:	af00      	add	r7, sp, #0
 800362c:	60f8      	str	r0, [r7, #12]
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	1c5a      	adds	r2, r3, #1
 800363a:	617a      	str	r2, [r7, #20]
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	3b01      	subs	r3, #1
 8003646:	607b      	str	r3, [r7, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f3      	bne.n	8003636 <mem_set+0x10>
}
 800364e:	bf00      	nop
 8003650:	bf00      	nop
 8003652:	371c      	adds	r7, #28
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800365c:	b480      	push	{r7}
 800365e:	b089      	sub	sp, #36	; 0x24
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	61fb      	str	r3, [r7, #28]
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	1c5a      	adds	r2, r3, #1
 8003678:	61fa      	str	r2, [r7, #28]
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	4619      	mov	r1, r3
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	61ba      	str	r2, [r7, #24]
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	1acb      	subs	r3, r1, r3
 8003688:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3b01      	subs	r3, #1
 800368e:	607b      	str	r3, [r7, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <mem_cmp+0x40>
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0eb      	beq.n	8003674 <mem_cmp+0x18>

	return r;
 800369c:	697b      	ldr	r3, [r7, #20]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3724      	adds	r7, #36	; 0x24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
 80036b2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80036b4:	e002      	b.n	80036bc <chk_chr+0x12>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	3301      	adds	r3, #1
 80036ba:	607b      	str	r3, [r7, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d005      	beq.n	80036d0 <chk_chr+0x26>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	461a      	mov	r2, r3
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d1f2      	bne.n	80036b6 <chk_chr+0xc>
	return *str;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	781b      	ldrb	r3, [r3, #0]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80036ea:	2300      	movs	r3, #0
 80036ec:	60bb      	str	r3, [r7, #8]
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	e029      	b.n	8003748 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80036f4:	4a27      	ldr	r2, [pc, #156]	; (8003794 <chk_lock+0xb4>)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	4413      	add	r3, r2
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d01d      	beq.n	800373e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003702:	4a24      	ldr	r2, [pc, #144]	; (8003794 <chk_lock+0xb4>)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	011b      	lsls	r3, r3, #4
 8003708:	4413      	add	r3, r2
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d116      	bne.n	8003742 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003714:	4a1f      	ldr	r2, [pc, #124]	; (8003794 <chk_lock+0xb4>)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	4413      	add	r3, r2
 800371c:	3304      	adds	r3, #4
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003724:	429a      	cmp	r2, r3
 8003726:	d10c      	bne.n	8003742 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003728:	4a1a      	ldr	r2, [pc, #104]	; (8003794 <chk_lock+0xb4>)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	011b      	lsls	r3, r3, #4
 800372e:	4413      	add	r3, r2
 8003730:	3308      	adds	r3, #8
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003738:	429a      	cmp	r2, r3
 800373a:	d102      	bne.n	8003742 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800373c:	e007      	b.n	800374e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800373e:	2301      	movs	r3, #1
 8003740:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	3301      	adds	r3, #1
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d9d2      	bls.n	80036f4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b02      	cmp	r3, #2
 8003752:	d109      	bne.n	8003768 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d102      	bne.n	8003760 <chk_lock+0x80>
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2b02      	cmp	r3, #2
 800375e:	d101      	bne.n	8003764 <chk_lock+0x84>
 8003760:	2300      	movs	r3, #0
 8003762:	e010      	b.n	8003786 <chk_lock+0xa6>
 8003764:	2312      	movs	r3, #18
 8003766:	e00e      	b.n	8003786 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d108      	bne.n	8003780 <chk_lock+0xa0>
 800376e:	4a09      	ldr	r2, [pc, #36]	; (8003794 <chk_lock+0xb4>)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	011b      	lsls	r3, r3, #4
 8003774:	4413      	add	r3, r2
 8003776:	330c      	adds	r3, #12
 8003778:	881b      	ldrh	r3, [r3, #0]
 800377a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800377e:	d101      	bne.n	8003784 <chk_lock+0xa4>
 8003780:	2310      	movs	r3, #16
 8003782:	e000      	b.n	8003786 <chk_lock+0xa6>
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3714      	adds	r7, #20
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	200000b8 	.word	0x200000b8

08003798 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800379e:	2300      	movs	r3, #0
 80037a0:	607b      	str	r3, [r7, #4]
 80037a2:	e002      	b.n	80037aa <enq_lock+0x12>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3301      	adds	r3, #1
 80037a8:	607b      	str	r3, [r7, #4]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d806      	bhi.n	80037be <enq_lock+0x26>
 80037b0:	4a09      	ldr	r2, [pc, #36]	; (80037d8 <enq_lock+0x40>)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	4413      	add	r3, r2
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f2      	bne.n	80037a4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	bf14      	ite	ne
 80037c4:	2301      	movne	r3, #1
 80037c6:	2300      	moveq	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	200000b8 	.word	0x200000b8

080037dc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80037e6:	2300      	movs	r3, #0
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	e01f      	b.n	800382c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80037ec:	4a41      	ldr	r2, [pc, #260]	; (80038f4 <inc_lock+0x118>)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	011b      	lsls	r3, r3, #4
 80037f2:	4413      	add	r3, r2
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d113      	bne.n	8003826 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80037fe:	4a3d      	ldr	r2, [pc, #244]	; (80038f4 <inc_lock+0x118>)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	011b      	lsls	r3, r3, #4
 8003804:	4413      	add	r3, r2
 8003806:	3304      	adds	r3, #4
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800380e:	429a      	cmp	r2, r3
 8003810:	d109      	bne.n	8003826 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003812:	4a38      	ldr	r2, [pc, #224]	; (80038f4 <inc_lock+0x118>)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	4413      	add	r3, r2
 800381a:	3308      	adds	r3, #8
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003822:	429a      	cmp	r2, r3
 8003824:	d006      	beq.n	8003834 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	3301      	adds	r3, #1
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d9dc      	bls.n	80037ec <inc_lock+0x10>
 8003832:	e000      	b.n	8003836 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003834:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2b02      	cmp	r3, #2
 800383a:	d132      	bne.n	80038a2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800383c:	2300      	movs	r3, #0
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	e002      	b.n	8003848 <inc_lock+0x6c>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	3301      	adds	r3, #1
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d806      	bhi.n	800385c <inc_lock+0x80>
 800384e:	4a29      	ldr	r2, [pc, #164]	; (80038f4 <inc_lock+0x118>)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	4413      	add	r3, r2
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1f2      	bne.n	8003842 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2b02      	cmp	r3, #2
 8003860:	d101      	bne.n	8003866 <inc_lock+0x8a>
 8003862:	2300      	movs	r3, #0
 8003864:	e040      	b.n	80038e8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	4922      	ldr	r1, [pc, #136]	; (80038f4 <inc_lock+0x118>)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	011b      	lsls	r3, r3, #4
 8003870:	440b      	add	r3, r1
 8003872:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	491e      	ldr	r1, [pc, #120]	; (80038f4 <inc_lock+0x118>)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	440b      	add	r3, r1
 8003880:	3304      	adds	r3, #4
 8003882:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	695a      	ldr	r2, [r3, #20]
 8003888:	491a      	ldr	r1, [pc, #104]	; (80038f4 <inc_lock+0x118>)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	440b      	add	r3, r1
 8003890:	3308      	adds	r3, #8
 8003892:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003894:	4a17      	ldr	r2, [pc, #92]	; (80038f4 <inc_lock+0x118>)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	4413      	add	r3, r2
 800389c:	330c      	adds	r3, #12
 800389e:	2200      	movs	r2, #0
 80038a0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d009      	beq.n	80038bc <inc_lock+0xe0>
 80038a8:	4a12      	ldr	r2, [pc, #72]	; (80038f4 <inc_lock+0x118>)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	4413      	add	r3, r2
 80038b0:	330c      	adds	r3, #12
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <inc_lock+0xe0>
 80038b8:	2300      	movs	r3, #0
 80038ba:	e015      	b.n	80038e8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d108      	bne.n	80038d4 <inc_lock+0xf8>
 80038c2:	4a0c      	ldr	r2, [pc, #48]	; (80038f4 <inc_lock+0x118>)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	4413      	add	r3, r2
 80038ca:	330c      	adds	r3, #12
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	3301      	adds	r3, #1
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	e001      	b.n	80038d8 <inc_lock+0xfc>
 80038d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038d8:	4906      	ldr	r1, [pc, #24]	; (80038f4 <inc_lock+0x118>)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	440b      	add	r3, r1
 80038e0:	330c      	adds	r3, #12
 80038e2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	3301      	adds	r3, #1
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	200000b8 	.word	0x200000b8

080038f8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003900:	2300      	movs	r3, #0
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	e010      	b.n	8003928 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003906:	4a0d      	ldr	r2, [pc, #52]	; (800393c <clear_lock+0x44>)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	4413      	add	r3, r2
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	429a      	cmp	r2, r3
 8003914:	d105      	bne.n	8003922 <clear_lock+0x2a>
 8003916:	4a09      	ldr	r2, [pc, #36]	; (800393c <clear_lock+0x44>)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	4413      	add	r3, r2
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	3301      	adds	r3, #1
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d9eb      	bls.n	8003906 <clear_lock+0xe>
	}
}
 800392e:	bf00      	nop
 8003930:	bf00      	nop
 8003932:	3714      	adds	r7, #20
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	200000b8 	.word	0x200000b8

08003940 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003948:	2300      	movs	r3, #0
 800394a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	78db      	ldrb	r3, [r3, #3]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d034      	beq.n	80039be <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003958:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	7858      	ldrb	r0, [r3, #1]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003964:	2301      	movs	r3, #1
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	f7ff fd7c 	bl	8003464 <disk_write>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <sync_window+0x38>
			res = FR_DISK_ERR;
 8003972:	2301      	movs	r3, #1
 8003974:	73fb      	strb	r3, [r7, #15]
 8003976:	e022      	b.n	80039be <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	1ad2      	subs	r2, r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	429a      	cmp	r2, r3
 800398c:	d217      	bcs.n	80039be <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	789b      	ldrb	r3, [r3, #2]
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	e010      	b.n	80039b8 <sync_window+0x78>
					wsect += fs->fsize;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	4413      	add	r3, r2
 800399e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	7858      	ldrb	r0, [r3, #1]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80039aa:	2301      	movs	r3, #1
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	f7ff fd59 	bl	8003464 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	3b01      	subs	r3, #1
 80039b6:	613b      	str	r3, [r7, #16]
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d8eb      	bhi.n	8003996 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80039be:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d01b      	beq.n	8003a18 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7ff ffad 	bl	8003940 <sync_window>
 80039e6:	4603      	mov	r3, r0
 80039e8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d113      	bne.n	8003a18 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	7858      	ldrb	r0, [r3, #1]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80039fa:	2301      	movs	r3, #1
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	f7ff fd11 	bl	8003424 <disk_read>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d004      	beq.n	8003a12 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003a08:	f04f 33ff 	mov.w	r3, #4294967295
 8003a0c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff ff87 	bl	8003940 <sync_window>
 8003a32:	4603      	mov	r3, r0
 8003a34:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d159      	bne.n	8003af0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	2b03      	cmp	r3, #3
 8003a42:	d149      	bne.n	8003ad8 <sync_fs+0xb4>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	791b      	ldrb	r3, [r3, #4]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d145      	bne.n	8003ad8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	899b      	ldrh	r3, [r3, #12]
 8003a56:	461a      	mov	r2, r3
 8003a58:	2100      	movs	r1, #0
 8003a5a:	f7ff fde4 	bl	8003626 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3338      	adds	r3, #56	; 0x38
 8003a62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003a66:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7ff fd73 	bl	8003556 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3338      	adds	r3, #56	; 0x38
 8003a74:	4921      	ldr	r1, [pc, #132]	; (8003afc <sync_fs+0xd8>)
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7ff fd88 	bl	800358c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3338      	adds	r3, #56	; 0x38
 8003a80:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003a84:	491e      	ldr	r1, [pc, #120]	; (8003b00 <sync_fs+0xdc>)
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7ff fd80 	bl	800358c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3338      	adds	r3, #56	; 0x38
 8003a90:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	f7ff fd76 	bl	800358c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3338      	adds	r3, #56	; 0x38
 8003aa4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	4619      	mov	r1, r3
 8003aae:	4610      	mov	r0, r2
 8003ab0:	f7ff fd6c 	bl	800358c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	7858      	ldrb	r0, [r3, #1]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003acc:	2301      	movs	r3, #1
 8003ace:	f7ff fcc9 	bl	8003464 <disk_write>
			fs->fsi_flag = 0;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	785b      	ldrb	r3, [r3, #1]
 8003adc:	2200      	movs	r2, #0
 8003ade:	2100      	movs	r1, #0
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff fcdf 	bl	80034a4 <disk_ioctl>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <sync_fs+0xcc>
 8003aec:	2301      	movs	r3, #1
 8003aee:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	41615252 	.word	0x41615252
 8003b00:	61417272 	.word	0x61417272

08003b04 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	3b02      	subs	r3, #2
 8003b12:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	3b02      	subs	r3, #2
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d301      	bcc.n	8003b24 <clust2sect+0x20>
 8003b20:	2300      	movs	r3, #0
 8003b22:	e008      	b.n	8003b36 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	895b      	ldrh	r3, [r3, #10]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	fb03 f202 	mul.w	r2, r3, r2
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b34:	4413      	add	r3, r2
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b086      	sub	sp, #24
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
 8003b4a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d904      	bls.n	8003b62 <get_fat+0x20>
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d302      	bcc.n	8003b68 <get_fat+0x26>
		val = 1;	/* Internal error */
 8003b62:	2301      	movs	r3, #1
 8003b64:	617b      	str	r3, [r7, #20]
 8003b66:	e0bb      	b.n	8003ce0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003b68:	f04f 33ff 	mov.w	r3, #4294967295
 8003b6c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	2b03      	cmp	r3, #3
 8003b74:	f000 8083 	beq.w	8003c7e <get_fat+0x13c>
 8003b78:	2b03      	cmp	r3, #3
 8003b7a:	f300 80a7 	bgt.w	8003ccc <get_fat+0x18a>
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d002      	beq.n	8003b88 <get_fat+0x46>
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d056      	beq.n	8003c34 <get_fat+0xf2>
 8003b86:	e0a1      	b.n	8003ccc <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	60fb      	str	r3, [r7, #12]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	085b      	lsrs	r3, r3, #1
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	4413      	add	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	899b      	ldrh	r3, [r3, #12]
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ba6:	4413      	add	r3, r2
 8003ba8:	4619      	mov	r1, r3
 8003baa:	6938      	ldr	r0, [r7, #16]
 8003bac:	f7ff ff0c 	bl	80039c8 <move_window>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f040 808d 	bne.w	8003cd2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	1c5a      	adds	r2, r3, #1
 8003bbc:	60fa      	str	r2, [r7, #12]
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	8992      	ldrh	r2, [r2, #12]
 8003bc2:	fbb3 f1f2 	udiv	r1, r3, r2
 8003bc6:	fb02 f201 	mul.w	r2, r2, r1
 8003bca:	1a9b      	subs	r3, r3, r2
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	4413      	add	r3, r2
 8003bd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003bd4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	899b      	ldrh	r3, [r3, #12]
 8003bde:	4619      	mov	r1, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003be6:	4413      	add	r3, r2
 8003be8:	4619      	mov	r1, r3
 8003bea:	6938      	ldr	r0, [r7, #16]
 8003bec:	f7ff feec 	bl	80039c8 <move_window>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d16f      	bne.n	8003cd6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	899b      	ldrh	r3, [r3, #12]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c02:	fb02 f201 	mul.w	r2, r2, r1
 8003c06:	1a9b      	subs	r3, r3, r2
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c10:	021b      	lsls	r3, r3, #8
 8003c12:	461a      	mov	r2, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d002      	beq.n	8003c2a <get_fat+0xe8>
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	091b      	lsrs	r3, r3, #4
 8003c28:	e002      	b.n	8003c30 <get_fat+0xee>
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c30:	617b      	str	r3, [r7, #20]
			break;
 8003c32:	e055      	b.n	8003ce0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	899b      	ldrh	r3, [r3, #12]
 8003c3c:	085b      	lsrs	r3, r3, #1
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	4619      	mov	r1, r3
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c48:	4413      	add	r3, r2
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	6938      	ldr	r0, [r7, #16]
 8003c4e:	f7ff febb 	bl	80039c8 <move_window>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d140      	bne.n	8003cda <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	8992      	ldrh	r2, [r2, #12]
 8003c66:	fbb3 f0f2 	udiv	r0, r3, r2
 8003c6a:	fb02 f200 	mul.w	r2, r2, r0
 8003c6e:	1a9b      	subs	r3, r3, r2
 8003c70:	440b      	add	r3, r1
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7ff fc34 	bl	80034e0 <ld_word>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	617b      	str	r3, [r7, #20]
			break;
 8003c7c:	e030      	b.n	8003ce0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	899b      	ldrh	r3, [r3, #12]
 8003c86:	089b      	lsrs	r3, r3, #2
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c92:	4413      	add	r3, r2
 8003c94:	4619      	mov	r1, r3
 8003c96:	6938      	ldr	r0, [r7, #16]
 8003c98:	f7ff fe96 	bl	80039c8 <move_window>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d11d      	bne.n	8003cde <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	8992      	ldrh	r2, [r2, #12]
 8003cb0:	fbb3 f0f2 	udiv	r0, r3, r2
 8003cb4:	fb02 f200 	mul.w	r2, r2, r0
 8003cb8:	1a9b      	subs	r3, r3, r2
 8003cba:	440b      	add	r3, r1
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7ff fc27 	bl	8003510 <ld_dword>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003cc8:	617b      	str	r3, [r7, #20]
			break;
 8003cca:	e009      	b.n	8003ce0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003ccc:	2301      	movs	r3, #1
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	e006      	b.n	8003ce0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003cd2:	bf00      	nop
 8003cd4:	e004      	b.n	8003ce0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003cd6:	bf00      	nop
 8003cd8:	e002      	b.n	8003ce0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003cda:	bf00      	nop
 8003cdc:	e000      	b.n	8003ce0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003cde:	bf00      	nop
		}
	}

	return val;
 8003ce0:	697b      	ldr	r3, [r7, #20]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3718      	adds	r7, #24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8003cea:	b590      	push	{r4, r7, lr}
 8003cec:	b089      	sub	sp, #36	; 0x24
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	60f8      	str	r0, [r7, #12]
 8003cf2:	60b9      	str	r1, [r7, #8]
 8003cf4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	f240 8102 	bls.w	8003f06 <put_fat+0x21c>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	f080 80fc 	bcs.w	8003f06 <put_fat+0x21c>
		switch (fs->fs_type) {
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	f000 80b6 	beq.w	8003e84 <put_fat+0x19a>
 8003d18:	2b03      	cmp	r3, #3
 8003d1a:	f300 80fd 	bgt.w	8003f18 <put_fat+0x22e>
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d003      	beq.n	8003d2a <put_fat+0x40>
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	f000 8083 	beq.w	8003e2e <put_fat+0x144>
 8003d28:	e0f6      	b.n	8003f18 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	085b      	lsrs	r3, r3, #1
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	4413      	add	r3, r2
 8003d36:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	899b      	ldrh	r3, [r3, #12]
 8003d40:	4619      	mov	r1, r3
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d48:	4413      	add	r3, r2
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f7ff fe3b 	bl	80039c8 <move_window>
 8003d52:	4603      	mov	r3, r0
 8003d54:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003d56:	7ffb      	ldrb	r3, [r7, #31]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f040 80d6 	bne.w	8003f0a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	1c5a      	adds	r2, r3, #1
 8003d68:	61ba      	str	r2, [r7, #24]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	8992      	ldrh	r2, [r2, #12]
 8003d6e:	fbb3 f0f2 	udiv	r0, r3, r2
 8003d72:	fb02 f200 	mul.w	r2, r2, r0
 8003d76:	1a9b      	subs	r3, r3, r2
 8003d78:	440b      	add	r3, r1
 8003d7a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00d      	beq.n	8003da2 <put_fat+0xb8>
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	b25b      	sxtb	r3, r3
 8003d8c:	f003 030f 	and.w	r3, r3, #15
 8003d90:	b25a      	sxtb	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	b25b      	sxtb	r3, r3
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	b25b      	sxtb	r3, r3
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	e001      	b.n	8003da6 <put_fat+0xbc>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2201      	movs	r2, #1
 8003dae:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	899b      	ldrh	r3, [r3, #12]
 8003db8:	4619      	mov	r1, r3
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dc0:	4413      	add	r3, r2
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f7ff fdff 	bl	80039c8 <move_window>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003dce:	7ffb      	ldrb	r3, [r7, #31]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f040 809c 	bne.w	8003f0e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	899b      	ldrh	r3, [r3, #12]
 8003de0:	461a      	mov	r2, r3
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	fbb3 f0f2 	udiv	r0, r3, r2
 8003de8:	fb02 f200 	mul.w	r2, r2, r0
 8003dec:	1a9b      	subs	r3, r3, r2
 8003dee:	440b      	add	r3, r1
 8003df0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <put_fat+0x11a>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	091b      	lsrs	r3, r3, #4
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	e00e      	b.n	8003e22 <put_fat+0x138>
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	b25b      	sxtb	r3, r3
 8003e0a:	f023 030f 	bic.w	r3, r3, #15
 8003e0e:	b25a      	sxtb	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	0a1b      	lsrs	r3, r3, #8
 8003e14:	b25b      	sxtb	r3, r3
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	b25b      	sxtb	r3, r3
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	b25b      	sxtb	r3, r3
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	70da      	strb	r2, [r3, #3]
			break;
 8003e2c:	e074      	b.n	8003f18 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	899b      	ldrh	r3, [r3, #12]
 8003e36:	085b      	lsrs	r3, r3, #1
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e42:	4413      	add	r3, r2
 8003e44:	4619      	mov	r1, r3
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f7ff fdbe 	bl	80039c8 <move_window>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003e50:	7ffb      	ldrb	r3, [r7, #31]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d15d      	bne.n	8003f12 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	8992      	ldrh	r2, [r2, #12]
 8003e64:	fbb3 f0f2 	udiv	r0, r3, r2
 8003e68:	fb02 f200 	mul.w	r2, r2, r0
 8003e6c:	1a9b      	subs	r3, r3, r2
 8003e6e:	440b      	add	r3, r1
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	b292      	uxth	r2, r2
 8003e74:	4611      	mov	r1, r2
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7ff fb6d 	bl	8003556 <st_word>
			fs->wflag = 1;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	70da      	strb	r2, [r3, #3]
			break;
 8003e82:	e049      	b.n	8003f18 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	899b      	ldrh	r3, [r3, #12]
 8003e8c:	089b      	lsrs	r3, r3, #2
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	4619      	mov	r1, r3
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e98:	4413      	add	r3, r2
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f7ff fd93 	bl	80039c8 <move_window>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003ea6:	7ffb      	ldrb	r3, [r7, #31]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d134      	bne.n	8003f16 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	8992      	ldrh	r2, [r2, #12]
 8003ec0:	fbb3 f0f2 	udiv	r0, r3, r2
 8003ec4:	fb02 f200 	mul.w	r2, r2, r0
 8003ec8:	1a9b      	subs	r3, r3, r2
 8003eca:	440b      	add	r3, r1
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7ff fb1f 	bl	8003510 <ld_dword>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003ed8:	4323      	orrs	r3, r4
 8003eda:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	8992      	ldrh	r2, [r2, #12]
 8003eea:	fbb3 f0f2 	udiv	r0, r3, r2
 8003eee:	fb02 f200 	mul.w	r2, r2, r0
 8003ef2:	1a9b      	subs	r3, r3, r2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7ff fb47 	bl	800358c <st_dword>
			fs->wflag = 1;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2201      	movs	r2, #1
 8003f02:	70da      	strb	r2, [r3, #3]
			break;
 8003f04:	e008      	b.n	8003f18 <put_fat+0x22e>
		}
	}
 8003f06:	bf00      	nop
 8003f08:	e006      	b.n	8003f18 <put_fat+0x22e>
			if (res != FR_OK) break;
 8003f0a:	bf00      	nop
 8003f0c:	e004      	b.n	8003f18 <put_fat+0x22e>
			if (res != FR_OK) break;
 8003f0e:	bf00      	nop
 8003f10:	e002      	b.n	8003f18 <put_fat+0x22e>
			if (res != FR_OK) break;
 8003f12:	bf00      	nop
 8003f14:	e000      	b.n	8003f18 <put_fat+0x22e>
			if (res != FR_OK) break;
 8003f16:	bf00      	nop
	return res;
 8003f18:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3724      	adds	r7, #36	; 0x24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd90      	pop	{r4, r7, pc}

08003f22 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b088      	sub	sp, #32
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	60f8      	str	r0, [r7, #12]
 8003f2a:	60b9      	str	r1, [r7, #8]
 8003f2c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d904      	bls.n	8003f48 <remove_chain+0x26>
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d301      	bcc.n	8003f4c <remove_chain+0x2a>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	e04b      	b.n	8003fe4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00c      	beq.n	8003f6c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8003f52:	f04f 32ff 	mov.w	r2, #4294967295
 8003f56:	6879      	ldr	r1, [r7, #4]
 8003f58:	69b8      	ldr	r0, [r7, #24]
 8003f5a:	f7ff fec6 	bl	8003cea <put_fat>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8003f62:	7ffb      	ldrb	r3, [r7, #31]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <remove_chain+0x4a>
 8003f68:	7ffb      	ldrb	r3, [r7, #31]
 8003f6a:	e03b      	b.n	8003fe4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8003f6c:	68b9      	ldr	r1, [r7, #8]
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f7ff fde7 	bl	8003b42 <get_fat>
 8003f74:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d031      	beq.n	8003fe0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d101      	bne.n	8003f86 <remove_chain+0x64>
 8003f82:	2302      	movs	r3, #2
 8003f84:	e02e      	b.n	8003fe4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8c:	d101      	bne.n	8003f92 <remove_chain+0x70>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e028      	b.n	8003fe4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003f92:	2200      	movs	r2, #0
 8003f94:	68b9      	ldr	r1, [r7, #8]
 8003f96:	69b8      	ldr	r0, [r7, #24]
 8003f98:	f7ff fea7 	bl	8003cea <put_fat>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8003fa0:	7ffb      	ldrb	r3, [r7, #31]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <remove_chain+0x88>
 8003fa6:	7ffb      	ldrb	r3, [r7, #31]
 8003fa8:	e01c      	b.n	8003fe4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	699a      	ldr	r2, [r3, #24]
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	3b02      	subs	r3, #2
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d20b      	bcs.n	8003fd0 <remove_chain+0xae>
			fs->free_clst++;
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	791b      	ldrb	r3, [r3, #4]
 8003fc6:	f043 0301 	orr.w	r3, r3, #1
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	69db      	ldr	r3, [r3, #28]
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d3c6      	bcc.n	8003f6c <remove_chain+0x4a>
 8003fde:	e000      	b.n	8003fe2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8003fe0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3720      	adds	r7, #32
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b088      	sub	sp, #32
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10d      	bne.n	800401e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d004      	beq.n	8004018 <create_chain+0x2c>
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	429a      	cmp	r2, r3
 8004016:	d31b      	bcc.n	8004050 <create_chain+0x64>
 8004018:	2301      	movs	r3, #1
 800401a:	61bb      	str	r3, [r7, #24]
 800401c:	e018      	b.n	8004050 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800401e:	6839      	ldr	r1, [r7, #0]
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7ff fd8e 	bl	8003b42 <get_fat>
 8004026:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d801      	bhi.n	8004032 <create_chain+0x46>
 800402e:	2301      	movs	r3, #1
 8004030:	e070      	b.n	8004114 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004038:	d101      	bne.n	800403e <create_chain+0x52>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	e06a      	b.n	8004114 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	429a      	cmp	r2, r3
 8004046:	d201      	bcs.n	800404c <create_chain+0x60>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	e063      	b.n	8004114 <create_chain+0x128>
		scl = clst;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	3301      	adds	r3, #1
 8004058:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	69fa      	ldr	r2, [r7, #28]
 8004060:	429a      	cmp	r2, r3
 8004062:	d307      	bcc.n	8004074 <create_chain+0x88>
				ncl = 2;
 8004064:	2302      	movs	r3, #2
 8004066:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004068:	69fa      	ldr	r2, [r7, #28]
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	429a      	cmp	r2, r3
 800406e:	d901      	bls.n	8004074 <create_chain+0x88>
 8004070:	2300      	movs	r3, #0
 8004072:	e04f      	b.n	8004114 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004074:	69f9      	ldr	r1, [r7, #28]
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7ff fd63 	bl	8003b42 <get_fat>
 800407c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00e      	beq.n	80040a2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d003      	beq.n	8004092 <create_chain+0xa6>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004090:	d101      	bne.n	8004096 <create_chain+0xaa>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	e03e      	b.n	8004114 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004096:	69fa      	ldr	r2, [r7, #28]
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	429a      	cmp	r2, r3
 800409c:	d1da      	bne.n	8004054 <create_chain+0x68>
 800409e:	2300      	movs	r3, #0
 80040a0:	e038      	b.n	8004114 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80040a2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80040a4:	f04f 32ff 	mov.w	r2, #4294967295
 80040a8:	69f9      	ldr	r1, [r7, #28]
 80040aa:	6938      	ldr	r0, [r7, #16]
 80040ac:	f7ff fe1d 	bl	8003cea <put_fat>
 80040b0:	4603      	mov	r3, r0
 80040b2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80040b4:	7dfb      	ldrb	r3, [r7, #23]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d109      	bne.n	80040ce <create_chain+0xe2>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d006      	beq.n	80040ce <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80040c0:	69fa      	ldr	r2, [r7, #28]
 80040c2:	6839      	ldr	r1, [r7, #0]
 80040c4:	6938      	ldr	r0, [r7, #16]
 80040c6:	f7ff fe10 	bl	8003cea <put_fat>
 80040ca:	4603      	mov	r3, r0
 80040cc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80040ce:	7dfb      	ldrb	r3, [r7, #23]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d116      	bne.n	8004102 <create_chain+0x116>
		fs->last_clst = ncl;
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	69fa      	ldr	r2, [r7, #28]
 80040d8:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	699a      	ldr	r2, [r3, #24]
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	3b02      	subs	r3, #2
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d804      	bhi.n	80040f2 <create_chain+0x106>
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	1e5a      	subs	r2, r3, #1
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	791b      	ldrb	r3, [r3, #4]
 80040f6:	f043 0301 	orr.w	r3, r3, #1
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	711a      	strb	r2, [r3, #4]
 8004100:	e007      	b.n	8004112 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004102:	7dfb      	ldrb	r3, [r7, #23]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d102      	bne.n	800410e <create_chain+0x122>
 8004108:	f04f 33ff 	mov.w	r3, #4294967295
 800410c:	e000      	b.n	8004110 <create_chain+0x124>
 800410e:	2301      	movs	r3, #1
 8004110:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004112:	69fb      	ldr	r3, [r7, #28]
}
 8004114:	4618      	mov	r0, r3
 8004116:	3720      	adds	r7, #32
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800411c:	b480      	push	{r7}
 800411e:	b087      	sub	sp, #28
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	3304      	adds	r3, #4
 8004132:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	899b      	ldrh	r3, [r3, #12]
 8004138:	461a      	mov	r2, r3
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	8952      	ldrh	r2, [r2, #10]
 8004144:	fbb3 f3f2 	udiv	r3, r3, r2
 8004148:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1d1a      	adds	r2, r3, #4
 800414e:	613a      	str	r2, [r7, #16]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <clmt_clust+0x42>
 800415a:	2300      	movs	r3, #0
 800415c:	e010      	b.n	8004180 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	429a      	cmp	r2, r3
 8004164:	d307      	bcc.n	8004176 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	617b      	str	r3, [r7, #20]
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	3304      	adds	r3, #4
 8004172:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004174:	e7e9      	b.n	800414a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004176:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	4413      	add	r3, r2
}
 8004180:	4618      	mov	r0, r3
 8004182:	371c      	adds	r7, #28
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041a2:	d204      	bcs.n	80041ae <dir_sdi+0x22>
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	f003 031f 	and.w	r3, r3, #31
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80041ae:	2302      	movs	r3, #2
 80041b0:	e071      	b.n	8004296 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d106      	bne.n	80041d2 <dir_sdi+0x46>
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d902      	bls.n	80041d2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10c      	bne.n	80041f2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	095b      	lsrs	r3, r3, #5
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	8912      	ldrh	r2, [r2, #8]
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d301      	bcc.n	80041e8 <dir_sdi+0x5c>
 80041e4:	2302      	movs	r3, #2
 80041e6:	e056      	b.n	8004296 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	61da      	str	r2, [r3, #28]
 80041f0:	e02d      	b.n	800424e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	895b      	ldrh	r3, [r3, #10]
 80041f6:	461a      	mov	r2, r3
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	899b      	ldrh	r3, [r3, #12]
 80041fc:	fb03 f302 	mul.w	r3, r3, r2
 8004200:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004202:	e019      	b.n	8004238 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6979      	ldr	r1, [r7, #20]
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff fc9a 	bl	8003b42 <get_fat>
 800420e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004216:	d101      	bne.n	800421c <dir_sdi+0x90>
 8004218:	2301      	movs	r3, #1
 800421a:	e03c      	b.n	8004296 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d904      	bls.n	800422c <dir_sdi+0xa0>
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	429a      	cmp	r2, r3
 800422a:	d301      	bcc.n	8004230 <dir_sdi+0xa4>
 800422c:	2302      	movs	r3, #2
 800422e:	e032      	b.n	8004296 <dir_sdi+0x10a>
			ofs -= csz;
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	429a      	cmp	r2, r3
 800423e:	d2e1      	bcs.n	8004204 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8004240:	6979      	ldr	r1, [r7, #20]
 8004242:	6938      	ldr	r0, [r7, #16]
 8004244:	f7ff fc5e 	bl	8003b04 <clust2sect>
 8004248:	4602      	mov	r2, r0
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	69db      	ldr	r3, [r3, #28]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <dir_sdi+0xd4>
 800425c:	2302      	movs	r3, #2
 800425e:	e01a      	b.n	8004296 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	69da      	ldr	r2, [r3, #28]
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	899b      	ldrh	r3, [r3, #12]
 8004268:	4619      	mov	r1, r3
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004270:	441a      	add	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	899b      	ldrh	r3, [r3, #12]
 8004280:	461a      	mov	r2, r3
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	fbb3 f0f2 	udiv	r0, r3, r2
 8004288:	fb02 f200 	mul.w	r2, r2, r0
 800428c:	1a9b      	subs	r3, r3, r2
 800428e:	18ca      	adds	r2, r1, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b086      	sub	sp, #24
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	3320      	adds	r3, #32
 80042b4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <dir_next+0x28>
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042c4:	d301      	bcc.n	80042ca <dir_next+0x2c>
 80042c6:	2304      	movs	r3, #4
 80042c8:	e0bb      	b.n	8004442 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	899b      	ldrh	r3, [r3, #12]
 80042ce:	461a      	mov	r2, r3
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80042d6:	fb02 f201 	mul.w	r2, r2, r1
 80042da:	1a9b      	subs	r3, r3, r2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f040 809d 	bne.w	800441c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	1c5a      	adds	r2, r3, #1
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10b      	bne.n	800430c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	095b      	lsrs	r3, r3, #5
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	8912      	ldrh	r2, [r2, #8]
 80042fc:	4293      	cmp	r3, r2
 80042fe:	f0c0 808d 	bcc.w	800441c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	61da      	str	r2, [r3, #28]
 8004308:	2304      	movs	r3, #4
 800430a:	e09a      	b.n	8004442 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	899b      	ldrh	r3, [r3, #12]
 8004310:	461a      	mov	r2, r3
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	fbb3 f3f2 	udiv	r3, r3, r2
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	8952      	ldrh	r2, [r2, #10]
 800431c:	3a01      	subs	r2, #1
 800431e:	4013      	ands	r3, r2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d17b      	bne.n	800441c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	4619      	mov	r1, r3
 800432c:	4610      	mov	r0, r2
 800432e:	f7ff fc08 	bl	8003b42 <get_fat>
 8004332:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d801      	bhi.n	800433e <dir_next+0xa0>
 800433a:	2302      	movs	r3, #2
 800433c:	e081      	b.n	8004442 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004344:	d101      	bne.n	800434a <dir_next+0xac>
 8004346:	2301      	movs	r3, #1
 8004348:	e07b      	b.n	8004442 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	429a      	cmp	r2, r3
 8004352:	d359      	bcc.n	8004408 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d104      	bne.n	8004364 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	61da      	str	r2, [r3, #28]
 8004360:	2304      	movs	r3, #4
 8004362:	e06e      	b.n	8004442 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	4619      	mov	r1, r3
 800436c:	4610      	mov	r0, r2
 800436e:	f7ff fe3d 	bl	8003fec <create_chain>
 8004372:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <dir_next+0xe0>
 800437a:	2307      	movs	r3, #7
 800437c:	e061      	b.n	8004442 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d101      	bne.n	8004388 <dir_next+0xea>
 8004384:	2302      	movs	r3, #2
 8004386:	e05c      	b.n	8004442 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438e:	d101      	bne.n	8004394 <dir_next+0xf6>
 8004390:	2301      	movs	r3, #1
 8004392:	e056      	b.n	8004442 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f7ff fad3 	bl	8003940 <sync_window>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <dir_next+0x106>
 80043a0:	2301      	movs	r3, #1
 80043a2:	e04e      	b.n	8004442 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	899b      	ldrh	r3, [r3, #12]
 80043ae:	461a      	mov	r2, r3
 80043b0:	2100      	movs	r1, #0
 80043b2:	f7ff f938 	bl	8003626 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80043b6:	2300      	movs	r3, #0
 80043b8:	613b      	str	r3, [r7, #16]
 80043ba:	6979      	ldr	r1, [r7, #20]
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f7ff fba1 	bl	8003b04 <clust2sect>
 80043c2:	4602      	mov	r2, r0
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	635a      	str	r2, [r3, #52]	; 0x34
 80043c8:	e012      	b.n	80043f0 <dir_next+0x152>
						fs->wflag = 1;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2201      	movs	r2, #1
 80043ce:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f7ff fab5 	bl	8003940 <sync_window>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <dir_next+0x142>
 80043dc:	2301      	movs	r3, #1
 80043de:	e030      	b.n	8004442 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	3301      	adds	r3, #1
 80043e4:	613b      	str	r3, [r7, #16]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ea:	1c5a      	adds	r2, r3, #1
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	635a      	str	r2, [r3, #52]	; 0x34
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	895b      	ldrh	r3, [r3, #10]
 80043f4:	461a      	mov	r2, r3
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d3e6      	bcc.n	80043ca <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad2      	subs	r2, r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800440e:	6979      	ldr	r1, [r7, #20]
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f7ff fb77 	bl	8003b04 <clust2sect>
 8004416:	4602      	mov	r2, r0
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	899b      	ldrh	r3, [r3, #12]
 800442c:	461a      	mov	r2, r3
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	fbb3 f0f2 	udiv	r0, r3, r2
 8004434:	fb02 f200 	mul.w	r2, r2, r0
 8004438:	1a9b      	subs	r3, r3, r2
 800443a:	18ca      	adds	r2, r1, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3718      	adds	r7, #24
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b086      	sub	sp, #24
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
 8004452:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800445a:	2100      	movs	r1, #0
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7ff fe95 	bl	800418c <dir_sdi>
 8004462:	4603      	mov	r3, r0
 8004464:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004466:	7dfb      	ldrb	r3, [r7, #23]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d12b      	bne.n	80044c4 <dir_alloc+0x7a>
		n = 0;
 800446c:	2300      	movs	r3, #0
 800446e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	69db      	ldr	r3, [r3, #28]
 8004474:	4619      	mov	r1, r3
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f7ff faa6 	bl	80039c8 <move_window>
 800447c:	4603      	mov	r3, r0
 800447e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004480:	7dfb      	ldrb	r3, [r7, #23]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d11d      	bne.n	80044c2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	2be5      	cmp	r3, #229	; 0xe5
 800448e:	d004      	beq.n	800449a <dir_alloc+0x50>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d107      	bne.n	80044aa <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	3301      	adds	r3, #1
 800449e:	613b      	str	r3, [r7, #16]
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d102      	bne.n	80044ae <dir_alloc+0x64>
 80044a8:	e00c      	b.n	80044c4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80044aa:	2300      	movs	r3, #0
 80044ac:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80044ae:	2101      	movs	r1, #1
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f7ff fef4 	bl	800429e <dir_next>
 80044b6:	4603      	mov	r3, r0
 80044b8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80044ba:	7dfb      	ldrb	r3, [r7, #23]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0d7      	beq.n	8004470 <dir_alloc+0x26>
 80044c0:	e000      	b.n	80044c4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80044c2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80044c4:	7dfb      	ldrb	r3, [r7, #23]
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d101      	bne.n	80044ce <dir_alloc+0x84>
 80044ca:	2307      	movs	r3, #7
 80044cc:	75fb      	strb	r3, [r7, #23]
	return res;
 80044ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	331a      	adds	r3, #26
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fe fffa 	bl	80034e0 <ld_word>
 80044ec:	4603      	mov	r3, r0
 80044ee:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	2b03      	cmp	r3, #3
 80044f6:	d109      	bne.n	800450c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	3314      	adds	r3, #20
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fe ffef 	bl	80034e0 <ld_word>
 8004502:	4603      	mov	r3, r0
 8004504:	041b      	lsls	r3, r3, #16
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	4313      	orrs	r3, r2
 800450a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800450c:	68fb      	ldr	r3, [r7, #12]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b084      	sub	sp, #16
 800451a:	af00      	add	r7, sp, #0
 800451c:	60f8      	str	r0, [r7, #12]
 800451e:	60b9      	str	r1, [r7, #8]
 8004520:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	331a      	adds	r3, #26
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	b292      	uxth	r2, r2
 800452a:	4611      	mov	r1, r2
 800452c:	4618      	mov	r0, r3
 800452e:	f7ff f812 	bl	8003556 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	2b03      	cmp	r3, #3
 8004538:	d109      	bne.n	800454e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	f103 0214 	add.w	r2, r3, #20
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	0c1b      	lsrs	r3, r3, #16
 8004544:	b29b      	uxth	r3, r3
 8004546:	4619      	mov	r1, r3
 8004548:	4610      	mov	r0, r2
 800454a:	f7ff f804 	bl	8003556 <st_word>
	}
}
 800454e:	bf00      	nop
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
	...

08004558 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8004558:	b590      	push	{r4, r7, lr}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	331a      	adds	r3, #26
 8004566:	4618      	mov	r0, r3
 8004568:	f7fe ffba 	bl	80034e0 <ld_word>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <cmp_lfn+0x1e>
 8004572:	2300      	movs	r3, #0
 8004574:	e059      	b.n	800462a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800457e:	1e5a      	subs	r2, r3, #1
 8004580:	4613      	mov	r3, r2
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	4413      	add	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800458c:	2301      	movs	r3, #1
 800458e:	81fb      	strh	r3, [r7, #14]
 8004590:	2300      	movs	r3, #0
 8004592:	613b      	str	r3, [r7, #16]
 8004594:	e033      	b.n	80045fe <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8004596:	4a27      	ldr	r2, [pc, #156]	; (8004634 <cmp_lfn+0xdc>)
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	4413      	add	r3, r2
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	461a      	mov	r2, r3
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	4413      	add	r3, r2
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7fe ff9b 	bl	80034e0 <ld_word>
 80045aa:	4603      	mov	r3, r0
 80045ac:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80045ae:	89fb      	ldrh	r3, [r7, #14]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d01a      	beq.n	80045ea <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	2bfe      	cmp	r3, #254	; 0xfe
 80045b8:	d812      	bhi.n	80045e0 <cmp_lfn+0x88>
 80045ba:	89bb      	ldrh	r3, [r7, #12]
 80045bc:	4618      	mov	r0, r3
 80045be:	f001 fe9f 	bl	8006300 <ff_wtoupper>
 80045c2:	4603      	mov	r3, r0
 80045c4:	461c      	mov	r4, r3
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	1c5a      	adds	r2, r3, #1
 80045ca:	617a      	str	r2, [r7, #20]
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	4413      	add	r3, r2
 80045d2:	881b      	ldrh	r3, [r3, #0]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f001 fe93 	bl	8006300 <ff_wtoupper>
 80045da:	4603      	mov	r3, r0
 80045dc:	429c      	cmp	r4, r3
 80045de:	d001      	beq.n	80045e4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80045e0:	2300      	movs	r3, #0
 80045e2:	e022      	b.n	800462a <cmp_lfn+0xd2>
			}
			wc = uc;
 80045e4:	89bb      	ldrh	r3, [r7, #12]
 80045e6:	81fb      	strh	r3, [r7, #14]
 80045e8:	e006      	b.n	80045f8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80045ea:	89bb      	ldrh	r3, [r7, #12]
 80045ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d001      	beq.n	80045f8 <cmp_lfn+0xa0>
 80045f4:	2300      	movs	r3, #0
 80045f6:	e018      	b.n	800462a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	3301      	adds	r3, #1
 80045fc:	613b      	str	r3, [r7, #16]
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	2b0c      	cmp	r3, #12
 8004602:	d9c8      	bls.n	8004596 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00b      	beq.n	8004628 <cmp_lfn+0xd0>
 8004610:	89fb      	ldrh	r3, [r7, #14]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d008      	beq.n	8004628 <cmp_lfn+0xd0>
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	4413      	add	r3, r2
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <cmp_lfn+0xd0>
 8004624:	2300      	movs	r3, #0
 8004626:	e000      	b.n	800462a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8004628:	2301      	movs	r3, #1
}
 800462a:	4618      	mov	r0, r3
 800462c:	371c      	adds	r7, #28
 800462e:	46bd      	mov	sp, r7
 8004630:	bd90      	pop	{r4, r7, pc}
 8004632:	bf00      	nop
 8004634:	08006dfc 	.word	0x08006dfc

08004638 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b088      	sub	sp, #32
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	4611      	mov	r1, r2
 8004644:	461a      	mov	r2, r3
 8004646:	460b      	mov	r3, r1
 8004648:	71fb      	strb	r3, [r7, #7]
 800464a:	4613      	mov	r3, r2
 800464c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	330d      	adds	r3, #13
 8004652:	79ba      	ldrb	r2, [r7, #6]
 8004654:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	330b      	adds	r3, #11
 800465a:	220f      	movs	r2, #15
 800465c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	330c      	adds	r3, #12
 8004662:	2200      	movs	r2, #0
 8004664:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	331a      	adds	r3, #26
 800466a:	2100      	movs	r1, #0
 800466c:	4618      	mov	r0, r3
 800466e:	f7fe ff72 	bl	8003556 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8004672:	79fb      	ldrb	r3, [r7, #7]
 8004674:	1e5a      	subs	r2, r3, #1
 8004676:	4613      	mov	r3, r2
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	4413      	add	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4413      	add	r3, r2
 8004680:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8004682:	2300      	movs	r3, #0
 8004684:	82fb      	strh	r3, [r7, #22]
 8004686:	2300      	movs	r3, #0
 8004688:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800468a:	8afb      	ldrh	r3, [r7, #22]
 800468c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004690:	4293      	cmp	r3, r2
 8004692:	d007      	beq.n	80046a4 <put_lfn+0x6c>
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	61fa      	str	r2, [r7, #28]
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	4413      	add	r3, r2
 80046a0:	881b      	ldrh	r3, [r3, #0]
 80046a2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80046a4:	4a17      	ldr	r2, [pc, #92]	; (8004704 <put_lfn+0xcc>)
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	4413      	add	r3, r2
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	461a      	mov	r2, r3
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	4413      	add	r3, r2
 80046b2:	8afa      	ldrh	r2, [r7, #22]
 80046b4:	4611      	mov	r1, r2
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7fe ff4d 	bl	8003556 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80046bc:	8afb      	ldrh	r3, [r7, #22]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d102      	bne.n	80046c8 <put_lfn+0x90>
 80046c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046c6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	3301      	adds	r3, #1
 80046cc:	61bb      	str	r3, [r7, #24]
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	2b0c      	cmp	r3, #12
 80046d2:	d9da      	bls.n	800468a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80046d4:	8afb      	ldrh	r3, [r7, #22]
 80046d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046da:	4293      	cmp	r3, r2
 80046dc:	d006      	beq.n	80046ec <put_lfn+0xb4>
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	4413      	add	r3, r2
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d103      	bne.n	80046f4 <put_lfn+0xbc>
 80046ec:	79fb      	ldrb	r3, [r7, #7]
 80046ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046f2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	79fa      	ldrb	r2, [r7, #7]
 80046f8:	701a      	strb	r2, [r3, #0]
}
 80046fa:	bf00      	nop
 80046fc:	3720      	adds	r7, #32
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	08006dfc 	.word	0x08006dfc

08004708 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b08c      	sub	sp, #48	; 0x30
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
 8004714:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8004716:	220b      	movs	r2, #11
 8004718:	68b9      	ldr	r1, [r7, #8]
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f7fe ff62 	bl	80035e4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	2b05      	cmp	r3, #5
 8004724:	d92b      	bls.n	800477e <gen_numname+0x76>
		sr = seq;
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800472a:	e022      	b.n	8004772 <gen_numname+0x6a>
			wc = *lfn++;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	1c9a      	adds	r2, r3, #2
 8004730:	607a      	str	r2, [r7, #4]
 8004732:	881b      	ldrh	r3, [r3, #0]
 8004734:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8004736:	2300      	movs	r3, #0
 8004738:	62bb      	str	r3, [r7, #40]	; 0x28
 800473a:	e017      	b.n	800476c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	005a      	lsls	r2, r3, #1
 8004740:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	4413      	add	r3, r2
 8004748:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800474a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800474c:	085b      	lsrs	r3, r3, #1
 800474e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d005      	beq.n	8004766 <gen_numname+0x5e>
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8004760:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8004764:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8004766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004768:	3301      	adds	r3, #1
 800476a:	62bb      	str	r3, [r7, #40]	; 0x28
 800476c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476e:	2b0f      	cmp	r3, #15
 8004770:	d9e4      	bls.n	800473c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	881b      	ldrh	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1d8      	bne.n	800472c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800477e:	2307      	movs	r3, #7
 8004780:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	b2db      	uxtb	r3, r3
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	b2db      	uxtb	r3, r3
 800478c:	3330      	adds	r3, #48	; 0x30
 800478e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8004792:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004796:	2b39      	cmp	r3, #57	; 0x39
 8004798:	d904      	bls.n	80047a4 <gen_numname+0x9c>
 800479a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800479e:	3307      	adds	r3, #7
 80047a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80047a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a6:	1e5a      	subs	r2, r3, #1
 80047a8:	62ba      	str	r2, [r7, #40]	; 0x28
 80047aa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80047ae:	4413      	add	r3, r2
 80047b0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80047b4:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	091b      	lsrs	r3, r3, #4
 80047bc:	603b      	str	r3, [r7, #0]
	} while (seq);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1de      	bne.n	8004782 <gen_numname+0x7a>
	ns[i] = '~';
 80047c4:	f107 0214 	add.w	r2, r7, #20
 80047c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ca:	4413      	add	r3, r2
 80047cc:	227e      	movs	r2, #126	; 0x7e
 80047ce:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80047d0:	2300      	movs	r3, #0
 80047d2:	627b      	str	r3, [r7, #36]	; 0x24
 80047d4:	e002      	b.n	80047dc <gen_numname+0xd4>
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	3301      	adds	r3, #1
 80047da:	627b      	str	r3, [r7, #36]	; 0x24
 80047dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d205      	bcs.n	80047f0 <gen_numname+0xe8>
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	4413      	add	r3, r2
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	2b20      	cmp	r3, #32
 80047ee:	d1f2      	bne.n	80047d6 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80047f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f2:	2b07      	cmp	r3, #7
 80047f4:	d808      	bhi.n	8004808 <gen_numname+0x100>
 80047f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80047fc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004800:	4413      	add	r3, r2
 8004802:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8004806:	e000      	b.n	800480a <gen_numname+0x102>
 8004808:	2120      	movs	r1, #32
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	1c5a      	adds	r2, r3, #1
 800480e:	627a      	str	r2, [r7, #36]	; 0x24
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	4413      	add	r3, r2
 8004814:	460a      	mov	r2, r1
 8004816:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	2b07      	cmp	r3, #7
 800481c:	d9e8      	bls.n	80047f0 <gen_numname+0xe8>
}
 800481e:	bf00      	nop
 8004820:	bf00      	nop
 8004822:	3730      	adds	r7, #48	; 0x30
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8004830:	2300      	movs	r3, #0
 8004832:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8004834:	230b      	movs	r3, #11
 8004836:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004838:	7bfb      	ldrb	r3, [r7, #15]
 800483a:	b2da      	uxtb	r2, r3
 800483c:	0852      	lsrs	r2, r2, #1
 800483e:	01db      	lsls	r3, r3, #7
 8004840:	4313      	orrs	r3, r2
 8004842:	b2da      	uxtb	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	1c59      	adds	r1, r3, #1
 8004848:	6079      	str	r1, [r7, #4]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	4413      	add	r3, r2
 800484e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	3b01      	subs	r3, #1
 8004854:	60bb      	str	r3, [r7, #8]
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1ed      	bne.n	8004838 <sum_sfn+0x10>
	return sum;
 800485c:	7bfb      	ldrb	r3, [r7, #15]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b086      	sub	sp, #24
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004878:	2100      	movs	r1, #0
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7ff fc86 	bl	800418c <dir_sdi>
 8004880:	4603      	mov	r3, r0
 8004882:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004884:	7dfb      	ldrb	r3, [r7, #23]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <dir_find+0x24>
 800488a:	7dfb      	ldrb	r3, [r7, #23]
 800488c:	e0a9      	b.n	80049e2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800488e:	23ff      	movs	r3, #255	; 0xff
 8004890:	753b      	strb	r3, [r7, #20]
 8004892:	7d3b      	ldrb	r3, [r7, #20]
 8004894:	757b      	strb	r3, [r7, #21]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f04f 32ff 	mov.w	r2, #4294967295
 800489c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	4619      	mov	r1, r3
 80048a4:	6938      	ldr	r0, [r7, #16]
 80048a6:	f7ff f88f 	bl	80039c8 <move_window>
 80048aa:	4603      	mov	r3, r0
 80048ac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80048ae:	7dfb      	ldrb	r3, [r7, #23]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f040 8090 	bne.w	80049d6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80048be:	7dbb      	ldrb	r3, [r7, #22]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d102      	bne.n	80048ca <dir_find+0x60>
 80048c4:	2304      	movs	r3, #4
 80048c6:	75fb      	strb	r3, [r7, #23]
 80048c8:	e08a      	b.n	80049e0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	330b      	adds	r3, #11
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048d6:	73fb      	strb	r3, [r7, #15]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	7bfa      	ldrb	r2, [r7, #15]
 80048dc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80048de:	7dbb      	ldrb	r3, [r7, #22]
 80048e0:	2be5      	cmp	r3, #229	; 0xe5
 80048e2:	d007      	beq.n	80048f4 <dir_find+0x8a>
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d009      	beq.n	8004902 <dir_find+0x98>
 80048ee:	7bfb      	ldrb	r3, [r7, #15]
 80048f0:	2b0f      	cmp	r3, #15
 80048f2:	d006      	beq.n	8004902 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80048f4:	23ff      	movs	r3, #255	; 0xff
 80048f6:	757b      	strb	r3, [r7, #21]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f04f 32ff 	mov.w	r2, #4294967295
 80048fe:	631a      	str	r2, [r3, #48]	; 0x30
 8004900:	e05e      	b.n	80049c0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8004902:	7bfb      	ldrb	r3, [r7, #15]
 8004904:	2b0f      	cmp	r3, #15
 8004906:	d136      	bne.n	8004976 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800490e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004912:	2b00      	cmp	r3, #0
 8004914:	d154      	bne.n	80049c0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8004916:	7dbb      	ldrb	r3, [r7, #22]
 8004918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00d      	beq.n	800493c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	7b5b      	ldrb	r3, [r3, #13]
 8004926:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8004928:	7dbb      	ldrb	r3, [r7, #22]
 800492a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800492e:	75bb      	strb	r3, [r7, #22]
 8004930:	7dbb      	ldrb	r3, [r7, #22]
 8004932:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	695a      	ldr	r2, [r3, #20]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800493c:	7dba      	ldrb	r2, [r7, #22]
 800493e:	7d7b      	ldrb	r3, [r7, #21]
 8004940:	429a      	cmp	r2, r3
 8004942:	d115      	bne.n	8004970 <dir_find+0x106>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	330d      	adds	r3, #13
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	7d3a      	ldrb	r2, [r7, #20]
 800494e:	429a      	cmp	r2, r3
 8004950:	d10e      	bne.n	8004970 <dir_find+0x106>
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	691a      	ldr	r2, [r3, #16]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	4619      	mov	r1, r3
 800495c:	4610      	mov	r0, r2
 800495e:	f7ff fdfb 	bl	8004558 <cmp_lfn>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d003      	beq.n	8004970 <dir_find+0x106>
 8004968:	7d7b      	ldrb	r3, [r7, #21]
 800496a:	3b01      	subs	r3, #1
 800496c:	b2db      	uxtb	r3, r3
 800496e:	e000      	b.n	8004972 <dir_find+0x108>
 8004970:	23ff      	movs	r3, #255	; 0xff
 8004972:	757b      	strb	r3, [r7, #21]
 8004974:	e024      	b.n	80049c0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8004976:	7d7b      	ldrb	r3, [r7, #21]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d109      	bne.n	8004990 <dir_find+0x126>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	4618      	mov	r0, r3
 8004982:	f7ff ff51 	bl	8004828 <sum_sfn>
 8004986:	4603      	mov	r3, r0
 8004988:	461a      	mov	r2, r3
 800498a:	7d3b      	ldrb	r3, [r7, #20]
 800498c:	4293      	cmp	r3, r2
 800498e:	d024      	beq.n	80049da <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10a      	bne.n	80049b4 <dir_find+0x14a>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a18      	ldr	r0, [r3, #32]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	3324      	adds	r3, #36	; 0x24
 80049a6:	220b      	movs	r2, #11
 80049a8:	4619      	mov	r1, r3
 80049aa:	f7fe fe57 	bl	800365c <mem_cmp>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d014      	beq.n	80049de <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80049b4:	23ff      	movs	r3, #255	; 0xff
 80049b6:	757b      	strb	r3, [r7, #21]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f04f 32ff 	mov.w	r2, #4294967295
 80049be:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80049c0:	2100      	movs	r1, #0
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7ff fc6b 	bl	800429e <dir_next>
 80049c8:	4603      	mov	r3, r0
 80049ca:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80049cc:	7dfb      	ldrb	r3, [r7, #23]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f43f af65 	beq.w	800489e <dir_find+0x34>
 80049d4:	e004      	b.n	80049e0 <dir_find+0x176>
		if (res != FR_OK) break;
 80049d6:	bf00      	nop
 80049d8:	e002      	b.n	80049e0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80049da:	bf00      	nop
 80049dc:	e000      	b.n	80049e0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80049de:	bf00      	nop

	return res;
 80049e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3718      	adds	r7, #24
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
	...

080049ec <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b08c      	sub	sp, #48	; 0x30
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004a00:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <dir_register+0x20>
 8004a08:	2306      	movs	r3, #6
 8004a0a:	e0e0      	b.n	8004bce <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a10:	e002      	b.n	8004a18 <dir_register+0x2c>
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	3301      	adds	r3, #1
 8004a16:	627b      	str	r3, [r7, #36]	; 0x24
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	691a      	ldr	r2, [r3, #16]
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	005b      	lsls	r3, r3, #1
 8004a20:	4413      	add	r3, r2
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1f4      	bne.n	8004a12 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8004a2e:	f107 030c 	add.w	r3, r7, #12
 8004a32:	220c      	movs	r2, #12
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fe fdd5 	bl	80035e4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8004a3a:	7dfb      	ldrb	r3, [r7, #23]
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d032      	beq.n	8004aaa <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2240      	movs	r2, #64	; 0x40
 8004a48:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a50:	e016      	b.n	8004a80 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	691a      	ldr	r2, [r3, #16]
 8004a5c:	f107 010c 	add.w	r1, r7, #12
 8004a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a62:	f7ff fe51 	bl	8004708 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7ff feff 	bl	800486a <dir_find>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8004a72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d106      	bne.n	8004a88 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8004a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a82:	2b63      	cmp	r3, #99	; 0x63
 8004a84:	d9e5      	bls.n	8004a52 <dir_register+0x66>
 8004a86:	e000      	b.n	8004a8a <dir_register+0x9e>
			if (res != FR_OK) break;
 8004a88:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8004a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8c:	2b64      	cmp	r3, #100	; 0x64
 8004a8e:	d101      	bne.n	8004a94 <dir_register+0xa8>
 8004a90:	2307      	movs	r3, #7
 8004a92:	e09c      	b.n	8004bce <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8004a94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d002      	beq.n	8004aa2 <dir_register+0xb6>
 8004a9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004aa0:	e095      	b.n	8004bce <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8004aa2:	7dfa      	ldrb	r2, [r7, #23]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8004aaa:	7dfb      	ldrb	r3, [r7, #23]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d007      	beq.n	8004ac4 <dir_register+0xd8>
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	330c      	adds	r3, #12
 8004ab8:	4a47      	ldr	r2, [pc, #284]	; (8004bd8 <dir_register+0x1ec>)
 8004aba:	fba2 2303 	umull	r2, r3, r2, r3
 8004abe:	089b      	lsrs	r3, r3, #2
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	e000      	b.n	8004ac6 <dir_register+0xda>
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8004ac8:	6a39      	ldr	r1, [r7, #32]
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7ff fcbd 	bl	800444a <dir_alloc>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8004ad6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d148      	bne.n	8004b70 <dir_register+0x184>
 8004ade:	6a3b      	ldr	r3, [r7, #32]
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	623b      	str	r3, [r7, #32]
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d042      	beq.n	8004b70 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	695a      	ldr	r2, [r3, #20]
 8004aee:	6a3b      	ldr	r3, [r7, #32]
 8004af0:	015b      	lsls	r3, r3, #5
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	4619      	mov	r1, r3
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7ff fb48 	bl	800418c <dir_sdi>
 8004afc:	4603      	mov	r3, r0
 8004afe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004b02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d132      	bne.n	8004b70 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3324      	adds	r3, #36	; 0x24
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7ff fe8a 	bl	8004828 <sum_sfn>
 8004b14:	4603      	mov	r3, r0
 8004b16:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	69db      	ldr	r3, [r3, #28]
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	69f8      	ldr	r0, [r7, #28]
 8004b20:	f7fe ff52 	bl	80039c8 <move_window>
 8004b24:	4603      	mov	r3, r0
 8004b26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8004b2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d11d      	bne.n	8004b6e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	6918      	ldr	r0, [r3, #16]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a19      	ldr	r1, [r3, #32]
 8004b3a:	6a3b      	ldr	r3, [r7, #32]
 8004b3c:	b2da      	uxtb	r2, r3
 8004b3e:	7efb      	ldrb	r3, [r7, #27]
 8004b40:	f7ff fd7a 	bl	8004638 <put_lfn>
				fs->wflag = 1;
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	2201      	movs	r2, #1
 8004b48:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7ff fba6 	bl	800429e <dir_next>
 8004b52:	4603      	mov	r3, r0
 8004b54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8004b58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d107      	bne.n	8004b70 <dir_register+0x184>
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	3b01      	subs	r3, #1
 8004b64:	623b      	str	r3, [r7, #32]
 8004b66:	6a3b      	ldr	r3, [r7, #32]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1d5      	bne.n	8004b18 <dir_register+0x12c>
 8004b6c:	e000      	b.n	8004b70 <dir_register+0x184>
				if (res != FR_OK) break;
 8004b6e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004b70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d128      	bne.n	8004bca <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	69db      	ldr	r3, [r3, #28]
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	69f8      	ldr	r0, [r7, #28]
 8004b80:	f7fe ff22 	bl	80039c8 <move_window>
 8004b84:	4603      	mov	r3, r0
 8004b86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004b8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d11b      	bne.n	8004bca <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	2220      	movs	r2, #32
 8004b98:	2100      	movs	r1, #0
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7fe fd43 	bl	8003626 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a18      	ldr	r0, [r3, #32]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	3324      	adds	r3, #36	; 0x24
 8004ba8:	220b      	movs	r2, #11
 8004baa:	4619      	mov	r1, r3
 8004bac:	f7fe fd1a 	bl	80035e4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	330c      	adds	r3, #12
 8004bbc:	f002 0218 	and.w	r2, r2, #24
 8004bc0:	b2d2      	uxtb	r2, r2
 8004bc2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004bca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3730      	adds	r7, #48	; 0x30
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	4ec4ec4f 	.word	0x4ec4ec4f

08004bdc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b08a      	sub	sp, #40	; 0x28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	613b      	str	r3, [r7, #16]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	60fb      	str	r3, [r7, #12]
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	617b      	str	r3, [r7, #20]
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	1c5a      	adds	r2, r3, #1
 8004c00:	61ba      	str	r2, [r7, #24]
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	4413      	add	r3, r2
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8004c0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c0c:	2b1f      	cmp	r3, #31
 8004c0e:	d940      	bls.n	8004c92 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8004c10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c12:	2b2f      	cmp	r3, #47	; 0x2f
 8004c14:	d006      	beq.n	8004c24 <create_name+0x48>
 8004c16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c18:	2b5c      	cmp	r3, #92	; 0x5c
 8004c1a:	d110      	bne.n	8004c3e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004c1c:	e002      	b.n	8004c24 <create_name+0x48>
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	3301      	adds	r3, #1
 8004c22:	61bb      	str	r3, [r7, #24]
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	4413      	add	r3, r2
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	2b2f      	cmp	r3, #47	; 0x2f
 8004c2e:	d0f6      	beq.n	8004c1e <create_name+0x42>
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	4413      	add	r3, r2
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	2b5c      	cmp	r3, #92	; 0x5c
 8004c3a:	d0f0      	beq.n	8004c1e <create_name+0x42>
			break;
 8004c3c:	e02a      	b.n	8004c94 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	2bfe      	cmp	r3, #254	; 0xfe
 8004c42:	d901      	bls.n	8004c48 <create_name+0x6c>
 8004c44:	2306      	movs	r3, #6
 8004c46:	e177      	b.n	8004f38 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8004c48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8004c4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c50:	2101      	movs	r1, #1
 8004c52:	4618      	mov	r0, r3
 8004c54:	f001 fb18 	bl	8006288 <ff_convert>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8004c5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <create_name+0x8a>
 8004c62:	2306      	movs	r3, #6
 8004c64:	e168      	b.n	8004f38 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8004c66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c68:	2b7f      	cmp	r3, #127	; 0x7f
 8004c6a:	d809      	bhi.n	8004c80 <create_name+0xa4>
 8004c6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c6e:	4619      	mov	r1, r3
 8004c70:	48b3      	ldr	r0, [pc, #716]	; (8004f40 <create_name+0x364>)
 8004c72:	f7fe fd1a 	bl	80036aa <chk_chr>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <create_name+0xa4>
 8004c7c:	2306      	movs	r3, #6
 8004c7e:	e15b      	b.n	8004f38 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	617a      	str	r2, [r7, #20]
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004c8e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8004c90:	e7b4      	b.n	8004bfc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8004c92:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	441a      	add	r2, r3
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004c9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ca0:	2b1f      	cmp	r3, #31
 8004ca2:	d801      	bhi.n	8004ca8 <create_name+0xcc>
 8004ca4:	2304      	movs	r3, #4
 8004ca6:	e000      	b.n	8004caa <create_name+0xce>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8004cae:	e011      	b.n	8004cd4 <create_name+0xf8>
		w = lfn[di - 1];
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	881b      	ldrh	r3, [r3, #0]
 8004cc0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8004cc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cc4:	2b20      	cmp	r3, #32
 8004cc6:	d002      	beq.n	8004cce <create_name+0xf2>
 8004cc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cca:	2b2e      	cmp	r3, #46	; 0x2e
 8004ccc:	d106      	bne.n	8004cdc <create_name+0x100>
		di--;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1ea      	bne.n	8004cb0 <create_name+0xd4>
 8004cda:	e000      	b.n	8004cde <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8004cdc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	005b      	lsls	r3, r3, #1
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <create_name+0x118>
 8004cf0:	2306      	movs	r3, #6
 8004cf2:	e121      	b.n	8004f38 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	3324      	adds	r3, #36	; 0x24
 8004cf8:	220b      	movs	r2, #11
 8004cfa:	2120      	movs	r1, #32
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7fe fc92 	bl	8003626 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8004d02:	2300      	movs	r3, #0
 8004d04:	61bb      	str	r3, [r7, #24]
 8004d06:	e002      	b.n	8004d0e <create_name+0x132>
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	61bb      	str	r3, [r7, #24]
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	4413      	add	r3, r2
 8004d16:	881b      	ldrh	r3, [r3, #0]
 8004d18:	2b20      	cmp	r3, #32
 8004d1a:	d0f5      	beq.n	8004d08 <create_name+0x12c>
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	005b      	lsls	r3, r3, #1
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	4413      	add	r3, r2
 8004d24:	881b      	ldrh	r3, [r3, #0]
 8004d26:	2b2e      	cmp	r3, #46	; 0x2e
 8004d28:	d0ee      	beq.n	8004d08 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d009      	beq.n	8004d44 <create_name+0x168>
 8004d30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d34:	f043 0303 	orr.w	r3, r3, #3
 8004d38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8004d3c:	e002      	b.n	8004d44 <create_name+0x168>
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	3b01      	subs	r3, #1
 8004d42:	617b      	str	r3, [r7, #20]
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d009      	beq.n	8004d5e <create_name+0x182>
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004d50:	3b01      	subs	r3, #1
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	4413      	add	r3, r2
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	2b2e      	cmp	r3, #46	; 0x2e
 8004d5c:	d1ef      	bne.n	8004d3e <create_name+0x162>

	i = b = 0; ni = 8;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004d64:	2300      	movs	r3, #0
 8004d66:	623b      	str	r3, [r7, #32]
 8004d68:	2308      	movs	r3, #8
 8004d6a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	1c5a      	adds	r2, r3, #1
 8004d70:	61ba      	str	r2, [r7, #24]
 8004d72:	005b      	lsls	r3, r3, #1
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	4413      	add	r3, r2
 8004d78:	881b      	ldrh	r3, [r3, #0]
 8004d7a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8004d7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 8090 	beq.w	8004ea4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8004d84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d86:	2b20      	cmp	r3, #32
 8004d88:	d006      	beq.n	8004d98 <create_name+0x1bc>
 8004d8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d8c:	2b2e      	cmp	r3, #46	; 0x2e
 8004d8e:	d10a      	bne.n	8004da6 <create_name+0x1ca>
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d006      	beq.n	8004da6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8004d98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d9c:	f043 0303 	orr.w	r3, r3, #3
 8004da0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004da4:	e07d      	b.n	8004ea2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8004da6:	6a3a      	ldr	r2, [r7, #32]
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d203      	bcs.n	8004db6 <create_name+0x1da>
 8004dae:	69ba      	ldr	r2, [r7, #24]
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d123      	bne.n	8004dfe <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	2b0b      	cmp	r3, #11
 8004dba:	d106      	bne.n	8004dca <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8004dbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004dc0:	f043 0303 	orr.w	r3, r3, #3
 8004dc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004dc8:	e06f      	b.n	8004eaa <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8004dca:	69ba      	ldr	r2, [r7, #24]
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d005      	beq.n	8004dde <create_name+0x202>
 8004dd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004dd6:	f043 0303 	orr.w	r3, r3, #3
 8004dda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d860      	bhi.n	8004ea8 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	61bb      	str	r3, [r7, #24]
 8004dea:	2308      	movs	r3, #8
 8004dec:	623b      	str	r3, [r7, #32]
 8004dee:	230b      	movs	r3, #11
 8004df0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8004df2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004dfc:	e051      	b.n	8004ea2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8004dfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e00:	2b7f      	cmp	r3, #127	; 0x7f
 8004e02:	d914      	bls.n	8004e2e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8004e04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e06:	2100      	movs	r1, #0
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f001 fa3d 	bl	8006288 <ff_convert>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8004e12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d004      	beq.n	8004e22 <create_name+0x246>
 8004e18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e1a:	3b80      	subs	r3, #128	; 0x80
 8004e1c:	4a49      	ldr	r2, [pc, #292]	; (8004f44 <create_name+0x368>)
 8004e1e:	5cd3      	ldrb	r3, [r2, r3]
 8004e20:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8004e22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e26:	f043 0302 	orr.w	r3, r3, #2
 8004e2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8004e2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d007      	beq.n	8004e44 <create_name+0x268>
 8004e34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e36:	4619      	mov	r1, r3
 8004e38:	4843      	ldr	r0, [pc, #268]	; (8004f48 <create_name+0x36c>)
 8004e3a:	f7fe fc36 	bl	80036aa <chk_chr>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d008      	beq.n	8004e56 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8004e44:	235f      	movs	r3, #95	; 0x5f
 8004e46:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004e48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e4c:	f043 0303 	orr.w	r3, r3, #3
 8004e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004e54:	e01b      	b.n	8004e8e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8004e56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e58:	2b40      	cmp	r3, #64	; 0x40
 8004e5a:	d909      	bls.n	8004e70 <create_name+0x294>
 8004e5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e5e:	2b5a      	cmp	r3, #90	; 0x5a
 8004e60:	d806      	bhi.n	8004e70 <create_name+0x294>
					b |= 2;
 8004e62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004e66:	f043 0302 	orr.w	r3, r3, #2
 8004e6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004e6e:	e00e      	b.n	8004e8e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8004e70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e72:	2b60      	cmp	r3, #96	; 0x60
 8004e74:	d90b      	bls.n	8004e8e <create_name+0x2b2>
 8004e76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e78:	2b7a      	cmp	r3, #122	; 0x7a
 8004e7a:	d808      	bhi.n	8004e8e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8004e7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004e80:	f043 0301 	orr.w	r3, r3, #1
 8004e84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004e88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e8a:	3b20      	subs	r3, #32
 8004e8c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	1c5a      	adds	r2, r3, #1
 8004e92:	623a      	str	r2, [r7, #32]
 8004e94:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e96:	b2d1      	uxtb	r1, r2
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	460a      	mov	r2, r1
 8004e9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8004ea2:	e763      	b.n	8004d6c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8004ea4:	bf00      	nop
 8004ea6:	e000      	b.n	8004eaa <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8004ea8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004eb0:	2be5      	cmp	r3, #229	; 0xe5
 8004eb2:	d103      	bne.n	8004ebc <create_name+0x2e0>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2205      	movs	r2, #5
 8004eb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d104      	bne.n	8004ecc <create_name+0x2f0>
 8004ec2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8004ecc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004ed0:	f003 030c 	and.w	r3, r3, #12
 8004ed4:	2b0c      	cmp	r3, #12
 8004ed6:	d005      	beq.n	8004ee4 <create_name+0x308>
 8004ed8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004edc:	f003 0303 	and.w	r3, r3, #3
 8004ee0:	2b03      	cmp	r3, #3
 8004ee2:	d105      	bne.n	8004ef0 <create_name+0x314>
 8004ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ee8:	f043 0302 	orr.w	r3, r3, #2
 8004eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8004ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d117      	bne.n	8004f2c <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8004efc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004f00:	f003 0303 	and.w	r3, r3, #3
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d105      	bne.n	8004f14 <create_name+0x338>
 8004f08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f0c:	f043 0310 	orr.w	r3, r3, #16
 8004f10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8004f14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004f18:	f003 030c 	and.w	r3, r3, #12
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	d105      	bne.n	8004f2c <create_name+0x350>
 8004f20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f24:	f043 0308 	orr.w	r3, r3, #8
 8004f28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004f32:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8004f36:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3728      	adds	r7, #40	; 0x28
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	08006d24 	.word	0x08006d24
 8004f44:	08006d7c 	.word	0x08006d7c
 8004f48:	08006d30 	.word	0x08006d30

08004f4c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004f60:	e002      	b.n	8004f68 <follow_path+0x1c>
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	3301      	adds	r3, #1
 8004f66:	603b      	str	r3, [r7, #0]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	2b2f      	cmp	r3, #47	; 0x2f
 8004f6e:	d0f8      	beq.n	8004f62 <follow_path+0x16>
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	2b5c      	cmp	r3, #92	; 0x5c
 8004f76:	d0f4      	beq.n	8004f62 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	2b1f      	cmp	r3, #31
 8004f84:	d80a      	bhi.n	8004f9c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2280      	movs	r2, #128	; 0x80
 8004f8a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8004f8e:	2100      	movs	r1, #0
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f7ff f8fb 	bl	800418c <dir_sdi>
 8004f96:	4603      	mov	r3, r0
 8004f98:	75fb      	strb	r3, [r7, #23]
 8004f9a:	e048      	b.n	800502e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004f9c:	463b      	mov	r3, r7
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f7ff fe1b 	bl	8004bdc <create_name>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004faa:	7dfb      	ldrb	r3, [r7, #23]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d139      	bne.n	8005024 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f7ff fc5a 	bl	800486a <dir_find>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004fc0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004fc2:	7dfb      	ldrb	r3, [r7, #23]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00a      	beq.n	8004fde <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004fc8:	7dfb      	ldrb	r3, [r7, #23]
 8004fca:	2b04      	cmp	r3, #4
 8004fcc:	d12c      	bne.n	8005028 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004fce:	7afb      	ldrb	r3, [r7, #11]
 8004fd0:	f003 0304 	and.w	r3, r3, #4
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d127      	bne.n	8005028 <follow_path+0xdc>
 8004fd8:	2305      	movs	r3, #5
 8004fda:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8004fdc:	e024      	b.n	8005028 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004fde:	7afb      	ldrb	r3, [r7, #11]
 8004fe0:	f003 0304 	and.w	r3, r3, #4
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d121      	bne.n	800502c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	799b      	ldrb	r3, [r3, #6]
 8004fec:	f003 0310 	and.w	r3, r3, #16
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d102      	bne.n	8004ffa <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004ff4:	2305      	movs	r3, #5
 8004ff6:	75fb      	strb	r3, [r7, #23]
 8004ff8:	e019      	b.n	800502e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	8992      	ldrh	r2, [r2, #12]
 8005008:	fbb3 f0f2 	udiv	r0, r3, r2
 800500c:	fb02 f200 	mul.w	r2, r2, r0
 8005010:	1a9b      	subs	r3, r3, r2
 8005012:	440b      	add	r3, r1
 8005014:	4619      	mov	r1, r3
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f7ff fa5e 	bl	80044d8 <ld_clust>
 800501c:	4602      	mov	r2, r0
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005022:	e7bb      	b.n	8004f9c <follow_path+0x50>
			if (res != FR_OK) break;
 8005024:	bf00      	nop
 8005026:	e002      	b.n	800502e <follow_path+0xe2>
				break;
 8005028:	bf00      	nop
 800502a:	e000      	b.n	800502e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800502c:	bf00      	nop
			}
		}
	}

	return res;
 800502e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3718      	adds	r7, #24
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005038:	b480      	push	{r7}
 800503a:	b087      	sub	sp, #28
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005040:	f04f 33ff 	mov.w	r3, #4294967295
 8005044:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d031      	beq.n	80050b2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	617b      	str	r3, [r7, #20]
 8005054:	e002      	b.n	800505c <get_ldnumber+0x24>
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	3301      	adds	r3, #1
 800505a:	617b      	str	r3, [r7, #20]
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	2b1f      	cmp	r3, #31
 8005062:	d903      	bls.n	800506c <get_ldnumber+0x34>
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	2b3a      	cmp	r3, #58	; 0x3a
 800506a:	d1f4      	bne.n	8005056 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	2b3a      	cmp	r3, #58	; 0x3a
 8005072:	d11c      	bne.n	80050ae <get_ldnumber+0x76>
			tp = *path;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	1c5a      	adds	r2, r3, #1
 800507e:	60fa      	str	r2, [r7, #12]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	3b30      	subs	r3, #48	; 0x30
 8005084:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	2b09      	cmp	r3, #9
 800508a:	d80e      	bhi.n	80050aa <get_ldnumber+0x72>
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	429a      	cmp	r2, r3
 8005092:	d10a      	bne.n	80050aa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d107      	bne.n	80050aa <get_ldnumber+0x72>
					vol = (int)i;
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	3301      	adds	r3, #1
 80050a2:	617b      	str	r3, [r7, #20]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	e002      	b.n	80050b4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80050ae:	2300      	movs	r3, #0
 80050b0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80050b2:	693b      	ldr	r3, [r7, #16]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	371c      	adds	r7, #28
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	70da      	strb	r2, [r3, #3]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f04f 32ff 	mov.w	r2, #4294967295
 80050d6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80050d8:	6839      	ldr	r1, [r7, #0]
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7fe fc74 	bl	80039c8 <move_window>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <check_fs+0x2a>
 80050e6:	2304      	movs	r3, #4
 80050e8:	e038      	b.n	800515c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	3338      	adds	r3, #56	; 0x38
 80050ee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7fe f9f4 	bl	80034e0 <ld_word>
 80050f8:	4603      	mov	r3, r0
 80050fa:	461a      	mov	r2, r3
 80050fc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005100:	429a      	cmp	r2, r3
 8005102:	d001      	beq.n	8005108 <check_fs+0x48>
 8005104:	2303      	movs	r3, #3
 8005106:	e029      	b.n	800515c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800510e:	2be9      	cmp	r3, #233	; 0xe9
 8005110:	d009      	beq.n	8005126 <check_fs+0x66>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005118:	2beb      	cmp	r3, #235	; 0xeb
 800511a:	d11e      	bne.n	800515a <check_fs+0x9a>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005122:	2b90      	cmp	r3, #144	; 0x90
 8005124:	d119      	bne.n	800515a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	3338      	adds	r3, #56	; 0x38
 800512a:	3336      	adds	r3, #54	; 0x36
 800512c:	4618      	mov	r0, r3
 800512e:	f7fe f9ef 	bl	8003510 <ld_dword>
 8005132:	4603      	mov	r3, r0
 8005134:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005138:	4a0a      	ldr	r2, [pc, #40]	; (8005164 <check_fs+0xa4>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d101      	bne.n	8005142 <check_fs+0x82>
 800513e:	2300      	movs	r3, #0
 8005140:	e00c      	b.n	800515c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3338      	adds	r3, #56	; 0x38
 8005146:	3352      	adds	r3, #82	; 0x52
 8005148:	4618      	mov	r0, r3
 800514a:	f7fe f9e1 	bl	8003510 <ld_dword>
 800514e:	4603      	mov	r3, r0
 8005150:	4a05      	ldr	r2, [pc, #20]	; (8005168 <check_fs+0xa8>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d101      	bne.n	800515a <check_fs+0x9a>
 8005156:	2300      	movs	r3, #0
 8005158:	e000      	b.n	800515c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800515a:	2302      	movs	r3, #2
}
 800515c:	4618      	mov	r0, r3
 800515e:	3708      	adds	r7, #8
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	00544146 	.word	0x00544146
 8005168:	33544146 	.word	0x33544146

0800516c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b096      	sub	sp, #88	; 0x58
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	4613      	mov	r3, r2
 8005178:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	2200      	movs	r2, #0
 800517e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f7ff ff59 	bl	8005038 <get_ldnumber>
 8005186:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800518a:	2b00      	cmp	r3, #0
 800518c:	da01      	bge.n	8005192 <find_volume+0x26>
 800518e:	230b      	movs	r3, #11
 8005190:	e268      	b.n	8005664 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005192:	4ab0      	ldr	r2, [pc, #704]	; (8005454 <find_volume+0x2e8>)
 8005194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800519a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800519c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <find_volume+0x3a>
 80051a2:	230c      	movs	r3, #12
 80051a4:	e25e      	b.n	8005664 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051aa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80051ac:	79fb      	ldrb	r3, [r7, #7]
 80051ae:	f023 0301 	bic.w	r3, r3, #1
 80051b2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80051b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d01a      	beq.n	80051f2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80051bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051be:	785b      	ldrb	r3, [r3, #1]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7fe f8ef 	bl	80033a4 <disk_status>
 80051c6:	4603      	mov	r3, r0
 80051c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80051cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10c      	bne.n	80051f2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80051d8:	79fb      	ldrb	r3, [r7, #7]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d007      	beq.n	80051ee <find_volume+0x82>
 80051de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80051e2:	f003 0304 	and.w	r3, r3, #4
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80051ea:	230a      	movs	r3, #10
 80051ec:	e23a      	b.n	8005664 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 80051ee:	2300      	movs	r3, #0
 80051f0:	e238      	b.n	8005664 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80051f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f4:	2200      	movs	r2, #0
 80051f6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80051f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051fa:	b2da      	uxtb	r2, r3
 80051fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005202:	785b      	ldrb	r3, [r3, #1]
 8005204:	4618      	mov	r0, r3
 8005206:	f7fe f8e7 	bl	80033d8 <disk_initialize>
 800520a:	4603      	mov	r3, r0
 800520c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005210:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800521c:	2303      	movs	r3, #3
 800521e:	e221      	b.n	8005664 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005220:	79fb      	ldrb	r3, [r7, #7]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d007      	beq.n	8005236 <find_volume+0xca>
 8005226:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800522a:	f003 0304 	and.w	r3, r3, #4
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005232:	230a      	movs	r3, #10
 8005234:	e216      	b.n	8005664 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005238:	7858      	ldrb	r0, [r3, #1]
 800523a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523c:	330c      	adds	r3, #12
 800523e:	461a      	mov	r2, r3
 8005240:	2102      	movs	r1, #2
 8005242:	f7fe f92f 	bl	80034a4 <disk_ioctl>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d001      	beq.n	8005250 <find_volume+0xe4>
 800524c:	2301      	movs	r3, #1
 800524e:	e209      	b.n	8005664 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005252:	899b      	ldrh	r3, [r3, #12]
 8005254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005258:	d80d      	bhi.n	8005276 <find_volume+0x10a>
 800525a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525c:	899b      	ldrh	r3, [r3, #12]
 800525e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005262:	d308      	bcc.n	8005276 <find_volume+0x10a>
 8005264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005266:	899b      	ldrh	r3, [r3, #12]
 8005268:	461a      	mov	r2, r3
 800526a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526c:	899b      	ldrh	r3, [r3, #12]
 800526e:	3b01      	subs	r3, #1
 8005270:	4013      	ands	r3, r2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <find_volume+0x10e>
 8005276:	2301      	movs	r3, #1
 8005278:	e1f4      	b.n	8005664 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800527a:	2300      	movs	r3, #0
 800527c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800527e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005280:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005282:	f7ff ff1d 	bl	80050c0 <check_fs>
 8005286:	4603      	mov	r3, r0
 8005288:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800528c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005290:	2b02      	cmp	r3, #2
 8005292:	d14b      	bne.n	800532c <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005294:	2300      	movs	r3, #0
 8005296:	643b      	str	r3, [r7, #64]	; 0x40
 8005298:	e01f      	b.n	80052da <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800529a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80052a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80052a8:	4413      	add	r3, r2
 80052aa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80052ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ae:	3304      	adds	r3, #4
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d006      	beq.n	80052c4 <find_volume+0x158>
 80052b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b8:	3308      	adds	r3, #8
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7fe f928 	bl	8003510 <ld_dword>
 80052c0:	4602      	mov	r2, r0
 80052c2:	e000      	b.n	80052c6 <find_volume+0x15a>
 80052c4:	2200      	movs	r2, #0
 80052c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80052ce:	440b      	add	r3, r1
 80052d0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80052d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052d6:	3301      	adds	r3, #1
 80052d8:	643b      	str	r3, [r7, #64]	; 0x40
 80052da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052dc:	2b03      	cmp	r3, #3
 80052de:	d9dc      	bls.n	800529a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80052e0:	2300      	movs	r3, #0
 80052e2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80052e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d002      	beq.n	80052f0 <find_volume+0x184>
 80052ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ec:	3b01      	subs	r3, #1
 80052ee:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80052f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80052f8:	4413      	add	r3, r2
 80052fa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80052fe:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005302:	2b00      	cmp	r3, #0
 8005304:	d005      	beq.n	8005312 <find_volume+0x1a6>
 8005306:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005308:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800530a:	f7ff fed9 	bl	80050c0 <check_fs>
 800530e:	4603      	mov	r3, r0
 8005310:	e000      	b.n	8005314 <find_volume+0x1a8>
 8005312:	2303      	movs	r3, #3
 8005314:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005318:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800531c:	2b01      	cmp	r3, #1
 800531e:	d905      	bls.n	800532c <find_volume+0x1c0>
 8005320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005322:	3301      	adds	r3, #1
 8005324:	643b      	str	r3, [r7, #64]	; 0x40
 8005326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005328:	2b03      	cmp	r3, #3
 800532a:	d9e1      	bls.n	80052f0 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800532c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005330:	2b04      	cmp	r3, #4
 8005332:	d101      	bne.n	8005338 <find_volume+0x1cc>
 8005334:	2301      	movs	r3, #1
 8005336:	e195      	b.n	8005664 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005338:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800533c:	2b01      	cmp	r3, #1
 800533e:	d901      	bls.n	8005344 <find_volume+0x1d8>
 8005340:	230d      	movs	r3, #13
 8005342:	e18f      	b.n	8005664 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005346:	3338      	adds	r3, #56	; 0x38
 8005348:	330b      	adds	r3, #11
 800534a:	4618      	mov	r0, r3
 800534c:	f7fe f8c8 	bl	80034e0 <ld_word>
 8005350:	4603      	mov	r3, r0
 8005352:	461a      	mov	r2, r3
 8005354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005356:	899b      	ldrh	r3, [r3, #12]
 8005358:	429a      	cmp	r2, r3
 800535a:	d001      	beq.n	8005360 <find_volume+0x1f4>
 800535c:	230d      	movs	r3, #13
 800535e:	e181      	b.n	8005664 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005362:	3338      	adds	r3, #56	; 0x38
 8005364:	3316      	adds	r3, #22
 8005366:	4618      	mov	r0, r3
 8005368:	f7fe f8ba 	bl	80034e0 <ld_word>
 800536c:	4603      	mov	r3, r0
 800536e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005372:	2b00      	cmp	r3, #0
 8005374:	d106      	bne.n	8005384 <find_volume+0x218>
 8005376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005378:	3338      	adds	r3, #56	; 0x38
 800537a:	3324      	adds	r3, #36	; 0x24
 800537c:	4618      	mov	r0, r3
 800537e:	f7fe f8c7 	bl	8003510 <ld_dword>
 8005382:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005386:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005388:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800538a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8005390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005392:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005396:	789b      	ldrb	r3, [r3, #2]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d005      	beq.n	80053a8 <find_volume+0x23c>
 800539c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539e:	789b      	ldrb	r3, [r3, #2]
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d001      	beq.n	80053a8 <find_volume+0x23c>
 80053a4:	230d      	movs	r3, #13
 80053a6:	e15d      	b.n	8005664 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80053a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053aa:	789b      	ldrb	r3, [r3, #2]
 80053ac:	461a      	mov	r2, r3
 80053ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053b0:	fb02 f303 	mul.w	r3, r2, r3
 80053b4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80053b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053bc:	b29a      	uxth	r2, r3
 80053be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80053c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c4:	895b      	ldrh	r3, [r3, #10]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d008      	beq.n	80053dc <find_volume+0x270>
 80053ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053cc:	895b      	ldrh	r3, [r3, #10]
 80053ce:	461a      	mov	r2, r3
 80053d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d2:	895b      	ldrh	r3, [r3, #10]
 80053d4:	3b01      	subs	r3, #1
 80053d6:	4013      	ands	r3, r2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d001      	beq.n	80053e0 <find_volume+0x274>
 80053dc:	230d      	movs	r3, #13
 80053de:	e141      	b.n	8005664 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80053e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e2:	3338      	adds	r3, #56	; 0x38
 80053e4:	3311      	adds	r3, #17
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7fe f87a 	bl	80034e0 <ld_word>
 80053ec:	4603      	mov	r3, r0
 80053ee:	461a      	mov	r2, r3
 80053f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80053f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f6:	891b      	ldrh	r3, [r3, #8]
 80053f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053fa:	8992      	ldrh	r2, [r2, #12]
 80053fc:	0952      	lsrs	r2, r2, #5
 80053fe:	b292      	uxth	r2, r2
 8005400:	fbb3 f1f2 	udiv	r1, r3, r2
 8005404:	fb02 f201 	mul.w	r2, r2, r1
 8005408:	1a9b      	subs	r3, r3, r2
 800540a:	b29b      	uxth	r3, r3
 800540c:	2b00      	cmp	r3, #0
 800540e:	d001      	beq.n	8005414 <find_volume+0x2a8>
 8005410:	230d      	movs	r3, #13
 8005412:	e127      	b.n	8005664 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005416:	3338      	adds	r3, #56	; 0x38
 8005418:	3313      	adds	r3, #19
 800541a:	4618      	mov	r0, r3
 800541c:	f7fe f860 	bl	80034e0 <ld_word>
 8005420:	4603      	mov	r3, r0
 8005422:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005426:	2b00      	cmp	r3, #0
 8005428:	d106      	bne.n	8005438 <find_volume+0x2cc>
 800542a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542c:	3338      	adds	r3, #56	; 0x38
 800542e:	3320      	adds	r3, #32
 8005430:	4618      	mov	r0, r3
 8005432:	f7fe f86d 	bl	8003510 <ld_dword>
 8005436:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543a:	3338      	adds	r3, #56	; 0x38
 800543c:	330e      	adds	r3, #14
 800543e:	4618      	mov	r0, r3
 8005440:	f7fe f84e 	bl	80034e0 <ld_word>
 8005444:	4603      	mov	r3, r0
 8005446:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005448:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800544a:	2b00      	cmp	r3, #0
 800544c:	d104      	bne.n	8005458 <find_volume+0x2ec>
 800544e:	230d      	movs	r3, #13
 8005450:	e108      	b.n	8005664 <find_volume+0x4f8>
 8005452:	bf00      	nop
 8005454:	200000b0 	.word	0x200000b0

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005458:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800545a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800545c:	4413      	add	r3, r2
 800545e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005460:	8911      	ldrh	r1, [r2, #8]
 8005462:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005464:	8992      	ldrh	r2, [r2, #12]
 8005466:	0952      	lsrs	r2, r2, #5
 8005468:	b292      	uxth	r2, r2
 800546a:	fbb1 f2f2 	udiv	r2, r1, r2
 800546e:	b292      	uxth	r2, r2
 8005470:	4413      	add	r3, r2
 8005472:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005474:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005478:	429a      	cmp	r2, r3
 800547a:	d201      	bcs.n	8005480 <find_volume+0x314>
 800547c:	230d      	movs	r3, #13
 800547e:	e0f1      	b.n	8005664 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005480:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005488:	8952      	ldrh	r2, [r2, #10]
 800548a:	fbb3 f3f2 	udiv	r3, r3, r2
 800548e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <find_volume+0x32e>
 8005496:	230d      	movs	r3, #13
 8005498:	e0e4      	b.n	8005664 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800549a:	2303      	movs	r3, #3
 800549c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d802      	bhi.n	80054b0 <find_volume+0x344>
 80054aa:	2302      	movs	r3, #2
 80054ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d802      	bhi.n	80054c0 <find_volume+0x354>
 80054ba:	2301      	movs	r3, #1
 80054bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	1c9a      	adds	r2, r3, #2
 80054c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c6:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80054c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80054cc:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80054ce:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80054d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054d2:	441a      	add	r2, r3
 80054d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d6:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80054d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80054da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054dc:	441a      	add	r2, r3
 80054de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e0:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80054e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80054e6:	2b03      	cmp	r3, #3
 80054e8:	d11e      	bne.n	8005528 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80054ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ec:	3338      	adds	r3, #56	; 0x38
 80054ee:	332a      	adds	r3, #42	; 0x2a
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7fd fff5 	bl	80034e0 <ld_word>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d001      	beq.n	8005500 <find_volume+0x394>
 80054fc:	230d      	movs	r3, #13
 80054fe:	e0b1      	b.n	8005664 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005502:	891b      	ldrh	r3, [r3, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <find_volume+0x3a0>
 8005508:	230d      	movs	r3, #13
 800550a:	e0ab      	b.n	8005664 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800550c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550e:	3338      	adds	r3, #56	; 0x38
 8005510:	332c      	adds	r3, #44	; 0x2c
 8005512:	4618      	mov	r0, r3
 8005514:	f7fd fffc 	bl	8003510 <ld_dword>
 8005518:	4602      	mov	r2, r0
 800551a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800551e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	647b      	str	r3, [r7, #68]	; 0x44
 8005526:	e01f      	b.n	8005568 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552a:	891b      	ldrh	r3, [r3, #8]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <find_volume+0x3c8>
 8005530:	230d      	movs	r3, #13
 8005532:	e097      	b.n	8005664 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005536:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800553a:	441a      	add	r2, r3
 800553c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005540:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005544:	2b02      	cmp	r3, #2
 8005546:	d103      	bne.n	8005550 <find_volume+0x3e4>
 8005548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554a:	69db      	ldr	r3, [r3, #28]
 800554c:	005b      	lsls	r3, r3, #1
 800554e:	e00a      	b.n	8005566 <find_volume+0x3fa>
 8005550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005552:	69da      	ldr	r2, [r3, #28]
 8005554:	4613      	mov	r3, r2
 8005556:	005b      	lsls	r3, r3, #1
 8005558:	4413      	add	r3, r2
 800555a:	085a      	lsrs	r2, r3, #1
 800555c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555e:	69db      	ldr	r3, [r3, #28]
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005566:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556a:	6a1a      	ldr	r2, [r3, #32]
 800556c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556e:	899b      	ldrh	r3, [r3, #12]
 8005570:	4619      	mov	r1, r3
 8005572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005574:	440b      	add	r3, r1
 8005576:	3b01      	subs	r3, #1
 8005578:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800557a:	8989      	ldrh	r1, [r1, #12]
 800557c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005580:	429a      	cmp	r2, r3
 8005582:	d201      	bcs.n	8005588 <find_volume+0x41c>
 8005584:	230d      	movs	r3, #13
 8005586:	e06d      	b.n	8005664 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558a:	f04f 32ff 	mov.w	r2, #4294967295
 800558e:	619a      	str	r2, [r3, #24]
 8005590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005592:	699a      	ldr	r2, [r3, #24]
 8005594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005596:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8005598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559a:	2280      	movs	r2, #128	; 0x80
 800559c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800559e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055a2:	2b03      	cmp	r3, #3
 80055a4:	d149      	bne.n	800563a <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80055a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a8:	3338      	adds	r3, #56	; 0x38
 80055aa:	3330      	adds	r3, #48	; 0x30
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7fd ff97 	bl	80034e0 <ld_word>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d140      	bne.n	800563a <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80055b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055ba:	3301      	adds	r3, #1
 80055bc:	4619      	mov	r1, r3
 80055be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055c0:	f7fe fa02 	bl	80039c8 <move_window>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d137      	bne.n	800563a <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80055ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055cc:	2200      	movs	r2, #0
 80055ce:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80055d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d2:	3338      	adds	r3, #56	; 0x38
 80055d4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80055d8:	4618      	mov	r0, r3
 80055da:	f7fd ff81 	bl	80034e0 <ld_word>
 80055de:	4603      	mov	r3, r0
 80055e0:	461a      	mov	r2, r3
 80055e2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d127      	bne.n	800563a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80055ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ec:	3338      	adds	r3, #56	; 0x38
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7fd ff8e 	bl	8003510 <ld_dword>
 80055f4:	4603      	mov	r3, r0
 80055f6:	4a1d      	ldr	r2, [pc, #116]	; (800566c <find_volume+0x500>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d11e      	bne.n	800563a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80055fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fe:	3338      	adds	r3, #56	; 0x38
 8005600:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005604:	4618      	mov	r0, r3
 8005606:	f7fd ff83 	bl	8003510 <ld_dword>
 800560a:	4603      	mov	r3, r0
 800560c:	4a18      	ldr	r2, [pc, #96]	; (8005670 <find_volume+0x504>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d113      	bne.n	800563a <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005614:	3338      	adds	r3, #56	; 0x38
 8005616:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800561a:	4618      	mov	r0, r3
 800561c:	f7fd ff78 	bl	8003510 <ld_dword>
 8005620:	4602      	mov	r2, r0
 8005622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005624:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005628:	3338      	adds	r3, #56	; 0x38
 800562a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800562e:	4618      	mov	r0, r3
 8005630:	f7fd ff6e 	bl	8003510 <ld_dword>
 8005634:	4602      	mov	r2, r0
 8005636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005638:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800563a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005640:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005642:	4b0c      	ldr	r3, [pc, #48]	; (8005674 <find_volume+0x508>)
 8005644:	881b      	ldrh	r3, [r3, #0]
 8005646:	3301      	adds	r3, #1
 8005648:	b29a      	uxth	r2, r3
 800564a:	4b0a      	ldr	r3, [pc, #40]	; (8005674 <find_volume+0x508>)
 800564c:	801a      	strh	r2, [r3, #0]
 800564e:	4b09      	ldr	r3, [pc, #36]	; (8005674 <find_volume+0x508>)
 8005650:	881a      	ldrh	r2, [r3, #0]
 8005652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005654:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8005656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005658:	4a07      	ldr	r2, [pc, #28]	; (8005678 <find_volume+0x50c>)
 800565a:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800565c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800565e:	f7fe f94b 	bl	80038f8 <clear_lock>
#endif
	return FR_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3758      	adds	r7, #88	; 0x58
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	41615252 	.word	0x41615252
 8005670:	61417272 	.word	0x61417272
 8005674:	200000b4 	.word	0x200000b4
 8005678:	200000d8 	.word	0x200000d8

0800567c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005686:	2309      	movs	r3, #9
 8005688:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d01c      	beq.n	80056ca <validate+0x4e>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d018      	beq.n	80056ca <validate+0x4e>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d013      	beq.n	80056ca <validate+0x4e>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	889a      	ldrh	r2, [r3, #4]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	88db      	ldrh	r3, [r3, #6]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d10c      	bne.n	80056ca <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	785b      	ldrb	r3, [r3, #1]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7fd fe74 	bl	80033a4 <disk_status>
 80056bc:	4603      	mov	r3, r0
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <validate+0x4e>
			res = FR_OK;
 80056c6:	2300      	movs	r3, #0
 80056c8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80056ca:	7bfb      	ldrb	r3, [r7, #15]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d102      	bne.n	80056d6 <validate+0x5a>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	e000      	b.n	80056d8 <validate+0x5c>
 80056d6:	2300      	movs	r3, #0
 80056d8:	683a      	ldr	r2, [r7, #0]
 80056da:	6013      	str	r3, [r2, #0]
	return res;
 80056dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
	...

080056e8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b088      	sub	sp, #32
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	4613      	mov	r3, r2
 80056f4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80056fa:	f107 0310 	add.w	r3, r7, #16
 80056fe:	4618      	mov	r0, r3
 8005700:	f7ff fc9a 	bl	8005038 <get_ldnumber>
 8005704:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	2b00      	cmp	r3, #0
 800570a:	da01      	bge.n	8005710 <f_mount+0x28>
 800570c:	230b      	movs	r3, #11
 800570e:	e02b      	b.n	8005768 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005710:	4a17      	ldr	r2, [pc, #92]	; (8005770 <f_mount+0x88>)
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005718:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d005      	beq.n	800572c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005720:	69b8      	ldr	r0, [r7, #24]
 8005722:	f7fe f8e9 	bl	80038f8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	2200      	movs	r2, #0
 800572a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d002      	beq.n	8005738 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	490d      	ldr	r1, [pc, #52]	; (8005770 <f_mount+0x88>)
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d002      	beq.n	800574e <f_mount+0x66>
 8005748:	79fb      	ldrb	r3, [r7, #7]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d001      	beq.n	8005752 <f_mount+0x6a>
 800574e:	2300      	movs	r3, #0
 8005750:	e00a      	b.n	8005768 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005752:	f107 010c 	add.w	r1, r7, #12
 8005756:	f107 0308 	add.w	r3, r7, #8
 800575a:	2200      	movs	r2, #0
 800575c:	4618      	mov	r0, r3
 800575e:	f7ff fd05 	bl	800516c <find_volume>
 8005762:	4603      	mov	r3, r0
 8005764:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005766:	7dfb      	ldrb	r3, [r7, #23]
}
 8005768:	4618      	mov	r0, r3
 800576a:	3720      	adds	r7, #32
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	200000b0 	.word	0x200000b0

08005774 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b09a      	sub	sp, #104	; 0x68
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	4613      	mov	r3, r2
 8005780:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <f_open+0x18>
 8005788:	2309      	movs	r3, #9
 800578a:	e1bb      	b.n	8005b04 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800578c:	79fb      	ldrb	r3, [r7, #7]
 800578e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005792:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005794:	79fa      	ldrb	r2, [r7, #7]
 8005796:	f107 0114 	add.w	r1, r7, #20
 800579a:	f107 0308 	add.w	r3, r7, #8
 800579e:	4618      	mov	r0, r3
 80057a0:	f7ff fce4 	bl	800516c <find_volume>
 80057a4:	4603      	mov	r3, r0
 80057a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80057aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f040 819f 	bne.w	8005af2 <f_open+0x37e>
		dj.obj.fs = fs;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	f107 0318 	add.w	r3, r7, #24
 80057be:	4611      	mov	r1, r2
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7ff fbc3 	bl	8004f4c <follow_path>
 80057c6:	4603      	mov	r3, r0
 80057c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80057cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d11a      	bne.n	800580a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80057d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80057d8:	b25b      	sxtb	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	da03      	bge.n	80057e6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80057de:	2306      	movs	r3, #6
 80057e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80057e4:	e011      	b.n	800580a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80057e6:	79fb      	ldrb	r3, [r7, #7]
 80057e8:	f023 0301 	bic.w	r3, r3, #1
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	bf14      	ite	ne
 80057f0:	2301      	movne	r3, #1
 80057f2:	2300      	moveq	r3, #0
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	461a      	mov	r2, r3
 80057f8:	f107 0318 	add.w	r3, r7, #24
 80057fc:	4611      	mov	r1, r2
 80057fe:	4618      	mov	r0, r3
 8005800:	f7fd ff6e 	bl	80036e0 <chk_lock>
 8005804:	4603      	mov	r3, r0
 8005806:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800580a:	79fb      	ldrb	r3, [r7, #7]
 800580c:	f003 031c 	and.w	r3, r3, #28
 8005810:	2b00      	cmp	r3, #0
 8005812:	d07f      	beq.n	8005914 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8005814:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005818:	2b00      	cmp	r3, #0
 800581a:	d017      	beq.n	800584c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800581c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005820:	2b04      	cmp	r3, #4
 8005822:	d10e      	bne.n	8005842 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005824:	f7fd ffb8 	bl	8003798 <enq_lock>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d006      	beq.n	800583c <f_open+0xc8>
 800582e:	f107 0318 	add.w	r3, r7, #24
 8005832:	4618      	mov	r0, r3
 8005834:	f7ff f8da 	bl	80049ec <dir_register>
 8005838:	4603      	mov	r3, r0
 800583a:	e000      	b.n	800583e <f_open+0xca>
 800583c:	2312      	movs	r3, #18
 800583e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005842:	79fb      	ldrb	r3, [r7, #7]
 8005844:	f043 0308 	orr.w	r3, r3, #8
 8005848:	71fb      	strb	r3, [r7, #7]
 800584a:	e010      	b.n	800586e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800584c:	7fbb      	ldrb	r3, [r7, #30]
 800584e:	f003 0311 	and.w	r3, r3, #17
 8005852:	2b00      	cmp	r3, #0
 8005854:	d003      	beq.n	800585e <f_open+0xea>
					res = FR_DENIED;
 8005856:	2307      	movs	r3, #7
 8005858:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800585c:	e007      	b.n	800586e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800585e:	79fb      	ldrb	r3, [r7, #7]
 8005860:	f003 0304 	and.w	r3, r3, #4
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <f_open+0xfa>
 8005868:	2308      	movs	r3, #8
 800586a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800586e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005872:	2b00      	cmp	r3, #0
 8005874:	d168      	bne.n	8005948 <f_open+0x1d4>
 8005876:	79fb      	ldrb	r3, [r7, #7]
 8005878:	f003 0308 	and.w	r3, r3, #8
 800587c:	2b00      	cmp	r3, #0
 800587e:	d063      	beq.n	8005948 <f_open+0x1d4>
				dw = GET_FATTIME();
 8005880:	f7fd fd2e 	bl	80032e0 <get_fattime>
 8005884:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005888:	330e      	adds	r3, #14
 800588a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800588c:	4618      	mov	r0, r3
 800588e:	f7fd fe7d 	bl	800358c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005894:	3316      	adds	r3, #22
 8005896:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005898:	4618      	mov	r0, r3
 800589a:	f7fd fe77 	bl	800358c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800589e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a0:	330b      	adds	r3, #11
 80058a2:	2220      	movs	r2, #32
 80058a4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058aa:	4611      	mov	r1, r2
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7fe fe13 	bl	80044d8 <ld_clust>
 80058b2:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80058b8:	2200      	movs	r2, #0
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7fe fe2b 	bl	8004516 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80058c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c2:	331c      	adds	r3, #28
 80058c4:	2100      	movs	r1, #0
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7fd fe60 	bl	800358c <st_dword>
					fs->wflag = 1;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	2201      	movs	r2, #1
 80058d0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80058d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d037      	beq.n	8005948 <f_open+0x1d4>
						dw = fs->winsect;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058dc:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80058de:	f107 0318 	add.w	r3, r7, #24
 80058e2:	2200      	movs	r2, #0
 80058e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7fe fb1b 	bl	8003f22 <remove_chain>
 80058ec:	4603      	mov	r3, r0
 80058ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80058f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d126      	bne.n	8005948 <f_open+0x1d4>
							res = move_window(fs, dw);
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80058fe:	4618      	mov	r0, r3
 8005900:	f7fe f862 	bl	80039c8 <move_window>
 8005904:	4603      	mov	r3, r0
 8005906:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800590e:	3a01      	subs	r2, #1
 8005910:	615a      	str	r2, [r3, #20]
 8005912:	e019      	b.n	8005948 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005914:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005918:	2b00      	cmp	r3, #0
 800591a:	d115      	bne.n	8005948 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800591c:	7fbb      	ldrb	r3, [r7, #30]
 800591e:	f003 0310 	and.w	r3, r3, #16
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <f_open+0x1ba>
					res = FR_NO_FILE;
 8005926:	2304      	movs	r3, #4
 8005928:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800592c:	e00c      	b.n	8005948 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800592e:	79fb      	ldrb	r3, [r7, #7]
 8005930:	f003 0302 	and.w	r3, r3, #2
 8005934:	2b00      	cmp	r3, #0
 8005936:	d007      	beq.n	8005948 <f_open+0x1d4>
 8005938:	7fbb      	ldrb	r3, [r7, #30]
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b00      	cmp	r3, #0
 8005940:	d002      	beq.n	8005948 <f_open+0x1d4>
						res = FR_DENIED;
 8005942:	2307      	movs	r3, #7
 8005944:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8005948:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800594c:	2b00      	cmp	r3, #0
 800594e:	d128      	bne.n	80059a2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005950:	79fb      	ldrb	r3, [r7, #7]
 8005952:	f003 0308 	and.w	r3, r3, #8
 8005956:	2b00      	cmp	r3, #0
 8005958:	d003      	beq.n	8005962 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800595a:	79fb      	ldrb	r3, [r7, #7]
 800595c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005960:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800596a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005970:	79fb      	ldrb	r3, [r7, #7]
 8005972:	f023 0301 	bic.w	r3, r3, #1
 8005976:	2b00      	cmp	r3, #0
 8005978:	bf14      	ite	ne
 800597a:	2301      	movne	r3, #1
 800597c:	2300      	moveq	r3, #0
 800597e:	b2db      	uxtb	r3, r3
 8005980:	461a      	mov	r2, r3
 8005982:	f107 0318 	add.w	r3, r7, #24
 8005986:	4611      	mov	r1, r2
 8005988:	4618      	mov	r0, r3
 800598a:	f7fd ff27 	bl	80037dc <inc_lock>
 800598e:	4602      	mov	r2, r0
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d102      	bne.n	80059a2 <f_open+0x22e>
 800599c:	2302      	movs	r3, #2
 800599e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80059a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f040 80a3 	bne.w	8005af2 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059b0:	4611      	mov	r1, r2
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7fe fd90 	bl	80044d8 <ld_clust>
 80059b8:	4602      	mov	r2, r0
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80059be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c0:	331c      	adds	r3, #28
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7fd fda4 	bl	8003510 <ld_dword>
 80059c8:	4602      	mov	r2, r0
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	88da      	ldrh	r2, [r3, #6]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	79fa      	ldrb	r2, [r7, #7]
 80059e6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	3330      	adds	r3, #48	; 0x30
 80059fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005a02:	2100      	movs	r1, #0
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7fd fe0e 	bl	8003626 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005a0a:	79fb      	ldrb	r3, [r7, #7]
 8005a0c:	f003 0320 	and.w	r3, r3, #32
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d06e      	beq.n	8005af2 <f_open+0x37e>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d06a      	beq.n	8005af2 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	68da      	ldr	r2, [r3, #12]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	895b      	ldrh	r3, [r3, #10]
 8005a28:	461a      	mov	r2, r3
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	899b      	ldrh	r3, [r3, #12]
 8005a2e:	fb03 f302 	mul.w	r3, r3, r2
 8005a32:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a40:	e016      	b.n	8005a70 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fe f87b 	bl	8003b42 <get_fat>
 8005a4c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8005a4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d802      	bhi.n	8005a5a <f_open+0x2e6>
 8005a54:	2302      	movs	r3, #2
 8005a56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005a5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a60:	d102      	bne.n	8005a68 <f_open+0x2f4>
 8005a62:	2301      	movs	r3, #1
 8005a64:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005a68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a70:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d103      	bne.n	8005a80 <f_open+0x30c>
 8005a78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d8e0      	bhi.n	8005a42 <f_open+0x2ce>
				}
				fp->clust = clst;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a84:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005a86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d131      	bne.n	8005af2 <f_open+0x37e>
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	899b      	ldrh	r3, [r3, #12]
 8005a92:	461a      	mov	r2, r3
 8005a94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a96:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a9a:	fb02 f201 	mul.w	r2, r2, r1
 8005a9e:	1a9b      	subs	r3, r3, r2
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d026      	beq.n	8005af2 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7fe f82b 	bl	8003b04 <clust2sect>
 8005aae:	64f8      	str	r0, [r7, #76]	; 0x4c
 8005ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d103      	bne.n	8005abe <f_open+0x34a>
						res = FR_INT_ERR;
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005abc:	e019      	b.n	8005af2 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	899b      	ldrh	r3, [r3, #12]
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ac6:	fbb3 f2f2 	udiv	r2, r3, r2
 8005aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005acc:	441a      	add	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	7858      	ldrb	r0, [r3, #1]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6a1a      	ldr	r2, [r3, #32]
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	f7fd fc9f 	bl	8003424 <disk_read>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <f_open+0x37e>
 8005aec:	2301      	movs	r3, #1
 8005aee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005af2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d002      	beq.n	8005b00 <f_open+0x38c>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005b00:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3768      	adds	r7, #104	; 0x68
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b08c      	sub	sp, #48	; 0x30
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
 8005b18:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2200      	movs	r2, #0
 8005b22:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f107 0210 	add.w	r2, r7, #16
 8005b2a:	4611      	mov	r1, r2
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7ff fda5 	bl	800567c <validate>
 8005b32:	4603      	mov	r3, r0
 8005b34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005b38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d107      	bne.n	8005b50 <f_write+0x44>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	7d5b      	ldrb	r3, [r3, #21]
 8005b44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005b48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d002      	beq.n	8005b56 <f_write+0x4a>
 8005b50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005b54:	e16a      	b.n	8005e2c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	7d1b      	ldrb	r3, [r3, #20]
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <f_write+0x5a>
 8005b62:	2307      	movs	r3, #7
 8005b64:	e162      	b.n	8005e2c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	699a      	ldr	r2, [r3, #24]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	441a      	add	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	f080 814c 	bcs.w	8005e10 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	43db      	mvns	r3, r3
 8005b7e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005b80:	e146      	b.n	8005e10 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	8992      	ldrh	r2, [r2, #12]
 8005b8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b8e:	fb02 f201 	mul.w	r2, r2, r1
 8005b92:	1a9b      	subs	r3, r3, r2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f040 80f1 	bne.w	8005d7c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	693a      	ldr	r2, [r7, #16]
 8005ba0:	8992      	ldrh	r2, [r2, #12]
 8005ba2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	8952      	ldrh	r2, [r2, #10]
 8005baa:	3a01      	subs	r2, #1
 8005bac:	4013      	ands	r3, r2
 8005bae:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d143      	bne.n	8005c3e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10c      	bne.n	8005bd8 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8005bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d11a      	bne.n	8005c00 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2100      	movs	r1, #0
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7fe fa0c 	bl	8003fec <create_chain>
 8005bd4:	62b8      	str	r0, [r7, #40]	; 0x28
 8005bd6:	e013      	b.n	8005c00 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d007      	beq.n	8005bf0 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	4619      	mov	r1, r3
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f7fe fa98 	bl	800411c <clmt_clust>
 8005bec:	62b8      	str	r0, [r7, #40]	; 0x28
 8005bee:	e007      	b.n	8005c00 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	4610      	mov	r0, r2
 8005bfa:	f7fe f9f7 	bl	8003fec <create_chain>
 8005bfe:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f000 8109 	beq.w	8005e1a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d104      	bne.n	8005c18 <f_write+0x10c>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2202      	movs	r2, #2
 8005c12:	755a      	strb	r2, [r3, #21]
 8005c14:	2302      	movs	r3, #2
 8005c16:	e109      	b.n	8005e2c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c1e:	d104      	bne.n	8005c2a <f_write+0x11e>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2201      	movs	r2, #1
 8005c24:	755a      	strb	r2, [r3, #21]
 8005c26:	2301      	movs	r3, #1
 8005c28:	e100      	b.n	8005e2c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c2e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d102      	bne.n	8005c3e <f_write+0x132>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c3c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	7d1b      	ldrb	r3, [r3, #20]
 8005c42:	b25b      	sxtb	r3, r3
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	da18      	bge.n	8005c7a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	7858      	ldrb	r0, [r3, #1]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6a1a      	ldr	r2, [r3, #32]
 8005c56:	2301      	movs	r3, #1
 8005c58:	f7fd fc04 	bl	8003464 <disk_write>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d004      	beq.n	8005c6c <f_write+0x160>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2201      	movs	r2, #1
 8005c66:	755a      	strb	r2, [r3, #21]
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e0df      	b.n	8005e2c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	7d1b      	ldrb	r3, [r3, #20]
 8005c70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c74:	b2da      	uxtb	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	69db      	ldr	r3, [r3, #28]
 8005c80:	4619      	mov	r1, r3
 8005c82:	4610      	mov	r0, r2
 8005c84:	f7fd ff3e 	bl	8003b04 <clust2sect>
 8005c88:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d104      	bne.n	8005c9a <f_write+0x18e>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2202      	movs	r2, #2
 8005c94:	755a      	strb	r2, [r3, #21]
 8005c96:	2302      	movs	r3, #2
 8005c98:	e0c8      	b.n	8005e2c <f_write+0x320>
			sect += csect;
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	899b      	ldrh	r3, [r3, #12]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cae:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005cb0:	6a3b      	ldr	r3, [r7, #32]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d043      	beq.n	8005d3e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	6a3b      	ldr	r3, [r7, #32]
 8005cba:	4413      	add	r3, r2
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	8952      	ldrh	r2, [r2, #10]
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d905      	bls.n	8005cd0 <f_write+0x1c4>
					cc = fs->csize - csect;
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	895b      	ldrh	r3, [r3, #10]
 8005cc8:	461a      	mov	r2, r3
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	7858      	ldrb	r0, [r3, #1]
 8005cd4:	6a3b      	ldr	r3, [r7, #32]
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	69f9      	ldr	r1, [r7, #28]
 8005cda:	f7fd fbc3 	bl	8003464 <disk_write>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d004      	beq.n	8005cee <f_write+0x1e2>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	755a      	strb	r2, [r3, #21]
 8005cea:	2301      	movs	r3, #1
 8005cec:	e09e      	b.n	8005e2c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6a1a      	ldr	r2, [r3, #32]
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	6a3a      	ldr	r2, [r7, #32]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d918      	bls.n	8005d2e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6a1a      	ldr	r2, [r3, #32]
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	8992      	ldrh	r2, [r2, #12]
 8005d0e:	fb02 f303 	mul.w	r3, r2, r3
 8005d12:	69fa      	ldr	r2, [r7, #28]
 8005d14:	18d1      	adds	r1, r2, r3
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	899b      	ldrh	r3, [r3, #12]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	f7fd fc62 	bl	80035e4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	7d1b      	ldrb	r3, [r3, #20]
 8005d24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d28:	b2da      	uxtb	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	899b      	ldrh	r3, [r3, #12]
 8005d32:	461a      	mov	r2, r3
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	fb02 f303 	mul.w	r3, r2, r3
 8005d3a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8005d3c:	e04b      	b.n	8005dd6 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d016      	beq.n	8005d76 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	699a      	ldr	r2, [r3, #24]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d210      	bcs.n	8005d76 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	7858      	ldrb	r0, [r3, #1]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005d5e:	2301      	movs	r3, #1
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	f7fd fb5f 	bl	8003424 <disk_read>
 8005d66:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d004      	beq.n	8005d76 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	755a      	strb	r2, [r3, #21]
 8005d72:	2301      	movs	r3, #1
 8005d74:	e05a      	b.n	8005e2c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	899b      	ldrh	r3, [r3, #12]
 8005d80:	4618      	mov	r0, r3
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	8992      	ldrh	r2, [r2, #12]
 8005d8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d8e:	fb02 f201 	mul.w	r2, r2, r1
 8005d92:	1a9b      	subs	r3, r3, r2
 8005d94:	1ac3      	subs	r3, r0, r3
 8005d96:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8005d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d901      	bls.n	8005da4 <f_write+0x298>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	8992      	ldrh	r2, [r2, #12]
 8005db2:	fbb3 f0f2 	udiv	r0, r3, r2
 8005db6:	fb02 f200 	mul.w	r2, r2, r0
 8005dba:	1a9b      	subs	r3, r3, r2
 8005dbc:	440b      	add	r3, r1
 8005dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dc0:	69f9      	ldr	r1, [r7, #28]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7fd fc0e 	bl	80035e4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	7d1b      	ldrb	r3, [r3, #20]
 8005dcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8005dd6:	69fa      	ldr	r2, [r7, #28]
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dda:	4413      	add	r3, r2
 8005ddc:	61fb      	str	r3, [r7, #28]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	699a      	ldr	r2, [r3, #24]
 8005de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de4:	441a      	add	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	619a      	str	r2, [r3, #24]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	68da      	ldr	r2, [r3, #12]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	bf38      	it	cc
 8005df6:	461a      	movcc	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	60da      	str	r2, [r3, #12]
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e02:	441a      	add	r2, r3
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	601a      	str	r2, [r3, #0]
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f47f aeb5 	bne.w	8005b82 <f_write+0x76>
 8005e18:	e000      	b.n	8005e1c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005e1a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	7d1b      	ldrb	r3, [r3, #20]
 8005e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e24:	b2da      	uxtb	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3730      	adds	r7, #48	; 0x30
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f107 0208 	add.w	r2, r7, #8
 8005e42:	4611      	mov	r1, r2
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7ff fc19 	bl	800567c <validate>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005e4e:	7dfb      	ldrb	r3, [r7, #23]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d168      	bne.n	8005f26 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	7d1b      	ldrb	r3, [r3, #20]
 8005e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d062      	beq.n	8005f26 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	7d1b      	ldrb	r3, [r3, #20]
 8005e64:	b25b      	sxtb	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	da15      	bge.n	8005e96 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	7858      	ldrb	r0, [r3, #1]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a1a      	ldr	r2, [r3, #32]
 8005e78:	2301      	movs	r3, #1
 8005e7a:	f7fd faf3 	bl	8003464 <disk_write>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d001      	beq.n	8005e88 <f_sync+0x54>
 8005e84:	2301      	movs	r3, #1
 8005e86:	e04f      	b.n	8005f28 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	7d1b      	ldrb	r3, [r3, #20]
 8005e8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e90:	b2da      	uxtb	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8005e96:	f7fd fa23 	bl	80032e0 <get_fattime>
 8005e9a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	4610      	mov	r0, r2
 8005ea6:	f7fd fd8f 	bl	80039c8 <move_window>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005eae:	7dfb      	ldrb	r3, [r7, #23]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d138      	bne.n	8005f26 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	330b      	adds	r3, #11
 8005ebe:	781a      	ldrb	r2, [r3, #0]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	330b      	adds	r3, #11
 8005ec4:	f042 0220 	orr.w	r2, r2, #32
 8005ec8:	b2d2      	uxtb	r2, r2
 8005eca:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6818      	ldr	r0, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	68f9      	ldr	r1, [r7, #12]
 8005ed8:	f7fe fb1d 	bl	8004516 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f103 021c 	add.w	r2, r3, #28
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	4610      	mov	r0, r2
 8005eea:	f7fd fb4f 	bl	800358c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	3316      	adds	r3, #22
 8005ef2:	6939      	ldr	r1, [r7, #16]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7fd fb49 	bl	800358c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	3312      	adds	r3, #18
 8005efe:	2100      	movs	r1, #0
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7fd fb28 	bl	8003556 <st_word>
					fs->wflag = 1;
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fd fd88 	bl	8003a24 <sync_fs>
 8005f14:	4603      	mov	r3, r0
 8005f16:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	7d1b      	ldrb	r3, [r3, #20]
 8005f1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3718      	adds	r7, #24
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b092      	sub	sp, #72	; 0x48
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8005f3c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005f40:	f107 030c 	add.w	r3, r7, #12
 8005f44:	2200      	movs	r2, #0
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7ff f910 	bl	800516c <find_volume>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8005f52:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f040 8099 	bne.w	800608e <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8005f5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8005f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f64:	699a      	ldr	r2, [r3, #24]
 8005f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f68:	69db      	ldr	r3, [r3, #28]
 8005f6a:	3b02      	subs	r3, #2
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d804      	bhi.n	8005f7a <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8005f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f72:	699a      	ldr	r2, [r3, #24]
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	601a      	str	r2, [r3, #0]
 8005f78:	e089      	b.n	800608e <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8005f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d128      	bne.n	8005fd8 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8005f86:	2302      	movs	r3, #2
 8005f88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8c:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8005f8e:	f107 0314 	add.w	r3, r7, #20
 8005f92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7fd fdd4 	bl	8003b42 <get_fat>
 8005f9a:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8005f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa2:	d103      	bne.n	8005fac <f_getfree+0x7c>
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005faa:	e063      	b.n	8006074 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8005fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d103      	bne.n	8005fba <f_getfree+0x8a>
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005fb8:	e05c      	b.n	8006074 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8005fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d102      	bne.n	8005fc6 <f_getfree+0x96>
 8005fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8005fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fc8:	3301      	adds	r3, #1
 8005fca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fce:	69db      	ldr	r3, [r3, #28]
 8005fd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d3db      	bcc.n	8005f8e <f_getfree+0x5e>
 8005fd6:	e04d      	b.n	8006074 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8005fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fda:	69db      	ldr	r3, [r3, #28]
 8005fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe2:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	637b      	str	r3, [r7, #52]	; 0x34
 8005fe8:	2300      	movs	r3, #0
 8005fea:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8005fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d113      	bne.n	800601a <f_getfree+0xea>
							res = move_window(fs, sect++);
 8005ff2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff6:	1c5a      	adds	r2, r3, #1
 8005ff8:	63ba      	str	r2, [r7, #56]	; 0x38
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	f7fd fce4 	bl	80039c8 <move_window>
 8006000:	4603      	mov	r3, r0
 8006002:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8006006:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800600a:	2b00      	cmp	r3, #0
 800600c:	d131      	bne.n	8006072 <f_getfree+0x142>
							p = fs->win;
 800600e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006010:	3338      	adds	r3, #56	; 0x38
 8006012:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8006014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006016:	899b      	ldrh	r3, [r3, #12]
 8006018:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800601a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	2b02      	cmp	r3, #2
 8006020:	d10f      	bne.n	8006042 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8006022:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006024:	f7fd fa5c 	bl	80034e0 <ld_word>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d102      	bne.n	8006034 <f_getfree+0x104>
 800602e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006030:	3301      	adds	r3, #1
 8006032:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8006034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006036:	3302      	adds	r3, #2
 8006038:	633b      	str	r3, [r7, #48]	; 0x30
 800603a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603c:	3b02      	subs	r3, #2
 800603e:	637b      	str	r3, [r7, #52]	; 0x34
 8006040:	e010      	b.n	8006064 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8006042:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006044:	f7fd fa64 	bl	8003510 <ld_dword>
 8006048:	4603      	mov	r3, r0
 800604a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d102      	bne.n	8006058 <f_getfree+0x128>
 8006052:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006054:	3301      	adds	r3, #1
 8006056:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8006058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605a:	3304      	adds	r3, #4
 800605c:	633b      	str	r3, [r7, #48]	; 0x30
 800605e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006060:	3b04      	subs	r3, #4
 8006062:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8006064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006066:	3b01      	subs	r3, #1
 8006068:	63fb      	str	r3, [r7, #60]	; 0x3c
 800606a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1bd      	bne.n	8005fec <f_getfree+0xbc>
 8006070:	e000      	b.n	8006074 <f_getfree+0x144>
							if (res != FR_OK) break;
 8006072:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006078:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800607a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800607e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8006080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006082:	791a      	ldrb	r2, [r3, #4]
 8006084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006086:	f042 0201 	orr.w	r2, r2, #1
 800608a:	b2d2      	uxtb	r2, r2
 800608c:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800608e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006092:	4618      	mov	r0, r3
 8006094:	3748      	adds	r7, #72	; 0x48
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b084      	sub	sp, #16
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
 80060a2:	460b      	mov	r3, r1
 80060a4:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80060a6:	78fb      	ldrb	r3, [r7, #3]
 80060a8:	2b0a      	cmp	r3, #10
 80060aa:	d103      	bne.n	80060b4 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80060ac:	210d      	movs	r1, #13
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f7ff fff3 	bl	800609a <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	db25      	blt.n	800610c <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	1c5a      	adds	r2, r3, #1
 80060c4:	60fa      	str	r2, [r7, #12]
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	4413      	add	r3, r2
 80060ca:	78fa      	ldrb	r2, [r7, #3]
 80060cc:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2b3c      	cmp	r3, #60	; 0x3c
 80060d2:	dd12      	ble.n	80060fa <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6818      	ldr	r0, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f103 010c 	add.w	r1, r3, #12
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	f107 0308 	add.w	r3, r7, #8
 80060e4:	f7ff fd12 	bl	8005b0c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d101      	bne.n	80060f4 <putc_bfd+0x5a>
 80060f0:	2300      	movs	r3, #0
 80060f2:	e001      	b.n	80060f8 <putc_bfd+0x5e>
 80060f4:	f04f 33ff 	mov.w	r3, #4294967295
 80060f8:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	1c5a      	adds	r2, r3, #1
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	609a      	str	r2, [r3, #8]
 800610a:	e000      	b.n	800610e <putc_bfd+0x74>
	if (i < 0) return;
 800610c:	bf00      	nop
}
 800610e:	3710      	adds	r7, #16
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	db16      	blt.n	8006152 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6818      	ldr	r0, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f103 010c 	add.w	r1, r3, #12
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	461a      	mov	r2, r3
 8006134:	f107 030c 	add.w	r3, r7, #12
 8006138:	f7ff fce8 	bl	8005b0c <f_write>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d107      	bne.n	8006152 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	4293      	cmp	r3, r2
 800614a:	d102      	bne.n	8006152 <putc_flush+0x3e>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	e001      	b.n	8006156 <putc_flush+0x42>
	return EOF;
 8006152:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006156:	4618      	mov	r0, r3
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800615e:	b480      	push	{r7}
 8006160:	b083      	sub	sp, #12
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
 8006166:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	683a      	ldr	r2, [r7, #0]
 800616c:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	605a      	str	r2, [r3, #4]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	609a      	str	r2, [r3, #8]
}
 800617c:	bf00      	nop
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b096      	sub	sp, #88	; 0x58
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8006192:	f107 030c 	add.w	r3, r7, #12
 8006196:	6839      	ldr	r1, [r7, #0]
 8006198:	4618      	mov	r0, r3
 800619a:	f7ff ffe0 	bl	800615e <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800619e:	e009      	b.n	80061b4 <f_puts+0x2c>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	1c5a      	adds	r2, r3, #1
 80061a4:	607a      	str	r2, [r7, #4]
 80061a6:	781a      	ldrb	r2, [r3, #0]
 80061a8:	f107 030c 	add.w	r3, r7, #12
 80061ac:	4611      	mov	r1, r2
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7ff ff73 	bl	800609a <putc_bfd>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d1f1      	bne.n	80061a0 <f_puts+0x18>
	return putc_flush(&pb);
 80061bc:	f107 030c 	add.w	r3, r7, #12
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7ff ffa7 	bl	8006114 <putc_flush>
 80061c6:	4603      	mov	r3, r0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3758      	adds	r7, #88	; 0x58
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b087      	sub	sp, #28
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	4613      	mov	r3, r2
 80061dc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80061de:	2301      	movs	r3, #1
 80061e0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80061e2:	2300      	movs	r3, #0
 80061e4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80061e6:	4b1f      	ldr	r3, [pc, #124]	; (8006264 <FATFS_LinkDriverEx+0x94>)
 80061e8:	7a5b      	ldrb	r3, [r3, #9]
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d131      	bne.n	8006254 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80061f0:	4b1c      	ldr	r3, [pc, #112]	; (8006264 <FATFS_LinkDriverEx+0x94>)
 80061f2:	7a5b      	ldrb	r3, [r3, #9]
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	461a      	mov	r2, r3
 80061f8:	4b1a      	ldr	r3, [pc, #104]	; (8006264 <FATFS_LinkDriverEx+0x94>)
 80061fa:	2100      	movs	r1, #0
 80061fc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80061fe:	4b19      	ldr	r3, [pc, #100]	; (8006264 <FATFS_LinkDriverEx+0x94>)
 8006200:	7a5b      	ldrb	r3, [r3, #9]
 8006202:	b2db      	uxtb	r3, r3
 8006204:	4a17      	ldr	r2, [pc, #92]	; (8006264 <FATFS_LinkDriverEx+0x94>)
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	4413      	add	r3, r2
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800620e:	4b15      	ldr	r3, [pc, #84]	; (8006264 <FATFS_LinkDriverEx+0x94>)
 8006210:	7a5b      	ldrb	r3, [r3, #9]
 8006212:	b2db      	uxtb	r3, r3
 8006214:	461a      	mov	r2, r3
 8006216:	4b13      	ldr	r3, [pc, #76]	; (8006264 <FATFS_LinkDriverEx+0x94>)
 8006218:	4413      	add	r3, r2
 800621a:	79fa      	ldrb	r2, [r7, #7]
 800621c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800621e:	4b11      	ldr	r3, [pc, #68]	; (8006264 <FATFS_LinkDriverEx+0x94>)
 8006220:	7a5b      	ldrb	r3, [r3, #9]
 8006222:	b2db      	uxtb	r3, r3
 8006224:	1c5a      	adds	r2, r3, #1
 8006226:	b2d1      	uxtb	r1, r2
 8006228:	4a0e      	ldr	r2, [pc, #56]	; (8006264 <FATFS_LinkDriverEx+0x94>)
 800622a:	7251      	strb	r1, [r2, #9]
 800622c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800622e:	7dbb      	ldrb	r3, [r7, #22]
 8006230:	3330      	adds	r3, #48	; 0x30
 8006232:	b2da      	uxtb	r2, r3
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	3301      	adds	r3, #1
 800623c:	223a      	movs	r2, #58	; 0x3a
 800623e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	3302      	adds	r3, #2
 8006244:	222f      	movs	r2, #47	; 0x2f
 8006246:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	3303      	adds	r3, #3
 800624c:	2200      	movs	r2, #0
 800624e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006250:	2300      	movs	r3, #0
 8006252:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006254:	7dfb      	ldrb	r3, [r7, #23]
}
 8006256:	4618      	mov	r0, r3
 8006258:	371c      	adds	r7, #28
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	200002d8 	.word	0x200002d8

08006268 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006272:	2200      	movs	r2, #0
 8006274:	6839      	ldr	r1, [r7, #0]
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f7ff ffaa 	bl	80061d0 <FATFS_LinkDriverEx>
 800627c:	4603      	mov	r3, r0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3708      	adds	r7, #8
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
	...

08006288 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	4603      	mov	r3, r0
 8006290:	6039      	str	r1, [r7, #0]
 8006292:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8006294:	88fb      	ldrh	r3, [r7, #6]
 8006296:	2b7f      	cmp	r3, #127	; 0x7f
 8006298:	d802      	bhi.n	80062a0 <ff_convert+0x18>
		c = chr;
 800629a:	88fb      	ldrh	r3, [r7, #6]
 800629c:	81fb      	strh	r3, [r7, #14]
 800629e:	e025      	b.n	80062ec <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00b      	beq.n	80062be <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80062a6:	88fb      	ldrh	r3, [r7, #6]
 80062a8:	2bff      	cmp	r3, #255	; 0xff
 80062aa:	d805      	bhi.n	80062b8 <ff_convert+0x30>
 80062ac:	88fb      	ldrh	r3, [r7, #6]
 80062ae:	3b80      	subs	r3, #128	; 0x80
 80062b0:	4a12      	ldr	r2, [pc, #72]	; (80062fc <ff_convert+0x74>)
 80062b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062b6:	e000      	b.n	80062ba <ff_convert+0x32>
 80062b8:	2300      	movs	r3, #0
 80062ba:	81fb      	strh	r3, [r7, #14]
 80062bc:	e016      	b.n	80062ec <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80062be:	2300      	movs	r3, #0
 80062c0:	81fb      	strh	r3, [r7, #14]
 80062c2:	e009      	b.n	80062d8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80062c4:	89fb      	ldrh	r3, [r7, #14]
 80062c6:	4a0d      	ldr	r2, [pc, #52]	; (80062fc <ff_convert+0x74>)
 80062c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062cc:	88fa      	ldrh	r2, [r7, #6]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d006      	beq.n	80062e0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80062d2:	89fb      	ldrh	r3, [r7, #14]
 80062d4:	3301      	adds	r3, #1
 80062d6:	81fb      	strh	r3, [r7, #14]
 80062d8:	89fb      	ldrh	r3, [r7, #14]
 80062da:	2b7f      	cmp	r3, #127	; 0x7f
 80062dc:	d9f2      	bls.n	80062c4 <ff_convert+0x3c>
 80062de:	e000      	b.n	80062e2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80062e0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80062e2:	89fb      	ldrh	r3, [r7, #14]
 80062e4:	3380      	adds	r3, #128	; 0x80
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80062ec:	89fb      	ldrh	r3, [r7, #14]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3714      	adds	r7, #20
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	08006e0c 	.word	0x08006e0c

08006300 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8006300:	b480      	push	{r7}
 8006302:	b087      	sub	sp, #28
 8006304:	af00      	add	r7, sp, #0
 8006306:	4603      	mov	r3, r0
 8006308:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800630a:	88fb      	ldrh	r3, [r7, #6]
 800630c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006310:	d201      	bcs.n	8006316 <ff_wtoupper+0x16>
 8006312:	4b3e      	ldr	r3, [pc, #248]	; (800640c <ff_wtoupper+0x10c>)
 8006314:	e000      	b.n	8006318 <ff_wtoupper+0x18>
 8006316:	4b3e      	ldr	r3, [pc, #248]	; (8006410 <ff_wtoupper+0x110>)
 8006318:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	1c9a      	adds	r2, r3, #2
 800631e:	617a      	str	r2, [r7, #20]
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8006324:	8a7b      	ldrh	r3, [r7, #18]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d068      	beq.n	80063fc <ff_wtoupper+0xfc>
 800632a:	88fa      	ldrh	r2, [r7, #6]
 800632c:	8a7b      	ldrh	r3, [r7, #18]
 800632e:	429a      	cmp	r2, r3
 8006330:	d364      	bcc.n	80063fc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	1c9a      	adds	r2, r3, #2
 8006336:	617a      	str	r2, [r7, #20]
 8006338:	881b      	ldrh	r3, [r3, #0]
 800633a:	823b      	strh	r3, [r7, #16]
 800633c:	8a3b      	ldrh	r3, [r7, #16]
 800633e:	0a1b      	lsrs	r3, r3, #8
 8006340:	81fb      	strh	r3, [r7, #14]
 8006342:	8a3b      	ldrh	r3, [r7, #16]
 8006344:	b2db      	uxtb	r3, r3
 8006346:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8006348:	88fa      	ldrh	r2, [r7, #6]
 800634a:	8a79      	ldrh	r1, [r7, #18]
 800634c:	8a3b      	ldrh	r3, [r7, #16]
 800634e:	440b      	add	r3, r1
 8006350:	429a      	cmp	r2, r3
 8006352:	da49      	bge.n	80063e8 <ff_wtoupper+0xe8>
			switch (cmd) {
 8006354:	89fb      	ldrh	r3, [r7, #14]
 8006356:	2b08      	cmp	r3, #8
 8006358:	d84f      	bhi.n	80063fa <ff_wtoupper+0xfa>
 800635a:	a201      	add	r2, pc, #4	; (adr r2, 8006360 <ff_wtoupper+0x60>)
 800635c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006360:	08006385 	.word	0x08006385
 8006364:	08006397 	.word	0x08006397
 8006368:	080063ad 	.word	0x080063ad
 800636c:	080063b5 	.word	0x080063b5
 8006370:	080063bd 	.word	0x080063bd
 8006374:	080063c5 	.word	0x080063c5
 8006378:	080063cd 	.word	0x080063cd
 800637c:	080063d5 	.word	0x080063d5
 8006380:	080063dd 	.word	0x080063dd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8006384:	88fa      	ldrh	r2, [r7, #6]
 8006386:	8a7b      	ldrh	r3, [r7, #18]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	005b      	lsls	r3, r3, #1
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	4413      	add	r3, r2
 8006390:	881b      	ldrh	r3, [r3, #0]
 8006392:	80fb      	strh	r3, [r7, #6]
 8006394:	e027      	b.n	80063e6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8006396:	88fa      	ldrh	r2, [r7, #6]
 8006398:	8a7b      	ldrh	r3, [r7, #18]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	b29b      	uxth	r3, r3
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	88fa      	ldrh	r2, [r7, #6]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	80fb      	strh	r3, [r7, #6]
 80063aa:	e01c      	b.n	80063e6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80063ac:	88fb      	ldrh	r3, [r7, #6]
 80063ae:	3b10      	subs	r3, #16
 80063b0:	80fb      	strh	r3, [r7, #6]
 80063b2:	e018      	b.n	80063e6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80063b4:	88fb      	ldrh	r3, [r7, #6]
 80063b6:	3b20      	subs	r3, #32
 80063b8:	80fb      	strh	r3, [r7, #6]
 80063ba:	e014      	b.n	80063e6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80063bc:	88fb      	ldrh	r3, [r7, #6]
 80063be:	3b30      	subs	r3, #48	; 0x30
 80063c0:	80fb      	strh	r3, [r7, #6]
 80063c2:	e010      	b.n	80063e6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80063c4:	88fb      	ldrh	r3, [r7, #6]
 80063c6:	3b1a      	subs	r3, #26
 80063c8:	80fb      	strh	r3, [r7, #6]
 80063ca:	e00c      	b.n	80063e6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80063cc:	88fb      	ldrh	r3, [r7, #6]
 80063ce:	3308      	adds	r3, #8
 80063d0:	80fb      	strh	r3, [r7, #6]
 80063d2:	e008      	b.n	80063e6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80063d4:	88fb      	ldrh	r3, [r7, #6]
 80063d6:	3b50      	subs	r3, #80	; 0x50
 80063d8:	80fb      	strh	r3, [r7, #6]
 80063da:	e004      	b.n	80063e6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80063dc:	88fb      	ldrh	r3, [r7, #6]
 80063de:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80063e2:	80fb      	strh	r3, [r7, #6]
 80063e4:	bf00      	nop
			}
			break;
 80063e6:	e008      	b.n	80063fa <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80063e8:	89fb      	ldrh	r3, [r7, #14]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d195      	bne.n	800631a <ff_wtoupper+0x1a>
 80063ee:	8a3b      	ldrh	r3, [r7, #16]
 80063f0:	005b      	lsls	r3, r3, #1
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	4413      	add	r3, r2
 80063f6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80063f8:	e78f      	b.n	800631a <ff_wtoupper+0x1a>
			break;
 80063fa:	bf00      	nop
	}

	return chr;
 80063fc:	88fb      	ldrh	r3, [r7, #6]
}
 80063fe:	4618      	mov	r0, r3
 8006400:	371c      	adds	r7, #28
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	08006f0c 	.word	0x08006f0c
 8006410:	08007100 	.word	0x08007100

08006414 <__errno>:
 8006414:	4b01      	ldr	r3, [pc, #4]	; (800641c <__errno+0x8>)
 8006416:	6818      	ldr	r0, [r3, #0]
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	20000024 	.word	0x20000024

08006420 <__libc_init_array>:
 8006420:	b570      	push	{r4, r5, r6, lr}
 8006422:	4d0d      	ldr	r5, [pc, #52]	; (8006458 <__libc_init_array+0x38>)
 8006424:	4c0d      	ldr	r4, [pc, #52]	; (800645c <__libc_init_array+0x3c>)
 8006426:	1b64      	subs	r4, r4, r5
 8006428:	10a4      	asrs	r4, r4, #2
 800642a:	2600      	movs	r6, #0
 800642c:	42a6      	cmp	r6, r4
 800642e:	d109      	bne.n	8006444 <__libc_init_array+0x24>
 8006430:	4d0b      	ldr	r5, [pc, #44]	; (8006460 <__libc_init_array+0x40>)
 8006432:	4c0c      	ldr	r4, [pc, #48]	; (8006464 <__libc_init_array+0x44>)
 8006434:	f000 fc4e 	bl	8006cd4 <_init>
 8006438:	1b64      	subs	r4, r4, r5
 800643a:	10a4      	asrs	r4, r4, #2
 800643c:	2600      	movs	r6, #0
 800643e:	42a6      	cmp	r6, r4
 8006440:	d105      	bne.n	800644e <__libc_init_array+0x2e>
 8006442:	bd70      	pop	{r4, r5, r6, pc}
 8006444:	f855 3b04 	ldr.w	r3, [r5], #4
 8006448:	4798      	blx	r3
 800644a:	3601      	adds	r6, #1
 800644c:	e7ee      	b.n	800642c <__libc_init_array+0xc>
 800644e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006452:	4798      	blx	r3
 8006454:	3601      	adds	r6, #1
 8006456:	e7f2      	b.n	800643e <__libc_init_array+0x1e>
 8006458:	080071f8 	.word	0x080071f8
 800645c:	080071f8 	.word	0x080071f8
 8006460:	080071f8 	.word	0x080071f8
 8006464:	080071fc 	.word	0x080071fc

08006468 <memset>:
 8006468:	4402      	add	r2, r0
 800646a:	4603      	mov	r3, r0
 800646c:	4293      	cmp	r3, r2
 800646e:	d100      	bne.n	8006472 <memset+0xa>
 8006470:	4770      	bx	lr
 8006472:	f803 1b01 	strb.w	r1, [r3], #1
 8006476:	e7f9      	b.n	800646c <memset+0x4>

08006478 <siprintf>:
 8006478:	b40e      	push	{r1, r2, r3}
 800647a:	b500      	push	{lr}
 800647c:	b09c      	sub	sp, #112	; 0x70
 800647e:	ab1d      	add	r3, sp, #116	; 0x74
 8006480:	9002      	str	r0, [sp, #8]
 8006482:	9006      	str	r0, [sp, #24]
 8006484:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006488:	4809      	ldr	r0, [pc, #36]	; (80064b0 <siprintf+0x38>)
 800648a:	9107      	str	r1, [sp, #28]
 800648c:	9104      	str	r1, [sp, #16]
 800648e:	4909      	ldr	r1, [pc, #36]	; (80064b4 <siprintf+0x3c>)
 8006490:	f853 2b04 	ldr.w	r2, [r3], #4
 8006494:	9105      	str	r1, [sp, #20]
 8006496:	6800      	ldr	r0, [r0, #0]
 8006498:	9301      	str	r3, [sp, #4]
 800649a:	a902      	add	r1, sp, #8
 800649c:	f000 f868 	bl	8006570 <_svfiprintf_r>
 80064a0:	9b02      	ldr	r3, [sp, #8]
 80064a2:	2200      	movs	r2, #0
 80064a4:	701a      	strb	r2, [r3, #0]
 80064a6:	b01c      	add	sp, #112	; 0x70
 80064a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80064ac:	b003      	add	sp, #12
 80064ae:	4770      	bx	lr
 80064b0:	20000024 	.word	0x20000024
 80064b4:	ffff0208 	.word	0xffff0208

080064b8 <__ssputs_r>:
 80064b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064bc:	688e      	ldr	r6, [r1, #8]
 80064be:	429e      	cmp	r6, r3
 80064c0:	4682      	mov	sl, r0
 80064c2:	460c      	mov	r4, r1
 80064c4:	4690      	mov	r8, r2
 80064c6:	461f      	mov	r7, r3
 80064c8:	d838      	bhi.n	800653c <__ssputs_r+0x84>
 80064ca:	898a      	ldrh	r2, [r1, #12]
 80064cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80064d0:	d032      	beq.n	8006538 <__ssputs_r+0x80>
 80064d2:	6825      	ldr	r5, [r4, #0]
 80064d4:	6909      	ldr	r1, [r1, #16]
 80064d6:	eba5 0901 	sub.w	r9, r5, r1
 80064da:	6965      	ldr	r5, [r4, #20]
 80064dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80064e4:	3301      	adds	r3, #1
 80064e6:	444b      	add	r3, r9
 80064e8:	106d      	asrs	r5, r5, #1
 80064ea:	429d      	cmp	r5, r3
 80064ec:	bf38      	it	cc
 80064ee:	461d      	movcc	r5, r3
 80064f0:	0553      	lsls	r3, r2, #21
 80064f2:	d531      	bpl.n	8006558 <__ssputs_r+0xa0>
 80064f4:	4629      	mov	r1, r5
 80064f6:	f000 fb47 	bl	8006b88 <_malloc_r>
 80064fa:	4606      	mov	r6, r0
 80064fc:	b950      	cbnz	r0, 8006514 <__ssputs_r+0x5c>
 80064fe:	230c      	movs	r3, #12
 8006500:	f8ca 3000 	str.w	r3, [sl]
 8006504:	89a3      	ldrh	r3, [r4, #12]
 8006506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800650a:	81a3      	strh	r3, [r4, #12]
 800650c:	f04f 30ff 	mov.w	r0, #4294967295
 8006510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006514:	6921      	ldr	r1, [r4, #16]
 8006516:	464a      	mov	r2, r9
 8006518:	f000 fabe 	bl	8006a98 <memcpy>
 800651c:	89a3      	ldrh	r3, [r4, #12]
 800651e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006526:	81a3      	strh	r3, [r4, #12]
 8006528:	6126      	str	r6, [r4, #16]
 800652a:	6165      	str	r5, [r4, #20]
 800652c:	444e      	add	r6, r9
 800652e:	eba5 0509 	sub.w	r5, r5, r9
 8006532:	6026      	str	r6, [r4, #0]
 8006534:	60a5      	str	r5, [r4, #8]
 8006536:	463e      	mov	r6, r7
 8006538:	42be      	cmp	r6, r7
 800653a:	d900      	bls.n	800653e <__ssputs_r+0x86>
 800653c:	463e      	mov	r6, r7
 800653e:	4632      	mov	r2, r6
 8006540:	6820      	ldr	r0, [r4, #0]
 8006542:	4641      	mov	r1, r8
 8006544:	f000 fab6 	bl	8006ab4 <memmove>
 8006548:	68a3      	ldr	r3, [r4, #8]
 800654a:	6822      	ldr	r2, [r4, #0]
 800654c:	1b9b      	subs	r3, r3, r6
 800654e:	4432      	add	r2, r6
 8006550:	60a3      	str	r3, [r4, #8]
 8006552:	6022      	str	r2, [r4, #0]
 8006554:	2000      	movs	r0, #0
 8006556:	e7db      	b.n	8006510 <__ssputs_r+0x58>
 8006558:	462a      	mov	r2, r5
 800655a:	f000 fb6f 	bl	8006c3c <_realloc_r>
 800655e:	4606      	mov	r6, r0
 8006560:	2800      	cmp	r0, #0
 8006562:	d1e1      	bne.n	8006528 <__ssputs_r+0x70>
 8006564:	6921      	ldr	r1, [r4, #16]
 8006566:	4650      	mov	r0, sl
 8006568:	f000 fabe 	bl	8006ae8 <_free_r>
 800656c:	e7c7      	b.n	80064fe <__ssputs_r+0x46>
	...

08006570 <_svfiprintf_r>:
 8006570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006574:	4698      	mov	r8, r3
 8006576:	898b      	ldrh	r3, [r1, #12]
 8006578:	061b      	lsls	r3, r3, #24
 800657a:	b09d      	sub	sp, #116	; 0x74
 800657c:	4607      	mov	r7, r0
 800657e:	460d      	mov	r5, r1
 8006580:	4614      	mov	r4, r2
 8006582:	d50e      	bpl.n	80065a2 <_svfiprintf_r+0x32>
 8006584:	690b      	ldr	r3, [r1, #16]
 8006586:	b963      	cbnz	r3, 80065a2 <_svfiprintf_r+0x32>
 8006588:	2140      	movs	r1, #64	; 0x40
 800658a:	f000 fafd 	bl	8006b88 <_malloc_r>
 800658e:	6028      	str	r0, [r5, #0]
 8006590:	6128      	str	r0, [r5, #16]
 8006592:	b920      	cbnz	r0, 800659e <_svfiprintf_r+0x2e>
 8006594:	230c      	movs	r3, #12
 8006596:	603b      	str	r3, [r7, #0]
 8006598:	f04f 30ff 	mov.w	r0, #4294967295
 800659c:	e0d1      	b.n	8006742 <_svfiprintf_r+0x1d2>
 800659e:	2340      	movs	r3, #64	; 0x40
 80065a0:	616b      	str	r3, [r5, #20]
 80065a2:	2300      	movs	r3, #0
 80065a4:	9309      	str	r3, [sp, #36]	; 0x24
 80065a6:	2320      	movs	r3, #32
 80065a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80065b0:	2330      	movs	r3, #48	; 0x30
 80065b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800675c <_svfiprintf_r+0x1ec>
 80065b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065ba:	f04f 0901 	mov.w	r9, #1
 80065be:	4623      	mov	r3, r4
 80065c0:	469a      	mov	sl, r3
 80065c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065c6:	b10a      	cbz	r2, 80065cc <_svfiprintf_r+0x5c>
 80065c8:	2a25      	cmp	r2, #37	; 0x25
 80065ca:	d1f9      	bne.n	80065c0 <_svfiprintf_r+0x50>
 80065cc:	ebba 0b04 	subs.w	fp, sl, r4
 80065d0:	d00b      	beq.n	80065ea <_svfiprintf_r+0x7a>
 80065d2:	465b      	mov	r3, fp
 80065d4:	4622      	mov	r2, r4
 80065d6:	4629      	mov	r1, r5
 80065d8:	4638      	mov	r0, r7
 80065da:	f7ff ff6d 	bl	80064b8 <__ssputs_r>
 80065de:	3001      	adds	r0, #1
 80065e0:	f000 80aa 	beq.w	8006738 <_svfiprintf_r+0x1c8>
 80065e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065e6:	445a      	add	r2, fp
 80065e8:	9209      	str	r2, [sp, #36]	; 0x24
 80065ea:	f89a 3000 	ldrb.w	r3, [sl]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f000 80a2 	beq.w	8006738 <_svfiprintf_r+0x1c8>
 80065f4:	2300      	movs	r3, #0
 80065f6:	f04f 32ff 	mov.w	r2, #4294967295
 80065fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065fe:	f10a 0a01 	add.w	sl, sl, #1
 8006602:	9304      	str	r3, [sp, #16]
 8006604:	9307      	str	r3, [sp, #28]
 8006606:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800660a:	931a      	str	r3, [sp, #104]	; 0x68
 800660c:	4654      	mov	r4, sl
 800660e:	2205      	movs	r2, #5
 8006610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006614:	4851      	ldr	r0, [pc, #324]	; (800675c <_svfiprintf_r+0x1ec>)
 8006616:	f7f9 fddb 	bl	80001d0 <memchr>
 800661a:	9a04      	ldr	r2, [sp, #16]
 800661c:	b9d8      	cbnz	r0, 8006656 <_svfiprintf_r+0xe6>
 800661e:	06d0      	lsls	r0, r2, #27
 8006620:	bf44      	itt	mi
 8006622:	2320      	movmi	r3, #32
 8006624:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006628:	0711      	lsls	r1, r2, #28
 800662a:	bf44      	itt	mi
 800662c:	232b      	movmi	r3, #43	; 0x2b
 800662e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006632:	f89a 3000 	ldrb.w	r3, [sl]
 8006636:	2b2a      	cmp	r3, #42	; 0x2a
 8006638:	d015      	beq.n	8006666 <_svfiprintf_r+0xf6>
 800663a:	9a07      	ldr	r2, [sp, #28]
 800663c:	4654      	mov	r4, sl
 800663e:	2000      	movs	r0, #0
 8006640:	f04f 0c0a 	mov.w	ip, #10
 8006644:	4621      	mov	r1, r4
 8006646:	f811 3b01 	ldrb.w	r3, [r1], #1
 800664a:	3b30      	subs	r3, #48	; 0x30
 800664c:	2b09      	cmp	r3, #9
 800664e:	d94e      	bls.n	80066ee <_svfiprintf_r+0x17e>
 8006650:	b1b0      	cbz	r0, 8006680 <_svfiprintf_r+0x110>
 8006652:	9207      	str	r2, [sp, #28]
 8006654:	e014      	b.n	8006680 <_svfiprintf_r+0x110>
 8006656:	eba0 0308 	sub.w	r3, r0, r8
 800665a:	fa09 f303 	lsl.w	r3, r9, r3
 800665e:	4313      	orrs	r3, r2
 8006660:	9304      	str	r3, [sp, #16]
 8006662:	46a2      	mov	sl, r4
 8006664:	e7d2      	b.n	800660c <_svfiprintf_r+0x9c>
 8006666:	9b03      	ldr	r3, [sp, #12]
 8006668:	1d19      	adds	r1, r3, #4
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	9103      	str	r1, [sp, #12]
 800666e:	2b00      	cmp	r3, #0
 8006670:	bfbb      	ittet	lt
 8006672:	425b      	neglt	r3, r3
 8006674:	f042 0202 	orrlt.w	r2, r2, #2
 8006678:	9307      	strge	r3, [sp, #28]
 800667a:	9307      	strlt	r3, [sp, #28]
 800667c:	bfb8      	it	lt
 800667e:	9204      	strlt	r2, [sp, #16]
 8006680:	7823      	ldrb	r3, [r4, #0]
 8006682:	2b2e      	cmp	r3, #46	; 0x2e
 8006684:	d10c      	bne.n	80066a0 <_svfiprintf_r+0x130>
 8006686:	7863      	ldrb	r3, [r4, #1]
 8006688:	2b2a      	cmp	r3, #42	; 0x2a
 800668a:	d135      	bne.n	80066f8 <_svfiprintf_r+0x188>
 800668c:	9b03      	ldr	r3, [sp, #12]
 800668e:	1d1a      	adds	r2, r3, #4
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	9203      	str	r2, [sp, #12]
 8006694:	2b00      	cmp	r3, #0
 8006696:	bfb8      	it	lt
 8006698:	f04f 33ff 	movlt.w	r3, #4294967295
 800669c:	3402      	adds	r4, #2
 800669e:	9305      	str	r3, [sp, #20]
 80066a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800676c <_svfiprintf_r+0x1fc>
 80066a4:	7821      	ldrb	r1, [r4, #0]
 80066a6:	2203      	movs	r2, #3
 80066a8:	4650      	mov	r0, sl
 80066aa:	f7f9 fd91 	bl	80001d0 <memchr>
 80066ae:	b140      	cbz	r0, 80066c2 <_svfiprintf_r+0x152>
 80066b0:	2340      	movs	r3, #64	; 0x40
 80066b2:	eba0 000a 	sub.w	r0, r0, sl
 80066b6:	fa03 f000 	lsl.w	r0, r3, r0
 80066ba:	9b04      	ldr	r3, [sp, #16]
 80066bc:	4303      	orrs	r3, r0
 80066be:	3401      	adds	r4, #1
 80066c0:	9304      	str	r3, [sp, #16]
 80066c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066c6:	4826      	ldr	r0, [pc, #152]	; (8006760 <_svfiprintf_r+0x1f0>)
 80066c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066cc:	2206      	movs	r2, #6
 80066ce:	f7f9 fd7f 	bl	80001d0 <memchr>
 80066d2:	2800      	cmp	r0, #0
 80066d4:	d038      	beq.n	8006748 <_svfiprintf_r+0x1d8>
 80066d6:	4b23      	ldr	r3, [pc, #140]	; (8006764 <_svfiprintf_r+0x1f4>)
 80066d8:	bb1b      	cbnz	r3, 8006722 <_svfiprintf_r+0x1b2>
 80066da:	9b03      	ldr	r3, [sp, #12]
 80066dc:	3307      	adds	r3, #7
 80066de:	f023 0307 	bic.w	r3, r3, #7
 80066e2:	3308      	adds	r3, #8
 80066e4:	9303      	str	r3, [sp, #12]
 80066e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066e8:	4433      	add	r3, r6
 80066ea:	9309      	str	r3, [sp, #36]	; 0x24
 80066ec:	e767      	b.n	80065be <_svfiprintf_r+0x4e>
 80066ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80066f2:	460c      	mov	r4, r1
 80066f4:	2001      	movs	r0, #1
 80066f6:	e7a5      	b.n	8006644 <_svfiprintf_r+0xd4>
 80066f8:	2300      	movs	r3, #0
 80066fa:	3401      	adds	r4, #1
 80066fc:	9305      	str	r3, [sp, #20]
 80066fe:	4619      	mov	r1, r3
 8006700:	f04f 0c0a 	mov.w	ip, #10
 8006704:	4620      	mov	r0, r4
 8006706:	f810 2b01 	ldrb.w	r2, [r0], #1
 800670a:	3a30      	subs	r2, #48	; 0x30
 800670c:	2a09      	cmp	r2, #9
 800670e:	d903      	bls.n	8006718 <_svfiprintf_r+0x1a8>
 8006710:	2b00      	cmp	r3, #0
 8006712:	d0c5      	beq.n	80066a0 <_svfiprintf_r+0x130>
 8006714:	9105      	str	r1, [sp, #20]
 8006716:	e7c3      	b.n	80066a0 <_svfiprintf_r+0x130>
 8006718:	fb0c 2101 	mla	r1, ip, r1, r2
 800671c:	4604      	mov	r4, r0
 800671e:	2301      	movs	r3, #1
 8006720:	e7f0      	b.n	8006704 <_svfiprintf_r+0x194>
 8006722:	ab03      	add	r3, sp, #12
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	462a      	mov	r2, r5
 8006728:	4b0f      	ldr	r3, [pc, #60]	; (8006768 <_svfiprintf_r+0x1f8>)
 800672a:	a904      	add	r1, sp, #16
 800672c:	4638      	mov	r0, r7
 800672e:	f3af 8000 	nop.w
 8006732:	1c42      	adds	r2, r0, #1
 8006734:	4606      	mov	r6, r0
 8006736:	d1d6      	bne.n	80066e6 <_svfiprintf_r+0x176>
 8006738:	89ab      	ldrh	r3, [r5, #12]
 800673a:	065b      	lsls	r3, r3, #25
 800673c:	f53f af2c 	bmi.w	8006598 <_svfiprintf_r+0x28>
 8006740:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006742:	b01d      	add	sp, #116	; 0x74
 8006744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006748:	ab03      	add	r3, sp, #12
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	462a      	mov	r2, r5
 800674e:	4b06      	ldr	r3, [pc, #24]	; (8006768 <_svfiprintf_r+0x1f8>)
 8006750:	a904      	add	r1, sp, #16
 8006752:	4638      	mov	r0, r7
 8006754:	f000 f87a 	bl	800684c <_printf_i>
 8006758:	e7eb      	b.n	8006732 <_svfiprintf_r+0x1c2>
 800675a:	bf00      	nop
 800675c:	080071bc 	.word	0x080071bc
 8006760:	080071c6 	.word	0x080071c6
 8006764:	00000000 	.word	0x00000000
 8006768:	080064b9 	.word	0x080064b9
 800676c:	080071c2 	.word	0x080071c2

08006770 <_printf_common>:
 8006770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006774:	4616      	mov	r6, r2
 8006776:	4699      	mov	r9, r3
 8006778:	688a      	ldr	r2, [r1, #8]
 800677a:	690b      	ldr	r3, [r1, #16]
 800677c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006780:	4293      	cmp	r3, r2
 8006782:	bfb8      	it	lt
 8006784:	4613      	movlt	r3, r2
 8006786:	6033      	str	r3, [r6, #0]
 8006788:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800678c:	4607      	mov	r7, r0
 800678e:	460c      	mov	r4, r1
 8006790:	b10a      	cbz	r2, 8006796 <_printf_common+0x26>
 8006792:	3301      	adds	r3, #1
 8006794:	6033      	str	r3, [r6, #0]
 8006796:	6823      	ldr	r3, [r4, #0]
 8006798:	0699      	lsls	r1, r3, #26
 800679a:	bf42      	ittt	mi
 800679c:	6833      	ldrmi	r3, [r6, #0]
 800679e:	3302      	addmi	r3, #2
 80067a0:	6033      	strmi	r3, [r6, #0]
 80067a2:	6825      	ldr	r5, [r4, #0]
 80067a4:	f015 0506 	ands.w	r5, r5, #6
 80067a8:	d106      	bne.n	80067b8 <_printf_common+0x48>
 80067aa:	f104 0a19 	add.w	sl, r4, #25
 80067ae:	68e3      	ldr	r3, [r4, #12]
 80067b0:	6832      	ldr	r2, [r6, #0]
 80067b2:	1a9b      	subs	r3, r3, r2
 80067b4:	42ab      	cmp	r3, r5
 80067b6:	dc26      	bgt.n	8006806 <_printf_common+0x96>
 80067b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80067bc:	1e13      	subs	r3, r2, #0
 80067be:	6822      	ldr	r2, [r4, #0]
 80067c0:	bf18      	it	ne
 80067c2:	2301      	movne	r3, #1
 80067c4:	0692      	lsls	r2, r2, #26
 80067c6:	d42b      	bmi.n	8006820 <_printf_common+0xb0>
 80067c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067cc:	4649      	mov	r1, r9
 80067ce:	4638      	mov	r0, r7
 80067d0:	47c0      	blx	r8
 80067d2:	3001      	adds	r0, #1
 80067d4:	d01e      	beq.n	8006814 <_printf_common+0xa4>
 80067d6:	6823      	ldr	r3, [r4, #0]
 80067d8:	68e5      	ldr	r5, [r4, #12]
 80067da:	6832      	ldr	r2, [r6, #0]
 80067dc:	f003 0306 	and.w	r3, r3, #6
 80067e0:	2b04      	cmp	r3, #4
 80067e2:	bf08      	it	eq
 80067e4:	1aad      	subeq	r5, r5, r2
 80067e6:	68a3      	ldr	r3, [r4, #8]
 80067e8:	6922      	ldr	r2, [r4, #16]
 80067ea:	bf0c      	ite	eq
 80067ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067f0:	2500      	movne	r5, #0
 80067f2:	4293      	cmp	r3, r2
 80067f4:	bfc4      	itt	gt
 80067f6:	1a9b      	subgt	r3, r3, r2
 80067f8:	18ed      	addgt	r5, r5, r3
 80067fa:	2600      	movs	r6, #0
 80067fc:	341a      	adds	r4, #26
 80067fe:	42b5      	cmp	r5, r6
 8006800:	d11a      	bne.n	8006838 <_printf_common+0xc8>
 8006802:	2000      	movs	r0, #0
 8006804:	e008      	b.n	8006818 <_printf_common+0xa8>
 8006806:	2301      	movs	r3, #1
 8006808:	4652      	mov	r2, sl
 800680a:	4649      	mov	r1, r9
 800680c:	4638      	mov	r0, r7
 800680e:	47c0      	blx	r8
 8006810:	3001      	adds	r0, #1
 8006812:	d103      	bne.n	800681c <_printf_common+0xac>
 8006814:	f04f 30ff 	mov.w	r0, #4294967295
 8006818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800681c:	3501      	adds	r5, #1
 800681e:	e7c6      	b.n	80067ae <_printf_common+0x3e>
 8006820:	18e1      	adds	r1, r4, r3
 8006822:	1c5a      	adds	r2, r3, #1
 8006824:	2030      	movs	r0, #48	; 0x30
 8006826:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800682a:	4422      	add	r2, r4
 800682c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006830:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006834:	3302      	adds	r3, #2
 8006836:	e7c7      	b.n	80067c8 <_printf_common+0x58>
 8006838:	2301      	movs	r3, #1
 800683a:	4622      	mov	r2, r4
 800683c:	4649      	mov	r1, r9
 800683e:	4638      	mov	r0, r7
 8006840:	47c0      	blx	r8
 8006842:	3001      	adds	r0, #1
 8006844:	d0e6      	beq.n	8006814 <_printf_common+0xa4>
 8006846:	3601      	adds	r6, #1
 8006848:	e7d9      	b.n	80067fe <_printf_common+0x8e>
	...

0800684c <_printf_i>:
 800684c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006850:	460c      	mov	r4, r1
 8006852:	4691      	mov	r9, r2
 8006854:	7e27      	ldrb	r7, [r4, #24]
 8006856:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006858:	2f78      	cmp	r7, #120	; 0x78
 800685a:	4680      	mov	r8, r0
 800685c:	469a      	mov	sl, r3
 800685e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006862:	d807      	bhi.n	8006874 <_printf_i+0x28>
 8006864:	2f62      	cmp	r7, #98	; 0x62
 8006866:	d80a      	bhi.n	800687e <_printf_i+0x32>
 8006868:	2f00      	cmp	r7, #0
 800686a:	f000 80d8 	beq.w	8006a1e <_printf_i+0x1d2>
 800686e:	2f58      	cmp	r7, #88	; 0x58
 8006870:	f000 80a3 	beq.w	80069ba <_printf_i+0x16e>
 8006874:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006878:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800687c:	e03a      	b.n	80068f4 <_printf_i+0xa8>
 800687e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006882:	2b15      	cmp	r3, #21
 8006884:	d8f6      	bhi.n	8006874 <_printf_i+0x28>
 8006886:	a001      	add	r0, pc, #4	; (adr r0, 800688c <_printf_i+0x40>)
 8006888:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800688c:	080068e5 	.word	0x080068e5
 8006890:	080068f9 	.word	0x080068f9
 8006894:	08006875 	.word	0x08006875
 8006898:	08006875 	.word	0x08006875
 800689c:	08006875 	.word	0x08006875
 80068a0:	08006875 	.word	0x08006875
 80068a4:	080068f9 	.word	0x080068f9
 80068a8:	08006875 	.word	0x08006875
 80068ac:	08006875 	.word	0x08006875
 80068b0:	08006875 	.word	0x08006875
 80068b4:	08006875 	.word	0x08006875
 80068b8:	08006a05 	.word	0x08006a05
 80068bc:	08006929 	.word	0x08006929
 80068c0:	080069e7 	.word	0x080069e7
 80068c4:	08006875 	.word	0x08006875
 80068c8:	08006875 	.word	0x08006875
 80068cc:	08006a27 	.word	0x08006a27
 80068d0:	08006875 	.word	0x08006875
 80068d4:	08006929 	.word	0x08006929
 80068d8:	08006875 	.word	0x08006875
 80068dc:	08006875 	.word	0x08006875
 80068e0:	080069ef 	.word	0x080069ef
 80068e4:	680b      	ldr	r3, [r1, #0]
 80068e6:	1d1a      	adds	r2, r3, #4
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	600a      	str	r2, [r1, #0]
 80068ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80068f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068f4:	2301      	movs	r3, #1
 80068f6:	e0a3      	b.n	8006a40 <_printf_i+0x1f4>
 80068f8:	6825      	ldr	r5, [r4, #0]
 80068fa:	6808      	ldr	r0, [r1, #0]
 80068fc:	062e      	lsls	r6, r5, #24
 80068fe:	f100 0304 	add.w	r3, r0, #4
 8006902:	d50a      	bpl.n	800691a <_printf_i+0xce>
 8006904:	6805      	ldr	r5, [r0, #0]
 8006906:	600b      	str	r3, [r1, #0]
 8006908:	2d00      	cmp	r5, #0
 800690a:	da03      	bge.n	8006914 <_printf_i+0xc8>
 800690c:	232d      	movs	r3, #45	; 0x2d
 800690e:	426d      	negs	r5, r5
 8006910:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006914:	485e      	ldr	r0, [pc, #376]	; (8006a90 <_printf_i+0x244>)
 8006916:	230a      	movs	r3, #10
 8006918:	e019      	b.n	800694e <_printf_i+0x102>
 800691a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800691e:	6805      	ldr	r5, [r0, #0]
 8006920:	600b      	str	r3, [r1, #0]
 8006922:	bf18      	it	ne
 8006924:	b22d      	sxthne	r5, r5
 8006926:	e7ef      	b.n	8006908 <_printf_i+0xbc>
 8006928:	680b      	ldr	r3, [r1, #0]
 800692a:	6825      	ldr	r5, [r4, #0]
 800692c:	1d18      	adds	r0, r3, #4
 800692e:	6008      	str	r0, [r1, #0]
 8006930:	0628      	lsls	r0, r5, #24
 8006932:	d501      	bpl.n	8006938 <_printf_i+0xec>
 8006934:	681d      	ldr	r5, [r3, #0]
 8006936:	e002      	b.n	800693e <_printf_i+0xf2>
 8006938:	0669      	lsls	r1, r5, #25
 800693a:	d5fb      	bpl.n	8006934 <_printf_i+0xe8>
 800693c:	881d      	ldrh	r5, [r3, #0]
 800693e:	4854      	ldr	r0, [pc, #336]	; (8006a90 <_printf_i+0x244>)
 8006940:	2f6f      	cmp	r7, #111	; 0x6f
 8006942:	bf0c      	ite	eq
 8006944:	2308      	moveq	r3, #8
 8006946:	230a      	movne	r3, #10
 8006948:	2100      	movs	r1, #0
 800694a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800694e:	6866      	ldr	r6, [r4, #4]
 8006950:	60a6      	str	r6, [r4, #8]
 8006952:	2e00      	cmp	r6, #0
 8006954:	bfa2      	ittt	ge
 8006956:	6821      	ldrge	r1, [r4, #0]
 8006958:	f021 0104 	bicge.w	r1, r1, #4
 800695c:	6021      	strge	r1, [r4, #0]
 800695e:	b90d      	cbnz	r5, 8006964 <_printf_i+0x118>
 8006960:	2e00      	cmp	r6, #0
 8006962:	d04d      	beq.n	8006a00 <_printf_i+0x1b4>
 8006964:	4616      	mov	r6, r2
 8006966:	fbb5 f1f3 	udiv	r1, r5, r3
 800696a:	fb03 5711 	mls	r7, r3, r1, r5
 800696e:	5dc7      	ldrb	r7, [r0, r7]
 8006970:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006974:	462f      	mov	r7, r5
 8006976:	42bb      	cmp	r3, r7
 8006978:	460d      	mov	r5, r1
 800697a:	d9f4      	bls.n	8006966 <_printf_i+0x11a>
 800697c:	2b08      	cmp	r3, #8
 800697e:	d10b      	bne.n	8006998 <_printf_i+0x14c>
 8006980:	6823      	ldr	r3, [r4, #0]
 8006982:	07df      	lsls	r7, r3, #31
 8006984:	d508      	bpl.n	8006998 <_printf_i+0x14c>
 8006986:	6923      	ldr	r3, [r4, #16]
 8006988:	6861      	ldr	r1, [r4, #4]
 800698a:	4299      	cmp	r1, r3
 800698c:	bfde      	ittt	le
 800698e:	2330      	movle	r3, #48	; 0x30
 8006990:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006994:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006998:	1b92      	subs	r2, r2, r6
 800699a:	6122      	str	r2, [r4, #16]
 800699c:	f8cd a000 	str.w	sl, [sp]
 80069a0:	464b      	mov	r3, r9
 80069a2:	aa03      	add	r2, sp, #12
 80069a4:	4621      	mov	r1, r4
 80069a6:	4640      	mov	r0, r8
 80069a8:	f7ff fee2 	bl	8006770 <_printf_common>
 80069ac:	3001      	adds	r0, #1
 80069ae:	d14c      	bne.n	8006a4a <_printf_i+0x1fe>
 80069b0:	f04f 30ff 	mov.w	r0, #4294967295
 80069b4:	b004      	add	sp, #16
 80069b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ba:	4835      	ldr	r0, [pc, #212]	; (8006a90 <_printf_i+0x244>)
 80069bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80069c0:	6823      	ldr	r3, [r4, #0]
 80069c2:	680e      	ldr	r6, [r1, #0]
 80069c4:	061f      	lsls	r7, r3, #24
 80069c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80069ca:	600e      	str	r6, [r1, #0]
 80069cc:	d514      	bpl.n	80069f8 <_printf_i+0x1ac>
 80069ce:	07d9      	lsls	r1, r3, #31
 80069d0:	bf44      	itt	mi
 80069d2:	f043 0320 	orrmi.w	r3, r3, #32
 80069d6:	6023      	strmi	r3, [r4, #0]
 80069d8:	b91d      	cbnz	r5, 80069e2 <_printf_i+0x196>
 80069da:	6823      	ldr	r3, [r4, #0]
 80069dc:	f023 0320 	bic.w	r3, r3, #32
 80069e0:	6023      	str	r3, [r4, #0]
 80069e2:	2310      	movs	r3, #16
 80069e4:	e7b0      	b.n	8006948 <_printf_i+0xfc>
 80069e6:	6823      	ldr	r3, [r4, #0]
 80069e8:	f043 0320 	orr.w	r3, r3, #32
 80069ec:	6023      	str	r3, [r4, #0]
 80069ee:	2378      	movs	r3, #120	; 0x78
 80069f0:	4828      	ldr	r0, [pc, #160]	; (8006a94 <_printf_i+0x248>)
 80069f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069f6:	e7e3      	b.n	80069c0 <_printf_i+0x174>
 80069f8:	065e      	lsls	r6, r3, #25
 80069fa:	bf48      	it	mi
 80069fc:	b2ad      	uxthmi	r5, r5
 80069fe:	e7e6      	b.n	80069ce <_printf_i+0x182>
 8006a00:	4616      	mov	r6, r2
 8006a02:	e7bb      	b.n	800697c <_printf_i+0x130>
 8006a04:	680b      	ldr	r3, [r1, #0]
 8006a06:	6826      	ldr	r6, [r4, #0]
 8006a08:	6960      	ldr	r0, [r4, #20]
 8006a0a:	1d1d      	adds	r5, r3, #4
 8006a0c:	600d      	str	r5, [r1, #0]
 8006a0e:	0635      	lsls	r5, r6, #24
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	d501      	bpl.n	8006a18 <_printf_i+0x1cc>
 8006a14:	6018      	str	r0, [r3, #0]
 8006a16:	e002      	b.n	8006a1e <_printf_i+0x1d2>
 8006a18:	0671      	lsls	r1, r6, #25
 8006a1a:	d5fb      	bpl.n	8006a14 <_printf_i+0x1c8>
 8006a1c:	8018      	strh	r0, [r3, #0]
 8006a1e:	2300      	movs	r3, #0
 8006a20:	6123      	str	r3, [r4, #16]
 8006a22:	4616      	mov	r6, r2
 8006a24:	e7ba      	b.n	800699c <_printf_i+0x150>
 8006a26:	680b      	ldr	r3, [r1, #0]
 8006a28:	1d1a      	adds	r2, r3, #4
 8006a2a:	600a      	str	r2, [r1, #0]
 8006a2c:	681e      	ldr	r6, [r3, #0]
 8006a2e:	6862      	ldr	r2, [r4, #4]
 8006a30:	2100      	movs	r1, #0
 8006a32:	4630      	mov	r0, r6
 8006a34:	f7f9 fbcc 	bl	80001d0 <memchr>
 8006a38:	b108      	cbz	r0, 8006a3e <_printf_i+0x1f2>
 8006a3a:	1b80      	subs	r0, r0, r6
 8006a3c:	6060      	str	r0, [r4, #4]
 8006a3e:	6863      	ldr	r3, [r4, #4]
 8006a40:	6123      	str	r3, [r4, #16]
 8006a42:	2300      	movs	r3, #0
 8006a44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a48:	e7a8      	b.n	800699c <_printf_i+0x150>
 8006a4a:	6923      	ldr	r3, [r4, #16]
 8006a4c:	4632      	mov	r2, r6
 8006a4e:	4649      	mov	r1, r9
 8006a50:	4640      	mov	r0, r8
 8006a52:	47d0      	blx	sl
 8006a54:	3001      	adds	r0, #1
 8006a56:	d0ab      	beq.n	80069b0 <_printf_i+0x164>
 8006a58:	6823      	ldr	r3, [r4, #0]
 8006a5a:	079b      	lsls	r3, r3, #30
 8006a5c:	d413      	bmi.n	8006a86 <_printf_i+0x23a>
 8006a5e:	68e0      	ldr	r0, [r4, #12]
 8006a60:	9b03      	ldr	r3, [sp, #12]
 8006a62:	4298      	cmp	r0, r3
 8006a64:	bfb8      	it	lt
 8006a66:	4618      	movlt	r0, r3
 8006a68:	e7a4      	b.n	80069b4 <_printf_i+0x168>
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	4632      	mov	r2, r6
 8006a6e:	4649      	mov	r1, r9
 8006a70:	4640      	mov	r0, r8
 8006a72:	47d0      	blx	sl
 8006a74:	3001      	adds	r0, #1
 8006a76:	d09b      	beq.n	80069b0 <_printf_i+0x164>
 8006a78:	3501      	adds	r5, #1
 8006a7a:	68e3      	ldr	r3, [r4, #12]
 8006a7c:	9903      	ldr	r1, [sp, #12]
 8006a7e:	1a5b      	subs	r3, r3, r1
 8006a80:	42ab      	cmp	r3, r5
 8006a82:	dcf2      	bgt.n	8006a6a <_printf_i+0x21e>
 8006a84:	e7eb      	b.n	8006a5e <_printf_i+0x212>
 8006a86:	2500      	movs	r5, #0
 8006a88:	f104 0619 	add.w	r6, r4, #25
 8006a8c:	e7f5      	b.n	8006a7a <_printf_i+0x22e>
 8006a8e:	bf00      	nop
 8006a90:	080071cd 	.word	0x080071cd
 8006a94:	080071de 	.word	0x080071de

08006a98 <memcpy>:
 8006a98:	440a      	add	r2, r1
 8006a9a:	4291      	cmp	r1, r2
 8006a9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006aa0:	d100      	bne.n	8006aa4 <memcpy+0xc>
 8006aa2:	4770      	bx	lr
 8006aa4:	b510      	push	{r4, lr}
 8006aa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006aaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006aae:	4291      	cmp	r1, r2
 8006ab0:	d1f9      	bne.n	8006aa6 <memcpy+0xe>
 8006ab2:	bd10      	pop	{r4, pc}

08006ab4 <memmove>:
 8006ab4:	4288      	cmp	r0, r1
 8006ab6:	b510      	push	{r4, lr}
 8006ab8:	eb01 0402 	add.w	r4, r1, r2
 8006abc:	d902      	bls.n	8006ac4 <memmove+0x10>
 8006abe:	4284      	cmp	r4, r0
 8006ac0:	4623      	mov	r3, r4
 8006ac2:	d807      	bhi.n	8006ad4 <memmove+0x20>
 8006ac4:	1e43      	subs	r3, r0, #1
 8006ac6:	42a1      	cmp	r1, r4
 8006ac8:	d008      	beq.n	8006adc <memmove+0x28>
 8006aca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ace:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ad2:	e7f8      	b.n	8006ac6 <memmove+0x12>
 8006ad4:	4402      	add	r2, r0
 8006ad6:	4601      	mov	r1, r0
 8006ad8:	428a      	cmp	r2, r1
 8006ada:	d100      	bne.n	8006ade <memmove+0x2a>
 8006adc:	bd10      	pop	{r4, pc}
 8006ade:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ae2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ae6:	e7f7      	b.n	8006ad8 <memmove+0x24>

08006ae8 <_free_r>:
 8006ae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006aea:	2900      	cmp	r1, #0
 8006aec:	d048      	beq.n	8006b80 <_free_r+0x98>
 8006aee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006af2:	9001      	str	r0, [sp, #4]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f1a1 0404 	sub.w	r4, r1, #4
 8006afa:	bfb8      	it	lt
 8006afc:	18e4      	addlt	r4, r4, r3
 8006afe:	f000 f8d3 	bl	8006ca8 <__malloc_lock>
 8006b02:	4a20      	ldr	r2, [pc, #128]	; (8006b84 <_free_r+0x9c>)
 8006b04:	9801      	ldr	r0, [sp, #4]
 8006b06:	6813      	ldr	r3, [r2, #0]
 8006b08:	4615      	mov	r5, r2
 8006b0a:	b933      	cbnz	r3, 8006b1a <_free_r+0x32>
 8006b0c:	6063      	str	r3, [r4, #4]
 8006b0e:	6014      	str	r4, [r2, #0]
 8006b10:	b003      	add	sp, #12
 8006b12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b16:	f000 b8cd 	b.w	8006cb4 <__malloc_unlock>
 8006b1a:	42a3      	cmp	r3, r4
 8006b1c:	d90b      	bls.n	8006b36 <_free_r+0x4e>
 8006b1e:	6821      	ldr	r1, [r4, #0]
 8006b20:	1862      	adds	r2, r4, r1
 8006b22:	4293      	cmp	r3, r2
 8006b24:	bf04      	itt	eq
 8006b26:	681a      	ldreq	r2, [r3, #0]
 8006b28:	685b      	ldreq	r3, [r3, #4]
 8006b2a:	6063      	str	r3, [r4, #4]
 8006b2c:	bf04      	itt	eq
 8006b2e:	1852      	addeq	r2, r2, r1
 8006b30:	6022      	streq	r2, [r4, #0]
 8006b32:	602c      	str	r4, [r5, #0]
 8006b34:	e7ec      	b.n	8006b10 <_free_r+0x28>
 8006b36:	461a      	mov	r2, r3
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	b10b      	cbz	r3, 8006b40 <_free_r+0x58>
 8006b3c:	42a3      	cmp	r3, r4
 8006b3e:	d9fa      	bls.n	8006b36 <_free_r+0x4e>
 8006b40:	6811      	ldr	r1, [r2, #0]
 8006b42:	1855      	adds	r5, r2, r1
 8006b44:	42a5      	cmp	r5, r4
 8006b46:	d10b      	bne.n	8006b60 <_free_r+0x78>
 8006b48:	6824      	ldr	r4, [r4, #0]
 8006b4a:	4421      	add	r1, r4
 8006b4c:	1854      	adds	r4, r2, r1
 8006b4e:	42a3      	cmp	r3, r4
 8006b50:	6011      	str	r1, [r2, #0]
 8006b52:	d1dd      	bne.n	8006b10 <_free_r+0x28>
 8006b54:	681c      	ldr	r4, [r3, #0]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	6053      	str	r3, [r2, #4]
 8006b5a:	4421      	add	r1, r4
 8006b5c:	6011      	str	r1, [r2, #0]
 8006b5e:	e7d7      	b.n	8006b10 <_free_r+0x28>
 8006b60:	d902      	bls.n	8006b68 <_free_r+0x80>
 8006b62:	230c      	movs	r3, #12
 8006b64:	6003      	str	r3, [r0, #0]
 8006b66:	e7d3      	b.n	8006b10 <_free_r+0x28>
 8006b68:	6825      	ldr	r5, [r4, #0]
 8006b6a:	1961      	adds	r1, r4, r5
 8006b6c:	428b      	cmp	r3, r1
 8006b6e:	bf04      	itt	eq
 8006b70:	6819      	ldreq	r1, [r3, #0]
 8006b72:	685b      	ldreq	r3, [r3, #4]
 8006b74:	6063      	str	r3, [r4, #4]
 8006b76:	bf04      	itt	eq
 8006b78:	1949      	addeq	r1, r1, r5
 8006b7a:	6021      	streq	r1, [r4, #0]
 8006b7c:	6054      	str	r4, [r2, #4]
 8006b7e:	e7c7      	b.n	8006b10 <_free_r+0x28>
 8006b80:	b003      	add	sp, #12
 8006b82:	bd30      	pop	{r4, r5, pc}
 8006b84:	200002e4 	.word	0x200002e4

08006b88 <_malloc_r>:
 8006b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b8a:	1ccd      	adds	r5, r1, #3
 8006b8c:	f025 0503 	bic.w	r5, r5, #3
 8006b90:	3508      	adds	r5, #8
 8006b92:	2d0c      	cmp	r5, #12
 8006b94:	bf38      	it	cc
 8006b96:	250c      	movcc	r5, #12
 8006b98:	2d00      	cmp	r5, #0
 8006b9a:	4606      	mov	r6, r0
 8006b9c:	db01      	blt.n	8006ba2 <_malloc_r+0x1a>
 8006b9e:	42a9      	cmp	r1, r5
 8006ba0:	d903      	bls.n	8006baa <_malloc_r+0x22>
 8006ba2:	230c      	movs	r3, #12
 8006ba4:	6033      	str	r3, [r6, #0]
 8006ba6:	2000      	movs	r0, #0
 8006ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006baa:	f000 f87d 	bl	8006ca8 <__malloc_lock>
 8006bae:	4921      	ldr	r1, [pc, #132]	; (8006c34 <_malloc_r+0xac>)
 8006bb0:	680a      	ldr	r2, [r1, #0]
 8006bb2:	4614      	mov	r4, r2
 8006bb4:	b99c      	cbnz	r4, 8006bde <_malloc_r+0x56>
 8006bb6:	4f20      	ldr	r7, [pc, #128]	; (8006c38 <_malloc_r+0xb0>)
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	b923      	cbnz	r3, 8006bc6 <_malloc_r+0x3e>
 8006bbc:	4621      	mov	r1, r4
 8006bbe:	4630      	mov	r0, r6
 8006bc0:	f000 f862 	bl	8006c88 <_sbrk_r>
 8006bc4:	6038      	str	r0, [r7, #0]
 8006bc6:	4629      	mov	r1, r5
 8006bc8:	4630      	mov	r0, r6
 8006bca:	f000 f85d 	bl	8006c88 <_sbrk_r>
 8006bce:	1c43      	adds	r3, r0, #1
 8006bd0:	d123      	bne.n	8006c1a <_malloc_r+0x92>
 8006bd2:	230c      	movs	r3, #12
 8006bd4:	6033      	str	r3, [r6, #0]
 8006bd6:	4630      	mov	r0, r6
 8006bd8:	f000 f86c 	bl	8006cb4 <__malloc_unlock>
 8006bdc:	e7e3      	b.n	8006ba6 <_malloc_r+0x1e>
 8006bde:	6823      	ldr	r3, [r4, #0]
 8006be0:	1b5b      	subs	r3, r3, r5
 8006be2:	d417      	bmi.n	8006c14 <_malloc_r+0x8c>
 8006be4:	2b0b      	cmp	r3, #11
 8006be6:	d903      	bls.n	8006bf0 <_malloc_r+0x68>
 8006be8:	6023      	str	r3, [r4, #0]
 8006bea:	441c      	add	r4, r3
 8006bec:	6025      	str	r5, [r4, #0]
 8006bee:	e004      	b.n	8006bfa <_malloc_r+0x72>
 8006bf0:	6863      	ldr	r3, [r4, #4]
 8006bf2:	42a2      	cmp	r2, r4
 8006bf4:	bf0c      	ite	eq
 8006bf6:	600b      	streq	r3, [r1, #0]
 8006bf8:	6053      	strne	r3, [r2, #4]
 8006bfa:	4630      	mov	r0, r6
 8006bfc:	f000 f85a 	bl	8006cb4 <__malloc_unlock>
 8006c00:	f104 000b 	add.w	r0, r4, #11
 8006c04:	1d23      	adds	r3, r4, #4
 8006c06:	f020 0007 	bic.w	r0, r0, #7
 8006c0a:	1ac2      	subs	r2, r0, r3
 8006c0c:	d0cc      	beq.n	8006ba8 <_malloc_r+0x20>
 8006c0e:	1a1b      	subs	r3, r3, r0
 8006c10:	50a3      	str	r3, [r4, r2]
 8006c12:	e7c9      	b.n	8006ba8 <_malloc_r+0x20>
 8006c14:	4622      	mov	r2, r4
 8006c16:	6864      	ldr	r4, [r4, #4]
 8006c18:	e7cc      	b.n	8006bb4 <_malloc_r+0x2c>
 8006c1a:	1cc4      	adds	r4, r0, #3
 8006c1c:	f024 0403 	bic.w	r4, r4, #3
 8006c20:	42a0      	cmp	r0, r4
 8006c22:	d0e3      	beq.n	8006bec <_malloc_r+0x64>
 8006c24:	1a21      	subs	r1, r4, r0
 8006c26:	4630      	mov	r0, r6
 8006c28:	f000 f82e 	bl	8006c88 <_sbrk_r>
 8006c2c:	3001      	adds	r0, #1
 8006c2e:	d1dd      	bne.n	8006bec <_malloc_r+0x64>
 8006c30:	e7cf      	b.n	8006bd2 <_malloc_r+0x4a>
 8006c32:	bf00      	nop
 8006c34:	200002e4 	.word	0x200002e4
 8006c38:	200002e8 	.word	0x200002e8

08006c3c <_realloc_r>:
 8006c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3e:	4607      	mov	r7, r0
 8006c40:	4614      	mov	r4, r2
 8006c42:	460e      	mov	r6, r1
 8006c44:	b921      	cbnz	r1, 8006c50 <_realloc_r+0x14>
 8006c46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006c4a:	4611      	mov	r1, r2
 8006c4c:	f7ff bf9c 	b.w	8006b88 <_malloc_r>
 8006c50:	b922      	cbnz	r2, 8006c5c <_realloc_r+0x20>
 8006c52:	f7ff ff49 	bl	8006ae8 <_free_r>
 8006c56:	4625      	mov	r5, r4
 8006c58:	4628      	mov	r0, r5
 8006c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c5c:	f000 f830 	bl	8006cc0 <_malloc_usable_size_r>
 8006c60:	42a0      	cmp	r0, r4
 8006c62:	d20f      	bcs.n	8006c84 <_realloc_r+0x48>
 8006c64:	4621      	mov	r1, r4
 8006c66:	4638      	mov	r0, r7
 8006c68:	f7ff ff8e 	bl	8006b88 <_malloc_r>
 8006c6c:	4605      	mov	r5, r0
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	d0f2      	beq.n	8006c58 <_realloc_r+0x1c>
 8006c72:	4631      	mov	r1, r6
 8006c74:	4622      	mov	r2, r4
 8006c76:	f7ff ff0f 	bl	8006a98 <memcpy>
 8006c7a:	4631      	mov	r1, r6
 8006c7c:	4638      	mov	r0, r7
 8006c7e:	f7ff ff33 	bl	8006ae8 <_free_r>
 8006c82:	e7e9      	b.n	8006c58 <_realloc_r+0x1c>
 8006c84:	4635      	mov	r5, r6
 8006c86:	e7e7      	b.n	8006c58 <_realloc_r+0x1c>

08006c88 <_sbrk_r>:
 8006c88:	b538      	push	{r3, r4, r5, lr}
 8006c8a:	4d06      	ldr	r5, [pc, #24]	; (8006ca4 <_sbrk_r+0x1c>)
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	4604      	mov	r4, r0
 8006c90:	4608      	mov	r0, r1
 8006c92:	602b      	str	r3, [r5, #0]
 8006c94:	f7fa fed4 	bl	8001a40 <_sbrk>
 8006c98:	1c43      	adds	r3, r0, #1
 8006c9a:	d102      	bne.n	8006ca2 <_sbrk_r+0x1a>
 8006c9c:	682b      	ldr	r3, [r5, #0]
 8006c9e:	b103      	cbz	r3, 8006ca2 <_sbrk_r+0x1a>
 8006ca0:	6023      	str	r3, [r4, #0]
 8006ca2:	bd38      	pop	{r3, r4, r5, pc}
 8006ca4:	20004840 	.word	0x20004840

08006ca8 <__malloc_lock>:
 8006ca8:	4801      	ldr	r0, [pc, #4]	; (8006cb0 <__malloc_lock+0x8>)
 8006caa:	f000 b811 	b.w	8006cd0 <__retarget_lock_acquire_recursive>
 8006cae:	bf00      	nop
 8006cb0:	20004848 	.word	0x20004848

08006cb4 <__malloc_unlock>:
 8006cb4:	4801      	ldr	r0, [pc, #4]	; (8006cbc <__malloc_unlock+0x8>)
 8006cb6:	f000 b80c 	b.w	8006cd2 <__retarget_lock_release_recursive>
 8006cba:	bf00      	nop
 8006cbc:	20004848 	.word	0x20004848

08006cc0 <_malloc_usable_size_r>:
 8006cc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cc4:	1f18      	subs	r0, r3, #4
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	bfbc      	itt	lt
 8006cca:	580b      	ldrlt	r3, [r1, r0]
 8006ccc:	18c0      	addlt	r0, r0, r3
 8006cce:	4770      	bx	lr

08006cd0 <__retarget_lock_acquire_recursive>:
 8006cd0:	4770      	bx	lr

08006cd2 <__retarget_lock_release_recursive>:
 8006cd2:	4770      	bx	lr

08006cd4 <_init>:
 8006cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd6:	bf00      	nop
 8006cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cda:	bc08      	pop	{r3}
 8006cdc:	469e      	mov	lr, r3
 8006cde:	4770      	bx	lr

08006ce0 <_fini>:
 8006ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ce2:	bf00      	nop
 8006ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ce6:	bc08      	pop	{r3}
 8006ce8:	469e      	mov	lr, r3
 8006cea:	4770      	bx	lr
